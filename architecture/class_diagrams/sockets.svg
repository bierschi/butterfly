<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="902px" preserveAspectRatio="none" style="width:1132px;height:902px;" version="1.1" viewBox="0 0 1132 902" width="1132px" zoomAndPan="magnify"><defs><filter height="300%" id="fsahsqzw3inmq" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster butterfly--><polygon fill="#DDDDDD" filter="url(#fsahsqzw3inmq)" points="22,24,96,24,103,46.2969,1110,46.2969,1110,890,22,890,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--class Type--><rect fill="#FEFECE" filter="url(#fsahsqzw3inmq)" height="86.4141" id="Type" style="stroke: #A80036; stroke-width: 1.5;" width="73" x="975.5" y="85"/><ellipse cx="995.9" cy="101" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1000.0094,107 L992.2906,107 L992.2906,94.6094 L1000.0094,94.6094 L1000.0094,96.7656 L994.7438,96.7656 L994.7438,99.4375 L999.5094,99.4375 L999.5094,101.5938 L994.7438,101.5938 L994.7438,104.8438 L1000.0094,104.8438 L1000.0094,107 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="1011.1" y="105.1543">Type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="976.5" x2="1047.5" y1="117" y2="117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="38" x="981.5" y="131.2104">Socket</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="981.5" y="144.0151">TCPSocket</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="981.5" y="156.8198">TORSocket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="976.5" x2="1047.5" y1="163.4141" y2="163.4141"/><!--class ISocket--><rect fill="#FEFECE" filter="url(#fsahsqzw3inmq)" height="137.6328" id="ISocket" style="stroke: #A80036; stroke-width: 1.5;" width="353" x="400.5" y="59"/><ellipse cx="549.25" cy="75" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M545.1719,70.7656 L545.1719,68.6094 L552.5625,68.6094 L552.5625,70.7656 L550.0938,70.7656 L550.0938,78.8438 L552.5625,78.8438 L552.5625,81 L545.1719,81 L545.1719,78.8438 L547.6406,78.8438 L547.6406,70.7656 L545.1719,70.7656 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="47" x="569.75" y="79.1543">ISocket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="401.5" x2="752.5" y1="91" y2="91"/><ellipse cx="411.5" cy="102.9023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="420.5" y="105.2104">enum Type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="401.5" x2="752.5" y1="111.8047" y2="111.8047"/><ellipse cx="411.5" cy="123.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="420.5" y="126.0151">ISocket()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="424.5" y="138.8198"/><ellipse cx="411.5" cy="149.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="420.5" y="151.6245">send(const std::string &amp;s) const = 0: bool</text><ellipse cx="411.5" cy="162.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="420.5" y="164.4292">recv(char *buf, int len) const = 0: int</text><ellipse cx="411.5" cy="174.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="420.5" y="177.2339">recvAll(int chunkSize, bool blocking) const = 0: std::string</text><ellipse cx="411.5" cy="187.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="420.5" y="190.0386">getType() const = 0: ISocket::Type</text><!--class Socket--><rect fill="#FEFECE" filter="url(#fsahsqzw3inmq)" height="342.5078" id="Socket" style="stroke: #A80036; stroke-width: 1.5;" width="393" x="336.5" y="257"/><ellipse cx="507.25" cy="273" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M510.2188,278.6406 Q509.6406,278.9375 509,279.0781 Q508.3594,279.2344 507.6563,279.2344 Q505.1563,279.2344 503.8281,277.5938 Q502.5156,275.9375 502.5156,272.8125 Q502.5156,269.6875 503.8281,268.0313 Q505.1563,266.375 507.6563,266.375 Q508.3594,266.375 509,266.5313 Q509.6563,266.6875 510.2188,266.9844 L510.2188,269.7031 Q509.5938,269.125 509,268.8594 Q508.4063,268.5781 507.7813,268.5781 Q506.4375,268.5781 505.75,269.6563 Q505.0625,270.7188 505.0625,272.8125 Q505.0625,274.9063 505.75,275.9844 Q506.4375,277.0469 507.7813,277.0469 Q508.4063,277.0469 509,276.7813 Q509.5938,276.5 510.2188,275.9219 L510.2188,278.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="43" x="527.75" y="277.1543">Socket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="337.5" x2="728.5" y1="289" y2="289"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="344.5" y="297.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="356.5" y="303.2104">_socketDomain, _socketType, _socketProtocol: int</text><polygon fill="none" points="347.5,308.707,351.5,312.707,347.5,316.707,343.5,312.707" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="39" x="356.5" y="316.0151">_fd: int</text><polygon fill="none" points="347.5,321.5117,351.5,325.5117,347.5,329.5117,343.5,325.5117" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="356.5" y="328.8198">_addr: sockaddr_in</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="337.5" x2="728.5" y1="335.4141" y2="335.4141"/><ellipse cx="347.5" cy="347.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="356.5" y="349.6245">Socket(int domain, int type, int protocol)</text><ellipse cx="347.5" cy="360.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="356.5" y="362.4292">Socket(int fileDescriptor, int domain, int type, int protocol)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="360.5" y="375.2339"/><ellipse cx="347.5" cy="385.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="356.5" y="388.0386">getFileDescriptor() const: int</text><ellipse cx="347.5" cy="398.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="356.5" y="400.8433">shutdown() const: bool</text><ellipse cx="347.5" cy="411.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="356.5" y="413.6479">setOptions() const: bool</text><ellipse cx="347.5" cy="424.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="356.5" y="426.4526">setBlocking() const: bool</text><ellipse cx="347.5" cy="436.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="356.5" y="439.2573">setNonBlocking() const: bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="360.5" y="452.062"/><ellipse cx="347.5" cy="462.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="356.5" y="464.8667">bind(unsigned int port): bool</text><ellipse cx="347.5" cy="475.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="356.5" y="477.6714">listen() const: bool</text><ellipse cx="347.5" cy="488.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="356.5" y="490.4761">accept(): std::shared_ptr&lt;Socket&gt;</text><ellipse cx="347.5" cy="500.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="356.5" y="503.2808">connect(const std::string&amp; host, int port): bool</text><ellipse cx="347.5" cy="513.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="356.5" y="516.0854">disconnect() const: bool</text><ellipse cx="347.5" cy="526.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="367" x="356.5" y="528.8901">hostnameToIP(const std::string &amp;hostname, std::string &amp;ip): int</text><line style="stroke: #000000; stroke-width: 1.0;" x1="356.5" x2="723.5" y1="530.8901" y2="530.8901"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="360.5" y="541.6948"/><ellipse cx="347.5" cy="552.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="356.5" y="554.4995">send(const std::string &amp;s) const: bool</text><ellipse cx="347.5" cy="564.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="356.5" y="567.3042">recv(char *buf, int len) const: int</text><ellipse cx="347.5" cy="577.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="356.5" y="580.1089">recvAll(int chunkSize, bool blocking) const: std::string</text><ellipse cx="347.5" cy="590.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="356.5" y="592.9136">getType() const: ISocket::Type</text><!--class TCPSocket--><rect fill="#FEFECE" filter="url(#fsahsqzw3inmq)" height="150.4375" id="TCPSocket" style="stroke: #A80036; stroke-width: 1.5;" width="329" x="37.5" y="692"/><ellipse cx="164.75" cy="708" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M167.7188,713.6406 Q167.1406,713.9375 166.5,714.0781 Q165.8594,714.2344 165.1563,714.2344 Q162.6563,714.2344 161.3281,712.5938 Q160.0156,710.9375 160.0156,707.8125 Q160.0156,704.6875 161.3281,703.0313 Q162.6563,701.375 165.1563,701.375 Q165.8594,701.375 166.5,701.5313 Q167.1563,701.6875 167.7188,701.9844 L167.7188,704.7031 Q167.0938,704.125 166.5,703.8594 Q165.9063,703.5781 165.2813,703.5781 Q163.9375,703.5781 163.25,704.6563 Q162.5625,705.7188 162.5625,707.8125 Q162.5625,709.9063 163.25,710.9844 Q163.9375,712.0469 165.2813,712.0469 Q165.9063,712.0469 166.5,711.7813 Q167.0938,711.5 167.7188,710.9219 L167.7188,713.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="185.25" y="712.1543">TCPSocket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="38.5" x2="365.5" y1="724" y2="724"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="38.5" x2="365.5" y1="732" y2="732"/><ellipse cx="48.5" cy="743.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="57.5" y="746.2104">TCPSocket()</text><ellipse cx="48.5" cy="756.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="57.5" y="759.0151">TCPSocket(int fileDescriptor)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="61.5" y="771.8198"/><ellipse cx="48.5" cy="782.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="57.5" y="784.6245">accept(): std::shared_ptr&lt;TCPSocket&gt;</text><ellipse cx="48.5" cy="795.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="57.5" y="797.4292">send(const std::string &amp;s) const: bool</text><ellipse cx="48.5" cy="807.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="57.5" y="810.2339">recv(char *buf, int len) const: int</text><ellipse cx="48.5" cy="820.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="57.5" y="823.0386">recvAll(int chunkSize, bool blocking) const: std::string</text><ellipse cx="48.5" cy="833.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="57.5" y="835.8433">getType() const: ISocket::Type</text><!--class TORSocket--><rect fill="#FEFECE" filter="url(#fsahsqzw3inmq)" height="214.4609" id="TORSocket" style="stroke: #A80036; stroke-width: 1.5;" width="329" x="401.5" y="660"/><ellipse cx="528.25" cy="676" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M531.2188,681.6406 Q530.6406,681.9375 530,682.0781 Q529.3594,682.2344 528.6563,682.2344 Q526.1563,682.2344 524.8281,680.5938 Q523.5156,678.9375 523.5156,675.8125 Q523.5156,672.6875 524.8281,671.0313 Q526.1563,669.375 528.6563,669.375 Q529.3594,669.375 530,669.5313 Q530.6563,669.6875 531.2188,669.9844 L531.2188,672.7031 Q530.5938,672.125 530,671.8594 Q529.4063,671.5781 528.7813,671.5781 Q527.4375,671.5781 526.75,672.6563 Q526.0625,673.7188 526.0625,675.8125 Q526.0625,677.9063 526.75,678.9844 Q527.4375,680.0469 528.7813,680.0469 Q529.4063,680.0469 530,679.7813 Q530.5938,679.5 531.2188,678.9219 L531.2188,681.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="67" x="548.75" y="680.1543">TORSocket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="402.5" x2="729.5" y1="692" y2="692"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="409.5" y="700.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="421.5" y="706.2104">_ip: std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="409.5" y="713.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="51" x="421.5" y="719.0151">_port: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="409.5" y="726.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="421.5" y="731.8198">_sendAuthBuf[3], _connReqDomainBuf[4]: char</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="402.5" x2="729.5" y1="738.4141" y2="738.4141"/><ellipse cx="412.5" cy="750.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="421.5" y="752.6245">TORSocket(const std::string &amp;ip, int port)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="425.5" y="765.4292"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="409.5" y="772.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="421.5" y="778.2339">authenticate(const std::string &amp;str, int size): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="409.5" y="785.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="270" x="421.5" y="791.0386">serverStatusResponse(char status): std::string</text><line style="stroke: #000000; stroke-width: 1.0;" x1="421.5" x2="691.5" y1="793.0386" y2="793.0386"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="425.5" y="803.8433"/><ellipse cx="412.5" cy="814.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="421.5" y="816.6479">connect(const std::string &amp;domain, int port): bool</text><ellipse cx="412.5" cy="827.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="421.5" y="829.4526">send(const std::string &amp;s) const: bool</text><ellipse cx="412.5" cy="839.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="421.5" y="842.2573">recv(char *buf, int len) const: int</text><ellipse cx="412.5" cy="852.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="421.5" y="855.062">recvAll(int chunkSize, bool blocking) const: std::string</text><ellipse cx="412.5" cy="865.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="421.5" y="867.8667">getType() const: ISocket::Type</text><!--class UDPSocket--><rect fill="#FEFECE" filter="url(#fsahsqzw3inmq)" height="130.7656" id="UDPSocket" style="stroke: #A80036; stroke-width: 1.5;" width="329" x="765.5" y="701.5"/><ellipse cx="863.25" cy="720.4688" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M866.2188,726.1094 Q865.6406,726.4063 865,726.5469 Q864.3594,726.7031 863.6563,726.7031 Q861.1563,726.7031 859.8281,725.0625 Q858.5156,723.4063 858.5156,720.2813 Q858.5156,717.1563 859.8281,715.5 Q861.1563,713.8438 863.6563,713.8438 Q864.3594,713.8438 865,714 Q865.6563,714.1563 866.2188,714.4531 L866.2188,717.1719 Q865.5938,716.5938 865,716.3281 Q864.4063,716.0469 863.7813,716.0469 Q862.4375,716.0469 861.75,717.125 Q861.0625,718.1875 861.0625,720.2813 Q861.0625,722.375 861.75,723.4531 Q862.4375,724.5156 863.7813,724.5156 Q864.4063,724.5156 865,724.25 Q865.5938,723.9688 866.2188,723.3906 L866.2188,726.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="129" x="881.75" y="717.6387">«NOT IMPLEMENTED»</text><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="69" x="911.75" y="731.6074">UDPSocket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="766.5" x2="1093.5" y1="739.4375" y2="739.4375"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="766.5" x2="1093.5" y1="747.4375" y2="747.4375"/><ellipse cx="776.5" cy="759.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="785.5" y="761.6479">UDPSocket()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="789.5" y="774.4526"/><ellipse cx="776.5" cy="784.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="785.5" y="787.2573">send(const std::string &amp;s) const: bool</text><ellipse cx="776.5" cy="797.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="785.5" y="800.062">recv(char *buf, int len) const: int</text><ellipse cx="776.5" cy="810.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="785.5" y="812.8667">recvAll(int chunkSize, bool blocking) const: std::string</text><ellipse cx="776.5" cy="823.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="785.5" y="825.6714">getType() const: ISocket::Type</text><!--link ISocket to Socket--><path d="M564.02,217.03 C562.15,229.71 560.18,243.11 558.17,256.75 " fill="none" id="ISocket-Socket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="557.12,215.87,566.96,197.11,570.97,217.91,557.12,215.87" style="stroke: #A80036; stroke-width: 1.0;"/><!--link ISocket to TCPSocket--><path d="M382.91,200.73 C358.76,216.27 336.47,234.86 319,257 C217.89,385.12 201.12,584.71 200.08,691.93 " fill="none" id="ISocket-TCPSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="379.59,194.55,400.33,190.2,386.83,206.53,379.59,194.55" style="stroke: #A80036; stroke-width: 1.0;"/><!--link ISocket to TORSocket--><path d="M712.8,210.88 C726.51,224.57 738.49,239.95 747,257 C815.05,393.41 808.37,460.45 747,600 C737.47,621.66 723.57,641.73 707.64,659.89 " fill="none" id="ISocket-TORSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="707.95,215.93,697.97,197.24,717.42,205.62,707.95,215.93" style="stroke: #A80036; stroke-width: 1.0;"/><!--link ISocket to UDPSocket--><path d="M731.62,208.99 C749.71,223.13 766.49,239.14 780,257 C882.65,392.76 915.26,597.67 925.46,701.21 " fill="none" id="ISocket-UDPSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="727.37,214.55,715.43,197.04,735.68,203.29,727.37,214.55" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Socket to TCPSocket--><path d="M350.99,614.54 C324.12,641.85 297.85,668.56 275.02,691.76 " fill="none" id="Socket-TCPSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="346.06,609.56,365.08,600.21,356.04,619.38,346.06,609.56" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Socket to UDPSocket--><path d="M745.24,609.39 C784.06,642.3 822.17,674.6 853.61,701.25 " fill="none" id="Socket-UDPSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="740.49,614.54,729.76,596.27,749.54,603.86,740.49,614.54" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Socket to TORSocket--><path d="M551.7,620.18 C553.03,633.73 554.34,647.09 555.59,659.89 " fill="none" id="Socket-TORSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="544.73,620.8,549.74,600.21,558.66,619.44,544.73,620.8" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml

package butterfly #DDDDDD
{

enum Type
{
  Socket
  TCPSocket
  TORSocket
}

Interface ISocket
{

    + enum Type

    + ISocket()

    + send(const std::string &s) const = 0: bool
    + recv(char *buf, int len) const = 0: int
    + recvAll(int chunkSize, bool blocking) const = 0: std::string
    + getType() const = 0: ISocket::Type
}

class Socket
{
    - _socketDomain, _socketType, _socketProtocol: int
    # _fd: int
    # _addr: sockaddr_in

    + Socket(int domain, int type, int protocol)
    + Socket(int fileDescriptor, int domain, int type, int protocol)

    + getFileDescriptor() const: int
    + shutdown() const: bool
    + setOptions() const: bool
    + setBlocking() const: bool
    + setNonBlocking() const: bool

    + bind(unsigned int port): bool
    + listen() const: bool
    + accept(): std::shared_ptr<Socket>
    + connect(const std::string& host, int port): bool
    + disconnect() const: bool
    + {static} hostnameToIP(const std::string &hostname, std::string &ip): int

    + send(const std::string &s) const: bool
    + recv(char *buf, int len) const: int
    + recvAll(int chunkSize, bool blocking) const: std::string
    + getType() const: ISocket::Type
}

class TCPSocket
{

    + TCPSocket()
    + TCPSocket(int fileDescriptor)

    + accept(): std::shared_ptr<TCPSocket>
    + send(const std::string &s) const: bool
    + recv(char *buf, int len) const: int
    + recvAll(int chunkSize, bool blocking) const: std::string
    + getType() const: ISocket::Type
}

class TORSocket
{
    - _ip: std::string
    - _port: int
    - _sendAuthBuf[3], _connReqDomainBuf[4]: char

    + TORSocket(const std::string &ip, int port)

    - authenticate(const std::string &str, int size): bool
    - {static} serverStatusResponse(char status): std::string

    + connect(const std::string &domain, int port): bool
    + send(const std::string &s) const: bool
    + recv(char *buf, int len) const: int
    + recvAll(int chunkSize, bool blocking) const: std::string
    + getType() const: ISocket::Type
}

class UDPSocket <<NOT IMPLEMENTED>>
{
    + UDPSocket()

    + send(const std::string &s) const: bool
    + recv(char *buf, int len) const: int
    + recvAll(int chunkSize, bool blocking) const: std::string
    + getType() const: ISocket::Type
}


ISocket           <|- - Socket
ISocket           <|- - TCPSocket
ISocket           <|- - TORSocket
ISocket           <|- - UDPSocket

Socket            <|- - TCPSocket
Socket            <|- - UDPSocket
Socket            <|- - TORSocket

}
@enduml

PlantUML version 1.2018.13(Mon Nov 26 18:11:51 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.18+10-post-Ubuntu-0ubuntu120.04.1
Operating System: Linux
OS Version: 5.15.0-67-generic
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>