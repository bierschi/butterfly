<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="668px" preserveAspectRatio="none" style="width:1196px;height:668px;" version="1.1" viewBox="0 0 1196 668" width="1196px" zoomAndPan="magnify"><defs><filter height="300%" id="f1wwj2ius2bdfd" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster RSA--><polygon fill="#DDDDDD" filter="url(#f1wwj2ius2bdfd)" points="14,16,51,16,58,38.2969,1174,38.2969,1174,656,14,656,14,16" style="stroke: #000000; stroke-width: 2.0;"/><line style="stroke: #000000; stroke-width: 2.0;" x1="14" x2="58" y1="38.2969" y2="38.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="31" x="18" y="30.9951">RSA</text><!--class CryptoRSA--><rect fill="#FEFECE" filter="url(#f1wwj2ius2bdfd)" height="406.5313" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="668" x="260" y="43"/><ellipse cx="557.75" cy="59" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M560.7188,64.6406 Q560.1406,64.9375 559.5,65.0781 Q558.8594,65.2344 558.1563,65.2344 Q555.6563,65.2344 554.3281,63.5938 Q553.0156,61.9375 553.0156,58.8125 Q553.0156,55.6875 554.3281,54.0313 Q555.6563,52.375 558.1563,52.375 Q558.8594,52.375 559.5,52.5313 Q560.1563,52.6875 560.7188,52.9844 L560.7188,55.7031 Q560.0938,55.125 559.5,54.8594 Q558.9063,54.5781 558.2813,54.5781 Q556.9375,54.5781 556.25,55.6563 Q555.5625,56.7188 555.5625,58.8125 Q555.5625,60.9063 556.25,61.9844 Q556.9375,63.0469 558.2813,63.0469 Q558.9063,63.0469 559.5,62.7813 Q560.0938,62.5 560.7188,61.9219 L560.7188,64.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="578.25" y="63.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="261" x2="927" y1="75" y2="75"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="268" y="83.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="280" y="89.2104">_rsa: RSA*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="268" y="96.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="280" y="102.0151">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="268" y="109.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="280" y="114.8198">_keySize, _paddingSize: Int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="268" y="122.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="280" y="127.6245">_rsaPrivateKeyStr, *_rsaPublicKeyStr, *_publicKeyStr: Char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="261" x2="927" y1="134.2188" y2="134.2188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="268" y="143.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="280" y="148.4292">initPaddingSize(): Void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="268" y="155.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="280" y="161.2339">loadKeyFromFile(const std::string &amp;filepath): Void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="268" y="168.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="280" y="174.0386">loadKeyFromStr(const std::string &amp;str): Void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="268" y="181.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="280" y="186.8433">getOpenSSLError(): String</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="268" y="194.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="280" y="199.6479">generateRSAKey(): Boolean</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="268" y="207.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="280" y="212.4526">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): Boolean</text><ellipse cx="271" cy="222.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="280" y="225.2573">CryptoRSA()</text><ellipse cx="271" cy="235.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="280" y="238.062">CryptoRSA(int keySize)</text><ellipse cx="271" cy="248.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="280" y="250.8667">CryptoRSA(const std::string &amp;key)</text><ellipse cx="271" cy="261.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="280" y="263.6714">getRSAKey(): RSA*</text><ellipse cx="271" cy="274.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="280" y="276.4761">getRSAKeySize(): Int</text><ellipse cx="271" cy="286.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="280" y="289.2808">getPaddingSize(): Int</text><ellipse cx="271" cy="299.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="280" y="302.0854">getEvpPkey(): EVP_PKEY*</text><ellipse cx="271" cy="312.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="280" y="314.8901">getEvpPkeySize(EVP_PKEY *key): Int</text><ellipse cx="271" cy="325.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="280" y="327.6948">getRSAPrivateKeyStr(): Char*</text><ellipse cx="271" cy="338.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="280" y="340.4995">getRSAPublicKeyStr(): Char*</text><ellipse cx="271" cy="350.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="280" y="353.3042">getPublicKeyStr(): Char*</text><ellipse cx="271" cy="363.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="280" y="366.1089">createRSAPrivateKeyFile(const std::string &amp;filename):Boolean</text><ellipse cx="271" cy="376.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="280" y="378.9136">createRSAPublicKeyFile(const std::string &amp;filename): Boolean</text><ellipse cx="271" cy="389.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="280" y="391.7183">createPublicKeyFile(const std::string &amp;filename): Boolean</text><ellipse cx="271" cy="402.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="378" x="280" y="404.5229">getPkeyFromPrivateKeyFile(const std::string &amp;filepath): EVP_PKEY*</text><ellipse cx="271" cy="415.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="280" y="417.3276">getPkeyFromPublicKeyFile(const std::string &amp;filepath): EVP_PKEY*</text><ellipse cx="271" cy="427.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="642" x="280" y="430.1323">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): Size_t</text><ellipse cx="271" cy="440.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="615" x="280" y="442.937">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): Size_t</text><!--class RSAEncryptor--><rect fill="#FEFECE" filter="url(#f1wwj2ius2bdfd)" height="137.6328" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="620" x="22" y="510"/><ellipse cx="285.75" cy="526" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M288.7188,531.6406 Q288.1406,531.9375 287.5,532.0781 Q286.8594,532.2344 286.1563,532.2344 Q283.6563,532.2344 282.3281,530.5938 Q281.0156,528.9375 281.0156,525.8125 Q281.0156,522.6875 282.3281,521.0313 Q283.6563,519.375 286.1563,519.375 Q286.8594,519.375 287.5,519.5313 Q288.1563,519.6875 288.7188,519.9844 L288.7188,522.7031 Q288.0938,522.125 287.5,521.8594 Q286.9063,521.5781 286.2813,521.5781 Q284.9375,521.5781 284.25,522.6563 Q283.5625,523.7188 283.5625,525.8125 Q283.5625,527.9063 284.25,528.9844 Q284.9375,530.0469 286.2813,530.0469 Q286.9063,530.0469 287.5,529.7813 Q288.0938,529.5 288.7188,528.9219 L288.7188,531.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="306.25" y="530.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23" x2="641" y1="542" y2="542"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="550.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="42" y="556.2104">_encryptedKey: String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23" x2="641" y1="562.8047" y2="562.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="571.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="42" y="577.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): Boolean</text><ellipse cx="33" cy="587.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="42" y="589.8198">RSAEncryptor(int keySize)</text><ellipse cx="33" cy="600.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="42" y="602.6245">RSAEncryptor(const std::string &amp;key)</text><ellipse cx="33" cy="613.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="42" y="615.4292">getEncryptedKey(): String</text><ellipse cx="33" cy="625.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="594" x="42" y="628.2339">saveEncryptedKeyFile(const std::string &amp;filename, const std::string &amp;ciphertextKey, int keyLength): Void</text><ellipse cx="33" cy="638.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="42" y="641.0386">encrypt(EVP_PKEY *pkey, const std::string &amp;msg): Boolean</text><!--class RSADecryptor--><rect fill="#FEFECE" filter="url(#f1wwj2ius2bdfd)" height="137.6328" id="RSADecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="489" x="677.5" y="510"/><ellipse cx="875.25" cy="526" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M878.2188,531.6406 Q877.6406,531.9375 877,532.0781 Q876.3594,532.2344 875.6563,532.2344 Q873.1563,532.2344 871.8281,530.5938 Q870.5156,528.9375 870.5156,525.8125 Q870.5156,522.6875 871.8281,521.0313 Q873.1563,519.375 875.6563,519.375 Q876.3594,519.375 877,519.5313 Q877.6563,519.6875 878.2188,519.9844 L878.2188,522.7031 Q877.5938,522.125 877,521.8594 Q876.4063,521.5781 875.7813,521.5781 Q874.4375,521.5781 873.75,522.6563 Q873.0625,523.7188 873.0625,525.8125 Q873.0625,527.9063 873.75,528.9844 Q874.4375,530.0469 875.7813,530.0469 Q876.4063,530.0469 877,529.7813 Q877.5938,529.5 878.2188,528.9219 L878.2188,531.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="895.75" y="530.1543">RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="678.5" x2="1165.5" y1="542" y2="542"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="685.5" y="550.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="697.5" y="556.2104">_decryptedKey: String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="678.5" x2="1165.5" y1="562.8047" y2="562.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="685.5" y="571.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="697.5" y="577.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): Boolean</text><ellipse cx="688.5" cy="587.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="697.5" y="589.8198">RSADecryptor()</text><ellipse cx="688.5" cy="600.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="697.5" y="602.6245">RSADecryptor(const std::string &amp;key)</text><ellipse cx="688.5" cy="613.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="697.5" y="615.4292">getDecryptedKey(): String</text><ellipse cx="688.5" cy="625.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="697.5" y="628.2339">getBinKeyFileContents(const std::string &amp;filepath): String</text><ellipse cx="688.5" cy="638.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="697.5" y="641.0386">decrypt(EVP_PKEY *pkey, const std::string &amp;msg): Boolean</text><!--link CryptoRSA to RSAEncryptor--><path d="M430.1861,454.3936 C414.6787,474.0738 399.827,492.9219 386.5787,509.735 " fill="none" id="CryptoRSA-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="433.296,450.4468,424.5839,455.0403,430.2014,454.3741,430.8676,459.9916,433.296,450.4468" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoRSA to RSADecryptor--><path d="M799.08,454.3936 C818.4939,474.0738 837.0869,492.9219 853.6724,509.735 " fill="none" id="CryptoRSA-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="795.1866,450.4468,798.6595,459.663,798.698,454.0063,804.3547,454.0448,795.1866,450.4468" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml
'https://plantuml.com/sequence-diagram
package RSA #DDDDDD {

class CryptoRSA {
    -_rsa: RSA*
    -_pkey: EVP_PKEY*
    -_keySize, _paddingSize: Int
    -_rsaPrivateKeyStr, *_rsaPublicKeyStr, *_publicKeyStr: Char*

    -initPaddingSize(): Void
    -loadKeyFromFile(const std::string &filepath): Void
    -loadKeyFromStr(const std::string &str): Void
    -getOpenSSLError(): String
    -generateRSAKey(): Boolean
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): Boolean

    +CryptoRSA()
    +CryptoRSA(int keySize)
    +CryptoRSA(const std::string &key)
    +getRSAKey(): RSA*
    +getRSAKeySize(): Int
    +getPaddingSize(): Int
    +getEvpPkey(): EVP_PKEY*
    +getEvpPkeySize(EVP_PKEY *key): Int
    +getRSAPrivateKeyStr(): Char*
    +getRSAPublicKeyStr(): Char*
    +getPublicKeyStr(): Char*
    +createRSAPrivateKeyFile(const std::string &filename):Boolean
    +createRSAPublicKeyFile(const std::string &filename): Boolean
    +createPublicKeyFile(const std::string &filename): Boolean
    +getPkeyFromPrivateKeyFile(const std::string &filepath): EVP_PKEY*
    +getPkeyFromPublicKeyFile(const std::string &filepath): EVP_PKEY*
    +encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): Size_t
    +decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): Size_t
}

class RSAEncryptor {
    -_encryptedKey: String

    -validateStringLengthForRSA(const std::string &msg, const int &keysize): Boolean

    +RSAEncryptor(int keySize)
    +RSAEncryptor(const std::string &key)
    +getEncryptedKey(): String
    +saveEncryptedKeyFile(const std::string &filename, const std::string &ciphertextKey, int keyLength): Void
    +encrypt(EVP_PKEY *pkey, const std::string &msg): Boolean
}

class RSADecryptor {
    -_decryptedKey: String
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): Boolean

    +RSADecryptor()
    +RSADecryptor(const std::string &key)
    +getDecryptedKey(): String
    +getBinKeyFileContents(const std::string &filepath): String
    +decrypt(EVP_PKEY *pkey, const std::string &msg): Boolean
}

CryptoRSA <- - RSAEncryptor
CryptoRSA <- - RSADecryptor

}
@enduml

PlantUML version 1.2017.15(Mon Jul 03 18:45:34 CEST 2017)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.10+9-Ubuntu-0ubuntu1.18.04
Operating System: Linux
OS Version: 5.4.0-70-generic
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>