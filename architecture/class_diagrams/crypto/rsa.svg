<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="783px" preserveAspectRatio="none" style="width:1246px;height:783px;" version="1.1" viewBox="0 0 1246 783" width="1246px" zoomAndPan="magnify"><defs><filter height="300%" id="f19hr1afg0u76i" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster butterfly--><polygon fill="#AAAAAA" filter="url(#f19hr1afg0u76i)" points="22,24,96,24,103,46.2969,1224,46.2969,1224,771,22,771,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--cluster rsa--><polygon fill="#DDDDDD" filter="url(#f19hr1afg0u76i)" points="46,67,77,67,84,89.2969,1200,89.2969,1200,747,46,747,46,67" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="46" x2="84" y1="89.2969" y2="89.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="50" y="81.9951">rsa</text><!--class CryptoRSA--><rect fill="#FEFECE" filter="url(#f19hr1afg0u76i)" height="419.3359" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="667" x="289.5" y="102"/><ellipse cx="586.75" cy="118" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M589.7188,123.6406 Q589.1406,123.9375 588.5,124.0781 Q587.8594,124.2344 587.1563,124.2344 Q584.6563,124.2344 583.3281,122.5938 Q582.0156,120.9375 582.0156,117.8125 Q582.0156,114.6875 583.3281,113.0313 Q584.6563,111.375 587.1563,111.375 Q587.8594,111.375 588.5,111.5313 Q589.1563,111.6875 589.7188,111.9844 L589.7188,114.7031 Q589.0938,114.125 588.5,113.8594 Q587.9063,113.5781 587.2813,113.5781 Q585.9375,113.5781 585.25,114.6563 Q584.5625,115.7188 584.5625,117.8125 Q584.5625,119.9063 585.25,120.9844 Q585.9375,122.0469 587.2813,122.0469 Q587.9063,122.0469 588.5,121.7813 Q589.0938,121.5 589.7188,120.9219 L589.7188,123.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="607.25" y="122.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="290.5" x2="955.5" y1="134" y2="134"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="297.5" y="142.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="309.5" y="148.2104">_rsa: RSA*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="297.5" y="155.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="309.5" y="161.0151">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="297.5" y="168.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="309.5" y="173.8198">_keySize, _paddingSize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="297.5" y="181.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="309.5" y="186.6245">_rsaPrivateKeyStr, *_rsaPublicKeyStr, *_publicKeyStr: char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="290.5" x2="955.5" y1="193.2188" y2="193.2188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="297.5" y="202.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="309.5" y="207.4292">initPaddingSize(): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="297.5" y="214.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="309.5" y="220.2339">loadKeyFromFile(const std::string &amp;filepath): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="297.5" y="227.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="309.5" y="233.0386">loadKeyFromStr(const std::string &amp;str): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="297.5" y="240.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="309.5" y="245.8433">getOpenSSLError(): string</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="297.5" y="253.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="309.5" y="258.6479">generateRSAKey(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="297.5" y="266.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="309.5" y="271.4526">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="313.5" y="284.2573"/><ellipse cx="300.5" cy="294.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="309.5" y="297.062">CryptoRSA()</text><ellipse cx="300.5" cy="307.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="309.5" y="309.8667">CryptoRSA(int keySize)</text><ellipse cx="300.5" cy="320.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="309.5" y="322.6714">CryptoRSA(const std::string &amp;key)</text><ellipse cx="300.5" cy="333.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="309.5" y="335.4761">getRSAKey(): RSA*</text><ellipse cx="300.5" cy="345.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="309.5" y="348.2808">getRSAKeySize(): int</text><ellipse cx="300.5" cy="358.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="309.5" y="361.0854">getPaddingSize(): int</text><ellipse cx="300.5" cy="371.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="309.5" y="373.8901">getEvpPkey(): EVP_PKEY*</text><ellipse cx="300.5" cy="384.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="309.5" y="386.6948">getEvpPkeySize(EVP_PKEY *key): int</text><ellipse cx="300.5" cy="397.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="309.5" y="399.4995">getRSAPrivateKeyStr(): char*</text><ellipse cx="300.5" cy="409.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="309.5" y="412.3042">getRSAPublicKeyStr(): char*</text><ellipse cx="300.5" cy="422.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="309.5" y="425.1089">getPublicKeyStr(): char*</text><ellipse cx="300.5" cy="435.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="329" x="309.5" y="437.9136">createRSAPrivateKeyFile(const std::string &amp;filename):bool</text><ellipse cx="300.5" cy="448.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="309.5" y="450.7183">createRSAPublicKeyFile(const std::string &amp;filename): bool</text><ellipse cx="300.5" cy="461.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="309.5" y="463.5229">createPublicKeyFile(const std::string &amp;filename): bool</text><ellipse cx="300.5" cy="474.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="378" x="309.5" y="476.3276">getPkeyFromPrivateKeyFile(const std::string &amp;filepath): EVP_PKEY*</text><ellipse cx="300.5" cy="486.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="309.5" y="489.1323">getPkeyFromPublicKeyFile(const std::string &amp;filepath): EVP_PKEY*</text><ellipse cx="300.5" cy="499.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="309.5" y="501.937">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): size_t</text><ellipse cx="300.5" cy="512.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="614" x="309.5" y="514.7417">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): size_t</text><!--class RSAEncryptor--><rect fill="#FEFECE" filter="url(#f19hr1afg0u76i)" height="150.4375" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="619" x="62.5" y="581"/><ellipse cx="325.75" cy="597" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M328.7188,602.6406 Q328.1406,602.9375 327.5,603.0781 Q326.8594,603.2344 326.1563,603.2344 Q323.6563,603.2344 322.3281,601.5938 Q321.0156,599.9375 321.0156,596.8125 Q321.0156,593.6875 322.3281,592.0313 Q323.6563,590.375 326.1563,590.375 Q326.8594,590.375 327.5,590.5313 Q328.1563,590.6875 328.7188,590.9844 L328.7188,593.7031 Q328.0938,593.125 327.5,592.8594 Q326.9063,592.5781 326.2813,592.5781 Q324.9375,592.5781 324.25,593.6563 Q323.5625,594.7188 323.5625,596.8125 Q323.5625,598.9063 324.25,599.9844 Q324.9375,601.0469 326.2813,601.0469 Q326.9063,601.0469 327.5,600.7813 Q328.0938,600.5 328.7188,599.9219 L328.7188,602.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="346.25" y="601.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="63.5" x2="680.5" y1="613" y2="613"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="70.5" y="621.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="82.5" y="627.2104">_encryptedKey: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="63.5" x2="680.5" y1="633.8047" y2="633.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="70.5" y="642.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="82.5" y="648.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="86.5" y="660.8198"/><ellipse cx="73.5" cy="671.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="82.5" y="673.6245">RSAEncryptor(int keySize)</text><ellipse cx="73.5" cy="684.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="82.5" y="686.4292">RSAEncryptor(const std::string &amp;key)</text><ellipse cx="73.5" cy="696.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="82.5" y="699.2339">getEncryptedKey(): std::string</text><ellipse cx="73.5" cy="709.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="593" x="82.5" y="712.0386">saveEncryptedKeyFile(const std::string &amp;filename, const std::string &amp;ciphertextKey, int keyLength): void</text><ellipse cx="73.5" cy="722.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="82.5" y="724.8433">encrypt(EVP_PKEY *pkey, const std::string &amp;msg): bool</text><!--class RSADecryptor--><rect fill="#FEFECE" filter="url(#f19hr1afg0u76i)" height="150.4375" id="RSADecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="467" x="716.5" y="581"/><ellipse cx="903.25" cy="597" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M906.2188,602.6406 Q905.6406,602.9375 905,603.0781 Q904.3594,603.2344 903.6563,603.2344 Q901.1563,603.2344 899.8281,601.5938 Q898.5156,599.9375 898.5156,596.8125 Q898.5156,593.6875 899.8281,592.0313 Q901.1563,590.375 903.6563,590.375 Q904.3594,590.375 905,590.5313 Q905.6563,590.6875 906.2188,590.9844 L906.2188,593.7031 Q905.5938,593.125 905,592.8594 Q904.4063,592.5781 903.7813,592.5781 Q902.4375,592.5781 901.75,593.6563 Q901.0625,594.7188 901.0625,596.8125 Q901.0625,598.9063 901.75,599.9844 Q902.4375,601.0469 903.7813,601.0469 Q904.4063,601.0469 905,600.7813 Q905.5938,600.5 906.2188,599.9219 L906.2188,602.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="923.75" y="601.1543">RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="717.5" x2="1182.5" y1="613" y2="613"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="724.5" y="621.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="736.5" y="627.2104">_decryptedKey: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="717.5" x2="1182.5" y1="633.8047" y2="633.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="724.5" y="642.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="736.5" y="648.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="740.5" y="660.8198"/><ellipse cx="727.5" cy="671.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="736.5" y="673.6245">RSADecryptor()</text><ellipse cx="727.5" cy="684.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="736.5" y="686.4292">RSADecryptor(const std::string &amp;key)</text><ellipse cx="727.5" cy="696.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="736.5" y="699.2339">getDecryptedKey(): std::string</text><ellipse cx="727.5" cy="709.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="736.5" y="712.0386">getBinKeyFileContents(const std::string &amp;filepath): std::string</text><ellipse cx="727.5" cy="722.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="736.5" y="724.8433">decrypt(EVP_PKEY *pkey, const std::string &amp;msg): bool</text><!--link CryptoRSA to RSAEncryptor--><path d="M466.85,525.57 C452.47,545.2 438.65,564.05 426.24,580.99 " fill="none" id="CryptoRSA-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="470.12,521.11,461.5781,526.0127,467.1681,525.1456,468.0352,530.7357,470.12,521.11" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoRSA to RSADecryptor--><path d="M825.96,525.08 C844.87,544.88 863.03,563.9 879.34,580.99 " fill="none" id="CryptoRSA-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="822.17,521.11,825.4813,530.3855,825.6186,524.7303,831.2738,524.8677,822.17,521.11" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml
package butterfly #AAAAAA
{

package rsa #DDDDDD
{

class CryptoRSA
{
    -_rsa: RSA*
    -_pkey: EVP_PKEY*
    -_keySize, _paddingSize: int
    -_rsaPrivateKeyStr, *_rsaPublicKeyStr, *_publicKeyStr: char*

    -initPaddingSize(): void
    -loadKeyFromFile(const std::string &filepath): void
    -loadKeyFromStr(const std::string &str): void
    -getOpenSSLError(): string
    -generateRSAKey(): bool
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    +CryptoRSA()
    +CryptoRSA(int keySize)
    +CryptoRSA(const std::string &key)
    +getRSAKey(): RSA*
    +getRSAKeySize(): int
    +getPaddingSize(): int
    +getEvpPkey(): EVP_PKEY*
    +getEvpPkeySize(EVP_PKEY *key): int
    +getRSAPrivateKeyStr(): char*
    +getRSAPublicKeyStr(): char*
    +getPublicKeyStr(): char*
    +createRSAPrivateKeyFile(const std::string &filename):bool
    +createRSAPublicKeyFile(const std::string &filename): bool
    +createPublicKeyFile(const std::string &filename): bool
    +getPkeyFromPrivateKeyFile(const std::string &filepath): EVP_PKEY*
    +getPkeyFromPublicKeyFile(const std::string &filepath): EVP_PKEY*
    +encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): size_t
    +decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): size_t
}

class RSAEncryptor
{
    -_encryptedKey: std::string

    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    +RSAEncryptor(int keySize)
    +RSAEncryptor(const std::string &key)
    +getEncryptedKey(): std::string
    +saveEncryptedKeyFile(const std::string &filename, const std::string &ciphertextKey, int keyLength): void
    +encrypt(EVP_PKEY *pkey, const std::string &msg): bool
}

class RSADecryptor
{
    -_decryptedKey: std::string
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    +RSADecryptor()
    +RSADecryptor(const std::string &key)
    +getDecryptedKey(): std::string
    +getBinKeyFileContents(const std::string &filepath): std::string
    +decrypt(EVP_PKEY *pkey, const std::string &msg): bool
}

CryptoRSA <- - RSAEncryptor
CryptoRSA <- - RSADecryptor

}

}
@enduml

PlantUML version 1.2018.13(Mon Nov 26 18:11:51 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.11+9-Ubuntu-0ubuntu2.20.04
Operating System: Linux
OS Version: 5.11.0-27-generic
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>