<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="822px" preserveAspectRatio="none" style="width:1325px;height:822px;" version="1.1" viewBox="0 0 1325 822" width="1325px" zoomAndPan="magnify"><defs><filter height="300%" id="fds7ghwjhrk3e" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster butterfly--><polygon fill="#AAAAAA" filter="url(#fds7ghwjhrk3e)" points="22,24,96,24,103,46.2969,1303,46.2969,1303,810,22,810,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--cluster rsa--><polygon fill="#DDDDDD" filter="url(#fds7ghwjhrk3e)" points="46,67,77,67,84,89.2969,1279,89.2969,1279,786,46,786,46,67" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="46" x2="84" y1="89.2969" y2="89.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="50" y="81.9951">rsa</text><!--class CryptoRSA--><rect fill="#FEFECE" filter="url(#fds7ghwjhrk3e)" height="419.3359" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="950" x="187" y="102"/><ellipse cx="625.75" cy="118" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M628.7188,123.6406 Q628.1406,123.9375 627.5,124.0781 Q626.8594,124.2344 626.1563,124.2344 Q623.6563,124.2344 622.3281,122.5938 Q621.0156,120.9375 621.0156,117.8125 Q621.0156,114.6875 622.3281,113.0313 Q623.6563,111.375 626.1563,111.375 Q626.8594,111.375 627.5,111.5313 Q628.1563,111.6875 628.7188,111.9844 L628.7188,114.7031 Q628.0938,114.125 627.5,113.8594 Q626.9063,113.5781 626.2813,113.5781 Q624.9375,113.5781 624.25,114.6563 Q623.5625,115.7188 623.5625,117.8125 Q623.5625,119.9063 624.25,120.9844 Q624.9375,122.0469 626.2813,122.0469 Q626.9063,122.0469 627.5,121.7813 Q628.0938,121.5 628.7188,120.9219 L628.7188,123.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="646.25" y="122.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="188" x2="1136" y1="134" y2="134"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="195" y="142.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="207" y="148.2104">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="195" y="155.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="207" y="161.0151">_keySize, _paddingSize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="195" y="168.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="207" y="173.8198">_rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="195" y="181.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="207" y="186.6245">_encryptedKey, _iv: unsigned char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="195" y="194.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="207" y="199.4292">rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="188" x2="1136" y1="206.0234" y2="206.0234"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="195" y="214.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="207" y="220.2339">getOpenSSLError(): string</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="195" y="227.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="207" y="233.0386">generateRSAKey(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="195" y="240.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="207" y="245.8433">loadKeyFromFile(const std::string &amp;filepath): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="195" y="253.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="207" y="258.6479">loadKeyFromStr(const std::string &amp;str): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="195" y="266.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="207" y="271.4526">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="211" y="284.2573"/><polygon fill="#FFFF44" points="198,289.7539,202,293.7539,198,297.7539,194,293.7539" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="207" y="297.062">getPaddingSize(): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="211" y="309.8667"/><ellipse cx="198" cy="320.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="207" y="322.6714">CryptoRSA(int keySize)</text><ellipse cx="198" cy="333.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="207" y="335.4761">CryptoRSA(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="211" y="348.2808"/><ellipse cx="198" cy="358.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="207" y="361.0854">getRSAIV() const: unsigned char*</text><ellipse cx="198" cy="371.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="207" y="373.8901">getRSAEncryptedKey() const: unsigned char*</text><ellipse cx="198" cy="384.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="207" y="386.6948">getEvpPkey(): EVP_PKEY*</text><ellipse cx="198" cy="397.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="207" y="399.4995">getEvpPkeySize(EVP_PKEY *key): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="211" y="412.3042"/><ellipse cx="198" cy="422.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="207" y="425.1089">getRSAPrivateKeyStr(): char*</text><ellipse cx="198" cy="435.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="207" y="437.9136">getPrivateKeyStr(): char*</text><ellipse cx="198" cy="448.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="207" y="450.7183">getPublicKeyStr(): char*</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="211" y="463.5229"/><ellipse cx="198" cy="474.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="668" x="207" y="476.3276">encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t</text><ellipse cx="198" cy="486.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="924" x="207" y="489.1323">decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): size_t</text><ellipse cx="198" cy="499.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="207" y="501.937">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): size_t</text><ellipse cx="198" cy="512.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="614" x="207" y="514.7417">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): size_t</text><!--class RSAEncryptor--><rect fill="#FEFECE" filter="url(#fds7ghwjhrk3e)" height="188.8516" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="699" x="61.5" y="581"/><ellipse cx="364.75" cy="597" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M367.7188,602.6406 Q367.1406,602.9375 366.5,603.0781 Q365.8594,603.2344 365.1563,603.2344 Q362.6563,603.2344 361.3281,601.5938 Q360.0156,599.9375 360.0156,596.8125 Q360.0156,593.6875 361.3281,592.0313 Q362.6563,590.375 365.1563,590.375 Q365.8594,590.375 366.5,590.5313 Q367.1563,590.6875 367.7188,590.9844 L367.7188,593.7031 Q367.0938,593.125 366.5,592.8594 Q365.9063,592.5781 365.2813,592.5781 Q363.9375,592.5781 363.25,593.6563 Q362.5625,594.7188 362.5625,596.8125 Q362.5625,598.9063 363.25,599.9844 Q363.9375,601.0469 365.2813,601.0469 Q365.9063,601.0469 366.5,600.7813 Q367.0938,600.5 367.7188,599.9219 L367.7188,602.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="385.25" y="601.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="62.5" x2="759.5" y1="613" y2="613"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="69.5" y="621.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="81.5" y="627.2104">__encryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="62.5" x2="759.5" y1="633.8047" y2="633.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="69.5" y="642.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="81.5" y="648.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="69.5" y="655.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="81.5" y="660.8198">writeRSAFilesToSystem(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="85.5" y="673.6245"/><ellipse cx="72.5" cy="684.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="81.5" y="686.4292">RSAEncryptor(int keySize)</text><ellipse cx="72.5" cy="696.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="81.5" y="699.2339">RSAEncryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="85.5" y="712.0386"/><ellipse cx="72.5" cy="722.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="81.5" y="724.8433">getEncryptedMessage() const: std::string</text><ellipse cx="72.5" cy="735.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="673" x="81.5" y="737.6479">saveEncryptedMsgToFile(const std::string &amp;filename, const std::string &amp;ciphertextMsg, int ciphertextMsgLength): void</text><ellipse cx="72.5" cy="748.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="81.5" y="750.4526">encrypt(EVP_PKEY *pkey, const std::string &amp;msg): void</text><ellipse cx="72.5" cy="760.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="81.5" y="763.2573">encryptEVP(EVP_PKEY *pkey, const std::string &amp;msg): void</text><!--class RSADecryptor--><rect fill="#FEFECE" filter="url(#fds7ghwjhrk3e)" height="176.0469" id="RSADecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="467" x="795.5" y="587.5"/><ellipse cx="982.25" cy="603.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M985.2188,609.1406 Q984.6406,609.4375 984,609.5781 Q983.3594,609.7344 982.6563,609.7344 Q980.1563,609.7344 978.8281,608.0938 Q977.5156,606.4375 977.5156,603.3125 Q977.5156,600.1875 978.8281,598.5313 Q980.1563,596.875 982.6563,596.875 Q983.3594,596.875 984,597.0313 Q984.6563,597.1875 985.2188,597.4844 L985.2188,600.2031 Q984.5938,599.625 984,599.3594 Q983.4063,599.0781 982.7813,599.0781 Q981.4375,599.0781 980.75,600.1563 Q980.0625,601.2188 980.0625,603.3125 Q980.0625,605.4063 980.75,606.4844 Q981.4375,607.5469 982.7813,607.5469 Q983.4063,607.5469 984,607.2813 Q984.5938,607 985.2188,606.4219 L985.2188,609.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="1002.75" y="607.6543">RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="796.5" x2="1261.5" y1="619.5" y2="619.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="803.5" y="628.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="815.5" y="633.7104">__decryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="796.5" x2="1261.5" y1="640.3047" y2="640.3047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="803.5" y="649.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="815.5" y="654.5151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="819.5" y="667.3198"/><ellipse cx="806.5" cy="677.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="815.5" y="680.1245">RSADecryptor()</text><ellipse cx="806.5" cy="690.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="815.5" y="692.9292">RSADecryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="819.5" y="705.7339"/><ellipse cx="806.5" cy="716.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="815.5" y="718.5386">getDecryptedMessage(): std::string</text><ellipse cx="806.5" cy="729.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="815.5" y="731.3433">getBinKeyFileContents(const std::string &amp;filepath): std::string</text><ellipse cx="806.5" cy="741.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="815.5" y="744.1479">decrypt(EVP_PKEY *pkey, const std::string &amp;msg): void</text><ellipse cx="806.5" cy="754.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="815.5" y="756.9526">decryptEVP(EVP_PKEY *pkey, const std::string &amp;msg): void</text><!--link CryptoRSA to RSAEncryptor--><path d="M514.24,525.6 C500.93,544.8 487.97,563.49 475.98,580.79 " fill="none" id="CryptoRSA-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="517.26,521.24,508.8326,526.337,514.4013,525.3422,515.3961,530.9109,517.26,521.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoRSA to RSADecryptor--><path d="M877.21,524.78 C899.5,546.76 921.15,568.12 940.78,587.48 " fill="none" id="CryptoRSA-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="873.62,521.24,877.2298,530.4035,877.184,524.7468,882.8407,524.701,873.62,521.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml
package butterfly #AAAAAA
{

package rsa #DDDDDD
{

class CryptoRSA
{
    -_pkey: EVP_PKEY*
    -_keySize, _paddingSize: int
    -_rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*
    -_encryptedKey, _iv: unsigned char*
    - rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*

    -getOpenSSLError(): string
    -generateRSAKey(): bool
    -loadKeyFromFile(const std::string &filepath): void
    -loadKeyFromStr(const std::string &str): void
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    #getPaddingSize(): int

    +CryptoRSA(int keySize)
    +CryptoRSA(const std::string &key)

    +getRSAIV() const: unsigned char*
    +getRSAEncryptedKey() const: unsigned char*
    +getEvpPkey(): EVP_PKEY*
    +getEvpPkeySize(EVP_PKEY *key): int

    +getRSAPrivateKeyStr(): char*
    +getPrivateKeyStr(): char*
    +getPublicKeyStr(): char*

    +encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t
    +decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): size_t
    +encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): size_t
    +decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): size_t
}

class RSAEncryptor
{
    -__encryptedMessage: std::string

    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool
    -writeRSAFilesToSystem(): bool

    +RSAEncryptor(int keySize)
    +RSAEncryptor(const std::string &key)

    +getEncryptedMessage() const: std::string
    +saveEncryptedMsgToFile(const std::string &filename, const std::string &ciphertextMsg, int ciphertextMsgLength): void
    +encrypt(EVP_PKEY *pkey, const std::string &msg): void
    +encryptEVP(EVP_PKEY *pkey, const std::string &msg): void
}

class RSADecryptor
{
    -__decryptedMessage: std::string
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    +RSADecryptor()
    +RSADecryptor(const std::string &key)

    +getDecryptedMessage(): std::string
    +getBinKeyFileContents(const std::string &filepath): std::string
    +decrypt(EVP_PKEY *pkey, const std::string &msg): void
    +decryptEVP(EVP_PKEY *pkey, const std::string &msg): void
}

CryptoRSA <- - RSAEncryptor
CryptoRSA <- - RSADecryptor

}

}
@enduml

PlantUML version 1.2018.13(Mon Nov 26 18:11:51 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.11+9-Ubuntu-0ubuntu2.20.04
Operating System: Linux
OS Version: 5.11.0-27-generic
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>