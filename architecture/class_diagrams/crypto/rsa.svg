<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="835px" preserveAspectRatio="none" style="width:1483px;height:835px;" version="1.1" viewBox="0 0 1483 835" width="1483px" zoomAndPan="magnify"><defs><filter height="300%" id="f1hxs1eqja5ko9" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster butterfly--><polygon fill="#AAAAAA" filter="url(#f1hxs1eqja5ko9)" points="22,24,96,24,103,46.2969,1461,46.2969,1461,823,22,823,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--cluster rsa--><polygon fill="#DDDDDD" filter="url(#f1hxs1eqja5ko9)" points="46,67,77,67,84,89.2969,1437,89.2969,1437,799,46,799,46,67" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="46" x2="84" y1="89.2969" y2="89.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="50" y="81.9951">rsa</text><!--class CryptoRSA--><rect fill="#FEFECE" filter="url(#f1hxs1eqja5ko9)" height="419.3359" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="932" x="275" y="102"/><ellipse cx="704.75" cy="118" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M707.7188,123.6406 Q707.1406,123.9375 706.5,124.0781 Q705.8594,124.2344 705.1563,124.2344 Q702.6563,124.2344 701.3281,122.5938 Q700.0156,120.9375 700.0156,117.8125 Q700.0156,114.6875 701.3281,113.0313 Q702.6563,111.375 705.1563,111.375 Q705.8594,111.375 706.5,111.5313 Q707.1563,111.6875 707.7188,111.9844 L707.7188,114.7031 Q707.0938,114.125 706.5,113.8594 Q705.9063,113.5781 705.2813,113.5781 Q703.9375,113.5781 703.25,114.6563 Q702.5625,115.7188 702.5625,117.8125 Q702.5625,119.9063 703.25,120.9844 Q703.9375,122.0469 705.2813,122.0469 Q705.9063,122.0469 706.5,121.7813 Q707.0938,121.5 707.7188,120.9219 L707.7188,123.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="725.25" y="122.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="276" x2="1206" y1="134" y2="134"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="283" y="142.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="295" y="148.2104">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="283" y="155.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="295" y="161.0151">_keySize, _paddingSize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="283" y="168.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="295" y="173.8198">_rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="283" y="181.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="295" y="186.6245">_encryptedKey, _iv: unsigned char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="283" y="194.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="295" y="199.4292">rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="276" x2="1206" y1="206.0234" y2="206.0234"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="283" y="214.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="295" y="220.2339">getOpenSSLError(): string</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="283" y="227.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="295" y="233.0386">generateRSAKey(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="283" y="240.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="295" y="245.8433">loadKeyFromFile(const std::string &amp;filepath): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="283" y="253.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="295" y="258.6479">loadKeyFromStr(const std::string &amp;str): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="283" y="266.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="295" y="271.4526">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="299" y="284.2573"/><polygon fill="#FFFF44" points="286,289.7539,290,293.7539,286,297.7539,282,293.7539" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="295" y="297.062">getPaddingSize(): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="299" y="309.8667"/><ellipse cx="286" cy="320.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="295" y="322.6714">CryptoRSA(int keySize)</text><ellipse cx="286" cy="333.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="295" y="335.4761">CryptoRSA(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="299" y="348.2808"/><ellipse cx="286" cy="358.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="295" y="361.0854">getRSAIV() const: unsigned char*</text><ellipse cx="286" cy="371.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="295" y="373.8901">getRSAEncryptedKey() const: unsigned char*</text><ellipse cx="286" cy="384.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="295" y="386.6948">getEvpPkey(): EVP_PKEY*</text><ellipse cx="286" cy="397.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="295" y="399.4995">getEvpPkeySize(EVP_PKEY *key): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="299" y="412.3042"/><ellipse cx="286" cy="422.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="295" y="425.1089">getRSAPrivateKeyStr(): char*</text><ellipse cx="286" cy="435.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="295" y="437.9136">getPrivateKeyStr(): char*</text><ellipse cx="286" cy="448.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="295" y="450.7183">getPublicKeyStr(): char*</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="299" y="463.5229"/><ellipse cx="286" cy="474.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="295" y="476.3276">encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): int</text><ellipse cx="286" cy="486.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="906" x="295" y="489.1323">decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): int</text><ellipse cx="286" cy="499.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="623" x="295" y="501.937">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): int</text><ellipse cx="286" cy="512.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="596" x="295" y="514.7417">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): int</text><!--class RSAEncryptor--><rect fill="#FEFECE" filter="url(#f1hxs1eqja5ko9)" height="201.6563" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="667" x="61.5" y="581"/><ellipse cx="348.75" cy="597" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M351.7188,602.6406 Q351.1406,602.9375 350.5,603.0781 Q349.8594,603.2344 349.1563,603.2344 Q346.6563,603.2344 345.3281,601.5938 Q344.0156,599.9375 344.0156,596.8125 Q344.0156,593.6875 345.3281,592.0313 Q346.6563,590.375 349.1563,590.375 Q349.8594,590.375 350.5,590.5313 Q351.1563,590.6875 351.7188,590.9844 L351.7188,593.7031 Q351.0938,593.125 350.5,592.8594 Q349.9063,592.5781 349.2813,592.5781 Q347.9375,592.5781 347.25,593.6563 Q346.5625,594.7188 346.5625,596.8125 Q346.5625,598.9063 347.25,599.9844 Q347.9375,601.0469 349.2813,601.0469 Q349.9063,601.0469 350.5,600.7813 Q351.0938,600.5 351.7188,599.9219 L351.7188,602.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="369.25" y="601.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="62.5" x2="727.5" y1="613" y2="613"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="69.5" y="621.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="81.5" y="627.2104">_encryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="62.5" x2="727.5" y1="633.8047" y2="633.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="69.5" y="642.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="81.5" y="648.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="69.5" y="655.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="81.5" y="660.8198">writeRSAFileToSystem(const RSAKEY_TYPE &amp;type): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="85.5" y="673.6245"/><ellipse cx="72.5" cy="684.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="81.5" y="686.4292">RSAEncryptor(int keySize)</text><ellipse cx="72.5" cy="696.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="81.5" y="699.2339">RSAEncryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="85.5" y="712.0386"/><ellipse cx="72.5" cy="722.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="81.5" y="724.8433">getEncryptedMessage() const: std::string</text><ellipse cx="72.5" cy="735.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="81.5" y="737.6479">writeEncMSGToFile(const std::string &amp;filename, const std::string &amp;ciphertextMsg, int ciphertextMsgLength): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="85.5" y="750.4526"/><ellipse cx="72.5" cy="760.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="81.5" y="763.2573">encrypt(EVP_PKEY *pkey, const std::string &amp;decMSG): int</text><ellipse cx="72.5" cy="773.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="504" x="81.5" y="776.062">encryptEVP(EVP_PKEY *pkey, const std::string &amp;decMSG, const RSAKEY_TYPE &amp;type): int</text><!--class RSADecryptor--><rect fill="#FEFECE" filter="url(#f1hxs1eqja5ko9)" height="201.6563" id="RSADecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="657" x="763.5" y="581"/><ellipse cx="1045.25" cy="597" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1048.2188,602.6406 Q1047.6406,602.9375 1047,603.0781 Q1046.3594,603.2344 1045.6563,603.2344 Q1043.1563,603.2344 1041.8281,601.5938 Q1040.5156,599.9375 1040.5156,596.8125 Q1040.5156,593.6875 1041.8281,592.0313 Q1043.1563,590.375 1045.6563,590.375 Q1046.3594,590.375 1047,590.5313 Q1047.6563,590.6875 1048.2188,590.9844 L1048.2188,593.7031 Q1047.5938,593.125 1047,592.8594 Q1046.4063,592.5781 1045.7813,592.5781 Q1044.4375,592.5781 1043.75,593.6563 Q1043.0625,594.7188 1043.0625,596.8125 Q1043.0625,598.9063 1043.75,599.9844 Q1044.4375,601.0469 1045.7813,601.0469 Q1046.4063,601.0469 1047,600.7813 Q1047.5938,600.5 1048.2188,599.9219 L1048.2188,602.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="1065.75" y="601.1543">RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="764.5" x2="1419.5" y1="613" y2="613"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="771.5" y="621.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="783.5" y="627.2104">_decryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="764.5" x2="1419.5" y1="633.8047" y2="633.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="771.5" y="642.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="783.5" y="648.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="771.5" y="655.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="587" x="783.5" y="660.8198">readRSAFileFromSystem(const RSAKEY_TYPE &amp;rsakeysType, std::string &amp;encKey, std::string &amp;iv): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="787.5" y="673.6245"/><ellipse cx="774.5" cy="684.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="783.5" y="686.4292">RSADecryptor()</text><ellipse cx="774.5" cy="696.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="783.5" y="699.2339">RSADecryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="787.5" y="712.0386"/><ellipse cx="774.5" cy="722.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="783.5" y="724.8433">getDecryptedMessage(): std::string</text><ellipse cx="774.5" cy="735.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="345" x="783.5" y="737.6479">readEncMSGFromFile(const std::string &amp;filepath): std::string</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="787.5" y="750.4526"/><ellipse cx="774.5" cy="760.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="783.5" y="763.2573">decrypt(EVP_PKEY *pkey, const std::string &amp;encMSG): int</text><ellipse cx="774.5" cy="773.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="631" x="783.5" y="776.062">decryptEVP(EVP_PKEY *pkey, const std::string &amp;encMSG, std::string &amp;decMSG, const RSAKEY_TYPE &amp;type): int</text><!--link CryptoRSA to RSAEncryptor--><path d="M530.99,536.17 C516.48,551.62 502.34,566.68 488.99,580.9 " fill="none" id="CryptoRSA-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="526.21,531.03,545,521.25,536.41,540.62,526.21,531.03" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoRSA to RSADecryptor--><path d="M954.04,536.17 C968.76,551.62 983.11,566.68 996.65,580.9 " fill="none" id="CryptoRSA-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="948.56,540.56,939.83,521.25,958.7,530.9,948.56,540.56" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml
package butterfly #AAAAAA
{

package rsa #DDDDDD
{

class CryptoRSA
{
    - _pkey: EVP_PKEY*
    - _keySize, _paddingSize: int
    - _rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*
    - _encryptedKey, _iv: unsigned char*
    - rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*

    - getOpenSSLError(): string
    - generateRSAKey(): bool
    - loadKeyFromFile(const std::string &filepath): void
    - loadKeyFromStr(const std::string &str): void
    - validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    # getPaddingSize(): int

    + CryptoRSA(int keySize)
    + CryptoRSA(const std::string &key)

    + getRSAIV() const: unsigned char*
    + getRSAEncryptedKey() const: unsigned char*
    + getEvpPkey(): EVP_PKEY*
    + getEvpPkeySize(EVP_PKEY *key): int

    + getRSAPrivateKeyStr(): char*
    + getPrivateKeyStr(): char*
    + getPublicKeyStr(): char*

    + encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): int
    + decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): int
    + encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): int
    + decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): int
}

class RSAEncryptor
{
    - _encryptedMessage: std::string

    - validateStringLengthForRSA(const std::string &msg, const int &keysize): bool
    - writeRSAFileToSystem(const RSAKEY_TYPE &type): bool

    + RSAEncryptor(int keySize)
    + RSAEncryptor(const std::string &key)

    + getEncryptedMessage() const: std::string
    + writeEncMSGToFile(const std::string &filename, const std::string &ciphertextMsg, int ciphertextMsgLength): void

    + encrypt(EVP_PKEY *pkey, const std::string &decMSG): int
    + encryptEVP(EVP_PKEY *pkey, const std::string &decMSG, const RSAKEY_TYPE &type): int
}

class RSADecryptor
{
    - _decryptedMessage: std::string
    - validateStringLengthForRSA(const std::string &msg, const int &keysize): bool
    - readRSAFileFromSystem(const RSAKEY_TYPE &rsakeysType, std::string &encKey, std::string &iv): void

    + RSADecryptor()
    + RSADecryptor(const std::string &key)

    + getDecryptedMessage(): std::string
    + readEncMSGFromFile(const std::string &filepath): std::string

    + decrypt(EVP_PKEY *pkey, const std::string &encMSG): int
    + decryptEVP(EVP_PKEY *pkey, const std::string &encMSG, std::string &decMSG, const RSAKEY_TYPE &type): int
}

CryptoRSA <|- - RSAEncryptor
CryptoRSA <|- - RSADecryptor

}

}
@enduml

PlantUML version 1.2018.13(Mon Nov 26 18:11:51 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.11+9-Ubuntu-0ubuntu2.20.04
Operating System: Linux
OS Version: 5.11.0-38-generic
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>