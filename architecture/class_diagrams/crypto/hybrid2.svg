<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1092px" preserveAspectRatio="none" style="width:3522px;height:1092px;" version="1.1" viewBox="0 0 3522 1092" width="3522px" zoomAndPan="magnify"><defs><filter height="300%" id="f1ni87s1if69li" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[8e789fa2d79d87af7a89a0214c555b42]
cluster butterfly--><polygon fill="#AAAAAA" filter="url(#f1ni87s1if69li)" points="22,24,96,24,103,46.2969,3500,46.2969,3500,1080,22,1080,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--MD5=[c85b91184774f21f9fb19ef777095c59]
cluster hybrid--><polygon fill="#DDDDDD" filter="url(#f1ni87s1if69li)" points="799,567,855,567,862,589.2969,2061,589.2969,2061,1056,799,1056,799,567" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="799" x2="862" y1="589.2969" y2="589.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="50" x="803" y="581.9951">hybrid</text><!--MD5=[2ecd8032ccbc79e7fc0a9e1475a4a439]
cluster rsa--><polygon fill="#DDDDDD" filter="url(#f1ni87s1if69li)" points="2085,67,2116,67,2123,89.2969,3476,89.2969,3476,788,2085,788,2085,67" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="2085" x2="2123" y1="89.2969" y2="89.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="2089" y="81.9951">rsa</text><!--MD5=[2316bb41a6150af629e39d956b089817]
cluster aes--><polygon fill="#DDDDDD" filter="url(#f1ni87s1if69li)" points="46,93,80,93,87,115.2969,775,115.2969,775,736.5,46,736.5,46,93" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="46" x2="87" y1="115.2969" y2="115.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="28" x="50" y="107.9951">aes</text><!--MD5=[0ceb135fd6b0c2b102e82ffe4bb2652f]
class CryptoThread--><rect fill="#FEFECE" filter="url(#f1ni87s1if69li)" height="137.6328" id="CryptoThread" style="stroke: #A80036; stroke-width: 1.5;" width="380" x="1431" y="602"/><ellipse cx="1574.75" cy="618" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1577.7188,623.6406 Q1577.1406,623.9375 1576.5,624.0781 Q1575.8594,624.2344 1575.1563,624.2344 Q1572.6563,624.2344 1571.3281,622.5938 Q1570.0156,620.9375 1570.0156,617.8125 Q1570.0156,614.6875 1571.3281,613.0313 Q1572.6563,611.375 1575.1563,611.375 Q1575.8594,611.375 1576.5,611.5313 Q1577.1563,611.6875 1577.7188,611.9844 L1577.7188,614.7031 Q1577.0938,614.125 1576.5,613.8594 Q1575.9063,613.5781 1575.2813,613.5781 Q1573.9375,613.5781 1573.25,614.6563 Q1572.5625,615.7188 1572.5625,617.8125 Q1572.5625,619.9063 1573.25,620.9844 Q1573.9375,622.0469 1575.2813,622.0469 Q1575.9063,622.0469 1576.5,621.7813 Q1577.0938,621.5 1577.7188,620.9219 L1577.7188,623.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="1595.25" y="622.1543">CryptoThread</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1432" x2="1810" y1="634" y2="634"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1439" y="642"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="1451" y="648.2104">_threads: std::vector&lt;std::thread&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1432" x2="1810" y1="654.8047" y2="654.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1439" y="662.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="1451" y="669.0151">handleLargeFilesWithAES(const std::string &amp;filepath) = 0: void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1455" y="681.8198"/><ellipse cx="1442" cy="691.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1451" y="694.6245">CryptoThread()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1455" y="707.4292"/><ellipse cx="1442" cy="717.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="1451" y="720.2339">create(const std::string &amp;filepath): void</text><ellipse cx="1442" cy="729.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1451" y="733.0386">jonThreads(): void</text><!--MD5=[d3b405991237fdfd6a1d7536c9b0ae84]
class CryptoSecurity--><rect fill="#FEFECE" filter="url(#f1ni87s1if69li)" height="124.8281" id="CryptoSecurity" style="stroke: #A80036; stroke-width: 1.5;" width="403" x="890.5" y="608.5"/><ellipse cx="1042.75" cy="624.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1045.7188,630.1406 Q1045.1406,630.4375 1044.5,630.5781 Q1043.8594,630.7344 1043.1563,630.7344 Q1040.6563,630.7344 1039.3281,629.0938 Q1038.0156,627.4375 1038.0156,624.3125 Q1038.0156,621.1875 1039.3281,619.5313 Q1040.6563,617.875 1043.1563,617.875 Q1043.8594,617.875 1044.5,618.0313 Q1045.1563,618.1875 1045.7188,618.4844 L1045.7188,621.2031 Q1045.0938,620.625 1044.5,620.3594 Q1043.9063,620.0781 1043.2813,620.0781 Q1041.9375,620.0781 1041.25,621.1563 Q1040.5625,622.2188 1040.5625,624.3125 Q1040.5625,626.4063 1041.25,627.4844 Q1041.9375,628.5469 1043.2813,628.5469 Q1043.9063,628.5469 1044.5,628.2813 Q1045.0938,628 1045.7188,627.4219 L1045.7188,630.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="90" x="1063.25" y="628.6543">CryptoSecurity</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="891.5" x2="1292.5" y1="640.5" y2="640.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="891.5" x2="1292.5" y1="648.5" y2="648.5"/><ellipse cx="901.5" cy="659.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="910.5" y="662.7104">CryptoSecurity()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="914.5" y="675.5151"/><ellipse cx="901.5" cy="685.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="372" x="910.5" y="688.3198">saveUnencryptedAESKeyPair(const std::string &amp;aesKeyPair): void</text><ellipse cx="901.5" cy="697.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="194" x="910.5" y="701.1245">areEncryptionFilesAvailable(): bool</text><ellipse cx="901.5" cy="710.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="165" x="910.5" y="713.9292">removeDecryptedFiles(): void</text><ellipse cx="901.5" cy="723.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="377" x="910.5" y="726.7339">getAESKeyPairFromUnencryptedFile(std::string &amp;aesKeyPair): bool</text><!--MD5=[b2f9fd5e50dd999be3fbf662fc19368c]
class Encryptor--><rect fill="#FEFECE" filter="url(#f1ni87s1if69li)" height="188.8516" id="Encryptor" style="stroke: #A80036; stroke-width: 1.5;" width="551" x="815.5" y="851"/><ellipse cx="1056.75" cy="867" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1059.7188,872.6406 Q1059.1406,872.9375 1058.5,873.0781 Q1057.8594,873.2344 1057.1563,873.2344 Q1054.6563,873.2344 1053.3281,871.5938 Q1052.0156,869.9375 1052.0156,866.8125 Q1052.0156,863.6875 1053.3281,862.0313 Q1054.6563,860.375 1057.1563,860.375 Q1057.8594,860.375 1058.5,860.5313 Q1059.1563,860.6875 1059.7188,860.9844 L1059.7188,863.7031 Q1059.0938,863.125 1058.5,862.8594 Q1057.9063,862.5781 1057.2813,862.5781 Q1055.9375,862.5781 1055.25,863.6563 Q1054.5625,864.7188 1054.5625,866.8125 Q1054.5625,868.9063 1055.25,869.9844 Q1055.9375,871.0469 1057.2813,871.0469 Q1057.9063,871.0469 1058.5,870.7813 Q1059.0938,870.5 1059.7188,869.9219 L1059.7188,872.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="1077.25" y="871.1543">Encryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="816.5" x2="1365.5" y1="883" y2="883"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="823.5" y="891"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="835.5" y="897.2104">_keySize: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="839.5" y="910.0151"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="823.5" y="916.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="492" x="835.5" y="922.8198">_rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: std::unique_ptr&lt;rsa::RSAEncryptor&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="823.5" y="929.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="835.5" y="935.6245">_aesEncryptor: std::unique_ptr&lt;aes::AESEncryptor&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="816.5" x2="1365.5" y1="942.2188" y2="942.2188"/><ellipse cx="826.5" cy="953.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="835.5" y="956.4292">Encryptor(int keySize = 2048)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="839.5" y="969.2339"/><ellipse cx="826.5" cy="978.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="835.5" y="982.0386">invokeDir(const std::string &amp;dirPath, bool protection): void</text><ellipse cx="826.5" cy="991.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="835.5" y="994.8433">encryptCPrivateRSA(): void</text><ellipse cx="826.5" cy="1004.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="835.5" y="1007.6479">encryptFileWithAES(const std::string &amp;filepath): void</text><ellipse cx="826.5" cy="1017.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="835.5" y="1020.4526">encryptLargeFilesWithAES(const std::string &amp;filepath): void</text><ellipse cx="826.5" cy="1030.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="525" x="835.5" y="1033.2573">encryptFinalAESKeyWithRSA(const std::string &amp;aesKeyStr, const std::string &amp;filename): void</text><!--MD5=[cc1235169195379c3d25bcc76fdfda6b]
class Decryptor--><rect fill="#FEFECE" filter="url(#f1ni87s1if69li)" height="188.8516" id="Decryptor" style="stroke: #A80036; stroke-width: 1.5;" width="643" x="1401.5" y="851"/><ellipse cx="1688.25" cy="867" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1691.2188,872.6406 Q1690.6406,872.9375 1690,873.0781 Q1689.3594,873.2344 1688.6563,873.2344 Q1686.1563,873.2344 1684.8281,871.5938 Q1683.5156,869.9375 1683.5156,866.8125 Q1683.5156,863.6875 1684.8281,862.0313 Q1686.1563,860.375 1688.6563,860.375 Q1689.3594,860.375 1690,860.5313 Q1690.6563,860.6875 1691.2188,860.9844 L1691.2188,863.7031 Q1690.5938,863.125 1690,862.8594 Q1689.4063,862.5781 1688.7813,862.5781 Q1687.4375,862.5781 1686.75,863.6563 Q1686.0625,864.7188 1686.0625,866.8125 Q1686.0625,868.9063 1686.75,869.9844 Q1687.4375,871.0469 1688.7813,871.0469 Q1689.4063,871.0469 1690,870.7813 Q1690.5938,870.5 1691.2188,869.9219 L1691.2188,872.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="1708.75" y="871.1543">Decryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1402.5" x2="2043.5" y1="883" y2="883"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1409.5" y="891"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="1421.5" y="897.2104">_decryptedCPrivateRSA: std::string</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1425.5" y="910.0151"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1409.5" y="916.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="495" x="1421.5" y="922.8198">_rsaDecryptorCPrivateRSA, _rsaDecryptorAESKey: std::unique_ptr&lt;rsa::RSADecryptor&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1409.5" y="929.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="1421.5" y="935.6245">_aesDecryptor: std::unique_ptr&lt;aes::AESDecryptor&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1402.5" x2="2043.5" y1="942.2188" y2="942.2188"/><ellipse cx="1412.5" cy="953.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="1421.5" y="956.4292">Decryptor(const std::string &amp;decryptedCPrivateRSA)</text><ellipse cx="1412.5" cy="966.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="521" x="1421.5" y="969.2339">Decryptor(const std::string &amp;privateKeyFromServer, const std::string &amp;encCPrivateRSAFile)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1425.5" y="982.0386"/><ellipse cx="1412.5" cy="991.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="1421.5" y="994.8433">invokeDir(const std::string &amp;dirPath): void</text><ellipse cx="1412.5" cy="1004.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="1421.5" y="1007.6479">decryptFileWithAES(const std::string &amp;filepath): void</text><ellipse cx="1412.5" cy="1017.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="1421.5" y="1020.4526">handleLargeFilesWithAES(const std::string &amp;filepath): void</text><ellipse cx="1412.5" cy="1030.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="617" x="1421.5" y="1033.2573">decryptAESKeyPair(const std::string &amp;filepathAESKey, std::string &amp;decAESKey,  std::string &amp;decAESIV): void</text><!--MD5=[8d9dfa2111def7a072c96e2c6573e692]
class CryptoRSA--><rect fill="#FEFECE" filter="url(#f1ni87s1if69li)" height="406.5313" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="932" x="2314" y="102"/><ellipse cx="2743.75" cy="118" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2746.7188,123.6406 Q2746.1406,123.9375 2745.5,124.0781 Q2744.8594,124.2344 2744.1563,124.2344 Q2741.6563,124.2344 2740.3281,122.5938 Q2739.0156,120.9375 2739.0156,117.8125 Q2739.0156,114.6875 2740.3281,113.0313 Q2741.6563,111.375 2744.1563,111.375 Q2744.8594,111.375 2745.5,111.5313 Q2746.1563,111.6875 2746.7188,111.9844 L2746.7188,114.7031 Q2746.0938,114.125 2745.5,113.8594 Q2744.9063,113.5781 2744.2813,113.5781 Q2742.9375,113.5781 2742.25,114.6563 Q2741.5625,115.7188 2741.5625,117.8125 Q2741.5625,119.9063 2742.25,120.9844 Q2742.9375,122.0469 2744.2813,122.0469 Q2744.9063,122.0469 2745.5,121.7813 Q2746.0938,121.5 2746.7188,120.9219 L2746.7188,123.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="2764.25" y="122.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2315" x2="3245" y1="134" y2="134"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2322" y="142"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="2334" y="148.2104">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2322" y="154.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="2334" y="161.0151">_keySize, _paddingSize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2322" y="167.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="2334" y="173.8198">_rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2322" y="180.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="2334" y="186.6245">_encryptedKey, _iv: unsigned char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2322" y="193.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="2334" y="199.4292">rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2315" x2="3245" y1="206.0234" y2="206.0234"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2322" y="214.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="174" x="2334" y="220.2339">getOpenSSLError(): std::string</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2322" y="226.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="2334" y="233.0386">generateRSAKey(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2322" y="239.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="2334" y="245.8433">loadKeyFromFile(const std::string &amp;filepath): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2322" y="252.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="2334" y="258.6479">loadKeyFromStr(const std::string &amp;str): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2338" y="271.4526"/><polygon fill="#FFFF44" points="2325,276.0469,2329,280.0469,2325,284.0469,2321,280.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="2334" y="284.2573">getPaddingSize() const: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2338" y="297.062"/><ellipse cx="2325" cy="306.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="2334" y="309.8667">CryptoRSA(int keySize)</text><ellipse cx="2325" cy="319.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="2334" y="322.6714">CryptoRSA(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2338" y="335.4761"/><ellipse cx="2325" cy="345.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2334" y="348.2808">getRSAIV() const: unsigned char*</text><ellipse cx="2325" cy="357.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="2334" y="361.0854">getRSAEncryptedKey() const: unsigned char*</text><ellipse cx="2325" cy="370.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2334" y="373.8901">getEvpPkey(): EVP_PKEY*</text><ellipse cx="2325" cy="383.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="2334" y="386.6948">getEvpPkeySize(EVP_PKEY *key): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2338" y="399.4995"/><ellipse cx="2325" cy="409.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2334" y="412.3042">getRSAPrivateKeyStr(): char*</text><ellipse cx="2325" cy="421.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2334" y="425.1089">getPrivateKeyStr(): char*</text><ellipse cx="2325" cy="434.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="2334" y="437.9136">getPublicKeyStr(): char*</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2338" y="450.7183"/><ellipse cx="2325" cy="460.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="2334" y="463.5229">encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): int</text><ellipse cx="2325" cy="473.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="906" x="2334" y="476.3276">decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): int</text><ellipse cx="2325" cy="485.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="623" x="2334" y="489.1323">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): int</text><ellipse cx="2325" cy="498.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="596" x="2334" y="501.937">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): int</text><!--MD5=[d753d1327a2a1fef8ecee416b36a81c3]
class RSAEncryptor--><rect fill="#FEFECE" filter="url(#f1ni87s1if69li)" height="201.6563" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="667" x="2100.5" y="570"/><ellipse cx="2387.75" cy="586" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2390.7188,591.6406 Q2390.1406,591.9375 2389.5,592.0781 Q2388.8594,592.2344 2388.1563,592.2344 Q2385.6563,592.2344 2384.3281,590.5938 Q2383.0156,588.9375 2383.0156,585.8125 Q2383.0156,582.6875 2384.3281,581.0313 Q2385.6563,579.375 2388.1563,579.375 Q2388.8594,579.375 2389.5,579.5313 Q2390.1563,579.6875 2390.7188,579.9844 L2390.7188,582.7031 Q2390.0938,582.125 2389.5,581.8594 Q2388.9063,581.5781 2388.2813,581.5781 Q2386.9375,581.5781 2386.25,582.6563 Q2385.5625,583.7188 2385.5625,585.8125 Q2385.5625,587.9063 2386.25,588.9844 Q2386.9375,590.0469 2388.2813,590.0469 Q2388.9063,590.0469 2389.5,589.7813 Q2390.0938,589.5 2390.7188,588.9219 L2390.7188,591.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="2408.25" y="590.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2101.5" x2="2766.5" y1="602" y2="602"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2108.5" y="610"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="2120.5" y="616.2104">_encryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2101.5" x2="2766.5" y1="622.8047" y2="622.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2108.5" y="630.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="2120.5" y="637.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2108.5" y="643.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="2120.5" y="649.8198">writeRSAFileToSystem(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2124.5" y="662.6245"/><ellipse cx="2111.5" cy="672.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="2120.5" y="675.4292">RSAEncryptor(int keySize)</text><ellipse cx="2111.5" cy="685.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="2120.5" y="688.2339">RSAEncryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2124.5" y="701.0386"/><ellipse cx="2111.5" cy="710.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2120.5" y="713.8433">getEncryptedMessage() const: std::string</text><ellipse cx="2111.5" cy="723.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="2120.5" y="726.6479">writeEncMSGToFile(const std::string &amp;filename, const std::string &amp;ciphertextMsg, int ciphertextMsgLength): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2124.5" y="739.4526"/><ellipse cx="2111.5" cy="749.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="2120.5" y="752.2573">encrypt(EVP_PKEY *pkey, const std::string &amp;decMSG): int</text><ellipse cx="2111.5" cy="761.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="346" x="2120.5" y="765.062">encryptEVP(EVP_PKEY *pkey, const std::string &amp;decMSG): int</text><!--MD5=[f330aa9c502bad81d8db271395aa19f1]
class RSADecryptor--><rect fill="#FEFECE" filter="url(#f1ni87s1if69li)" height="201.6563" id="RSADecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="657" x="2802.5" y="570"/><ellipse cx="3084.25" cy="586" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3087.2188,591.6406 Q3086.6406,591.9375 3086,592.0781 Q3085.3594,592.2344 3084.6563,592.2344 Q3082.1563,592.2344 3080.8281,590.5938 Q3079.5156,588.9375 3079.5156,585.8125 Q3079.5156,582.6875 3080.8281,581.0313 Q3082.1563,579.375 3084.6563,579.375 Q3085.3594,579.375 3086,579.5313 Q3086.6563,579.6875 3087.2188,579.9844 L3087.2188,582.7031 Q3086.5938,582.125 3086,581.8594 Q3085.4063,581.5781 3084.7813,581.5781 Q3083.4375,581.5781 3082.75,582.6563 Q3082.0625,583.7188 3082.0625,585.8125 Q3082.0625,587.9063 3082.75,588.9844 Q3083.4375,590.0469 3084.7813,590.0469 Q3085.4063,590.0469 3086,589.7813 Q3086.5938,589.5 3087.2188,588.9219 L3087.2188,591.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="3104.75" y="590.1543">RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2803.5" x2="3458.5" y1="602" y2="602"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2810.5" y="610"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="2822.5" y="616.2104">_decryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2803.5" x2="3458.5" y1="622.8047" y2="622.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2810.5" y="630.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="2822.5" y="637.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2810.5" y="643.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="587" x="2822.5" y="649.8198">readRSAFileFromSystem(const RSAKEY_TYPE &amp;rsakeysType, std::string &amp;encKey, std::string &amp;iv): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2826.5" y="662.6245"/><ellipse cx="2813.5" cy="672.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="2822.5" y="675.4292">RSADecryptor() = delete</text><ellipse cx="2813.5" cy="685.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="2822.5" y="688.2339">RSADecryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2826.5" y="701.0386"/><ellipse cx="2813.5" cy="710.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="2822.5" y="713.8433">getDecryptedMessage() const: std::string</text><ellipse cx="2813.5" cy="723.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="345" x="2822.5" y="726.6479">readEncMSGFromFile(const std::string &amp;filepath): std::string</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2826.5" y="739.4526"/><ellipse cx="2813.5" cy="749.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="2822.5" y="752.2573">decrypt(EVP_PKEY *pkey, const std::string &amp;encMSG): int</text><ellipse cx="2813.5" cy="761.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="631" x="2822.5" y="765.062">decryptEVP(EVP_PKEY *pkey, const std::string &amp;encMSG, std::string &amp;decMSG, const RSAKEY_TYPE &amp;type): int</text><!--MD5=[eb359e5886597e786b161bf30047c798]
class CryptoAES--><rect fill="#FEFECE" filter="url(#f1ni87s1if69li)" height="355.3125" id="CryptoAES" style="stroke: #A80036; stroke-width: 1.5;" width="581" x="119.5" y="128"/><ellipse cx="373.75" cy="144" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M376.7188,149.6406 Q376.1406,149.9375 375.5,150.0781 Q374.8594,150.2344 374.1563,150.2344 Q371.6563,150.2344 370.3281,148.5938 Q369.0156,146.9375 369.0156,143.8125 Q369.0156,140.6875 370.3281,139.0313 Q371.6563,137.375 374.1563,137.375 Q374.8594,137.375 375.5,137.5313 Q376.1563,137.6875 376.7188,137.9844 L376.7188,140.7031 Q376.0938,140.125 375.5,139.8594 Q374.9063,139.5781 374.2813,139.5781 Q372.9375,139.5781 372.25,140.6563 Q371.5625,141.7188 371.5625,143.8125 Q371.5625,145.9063 372.25,146.9844 Q372.9375,148.0469 374.2813,148.0469 Q374.9063,148.0469 375.5,147.7813 Q376.0938,147.5 376.7188,146.9219 L376.7188,149.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="394.25" y="148.1543">CryptoAES</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="120.5" x2="699.5" y1="160" y2="160"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="127.5" y="168"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="139.5" y="174.2104">_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="127.5" y="180.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="139.5" y="187.0151">_aesKeyLength, _aesIvLength, _aesSaltLength: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="143.5" y="199.8198"/><polygon fill="none" points="130.5,204.4141,134.5,208.4141,130.5,212.4141,126.5,208.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="174" x="139.5" y="212.6245">aesKey, aesIv: unsigned char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="120.5" x2="699.5" y1="219.2188" y2="219.2188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="127.5" y="227.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="174" x="139.5" y="233.4292">getOpenSSLError(): std::string</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="143.5" y="246.2339"/><ellipse cx="130.5" cy="255.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="139.5" y="259.0386">CryptoAES()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="143.5" y="271.8433"/><ellipse cx="130.5" cy="281.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="102" x="139.5" y="284.6479">isInitialized(): bool</text><ellipse cx="130.5" cy="294.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="139.5" y="297.4526">generateAESKey() const: bool</text><ellipse cx="130.5" cy="307.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="139.5" y="310.2573">generateAESKeyWithSalt() const: bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="143.5" y="323.062"/><ellipse cx="130.5" cy="332.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="139.5" y="335.8667">setAESKey(std::string &amp;aesKey): void</text><ellipse cx="130.5" cy="345.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="139.5" y="348.6714">setAESIv(std::string &amp;aesIv): void</text><ellipse cx="130.5" cy="358.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="139.5" y="361.4761">getAESKey() const: std::string</text><ellipse cx="130.5" cy="371.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="139.5" y="374.2808">getAESIv() const: std::string</text><ellipse cx="130.5" cy="383.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="139.5" y="387.0854">getAESKeyPair() const: std::string</text><ellipse cx="130.5" cy="396.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="139.5" y="399.8901">getAESKeyLength() const: int</text><ellipse cx="130.5" cy="409.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="139.5" y="412.6948">getAESIVLength() const: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="143.5" y="425.4995"/><ellipse cx="130.5" cy="435.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="555" x="139.5" y="438.3042">encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t</text><ellipse cx="130.5" cy="447.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="528" x="139.5" y="451.1089">decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t</text><ellipse cx="130.5" cy="460.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="139.5" y="463.9136">encrypt(std::ifstream &amp;fin, std::ofstream &amp;fout): size_t</text><ellipse cx="130.5" cy="473.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="139.5" y="476.7183">decrypt(std::ifstream &amp;fin, std::ofstream &amp;fout): size_t</text><!--MD5=[1bab4e8cf321706813c8f1e8f3b1e9d2]
class AESEncryptor--><rect fill="#FEFECE" filter="url(#f1ni87s1if69li)" height="99.2188" id="AESEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="319" x="62.5" y="621.5"/><ellipse cx="175.75" cy="637.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M178.7188,643.1406 Q178.1406,643.4375 177.5,643.5781 Q176.8594,643.7344 176.1563,643.7344 Q173.6563,643.7344 172.3281,642.0938 Q171.0156,640.4375 171.0156,637.3125 Q171.0156,634.1875 172.3281,632.5313 Q173.6563,630.875 176.1563,630.875 Q176.8594,630.875 177.5,631.0313 Q178.1563,631.1875 178.7188,631.4844 L178.7188,634.2031 Q178.0938,633.625 177.5,633.3594 Q176.9063,633.0781 176.2813,633.0781 Q174.9375,633.0781 174.25,634.1563 Q173.5625,635.2188 173.5625,637.3125 Q173.5625,639.4063 174.25,640.4844 Q174.9375,641.5469 176.2813,641.5469 Q176.9063,641.5469 177.5,641.2813 Q178.0938,641 178.7188,640.4219 L178.7188,643.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="196.25" y="641.6543">AESEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="63.5" x2="380.5" y1="653.5" y2="653.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="63.5" x2="380.5" y1="661.5" y2="661.5"/><ellipse cx="73.5" cy="672.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="82.5" y="675.7104">AESEncryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="86.5" y="688.5151"/><ellipse cx="73.5" cy="698.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="82.5" y="701.3198">encryptFile(const std::string &amp;filename): void</text><ellipse cx="73.5" cy="710.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="82.5" y="714.1245">encryptLargeFile (const std::string &amp;filename): void</text><!--MD5=[f30a1405ec0c95f44855039949e6746e]
class AESDecryptor--><rect fill="#FEFECE" filter="url(#f1ni87s1if69li)" height="99.2188" id="AESDecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="342" x="417" y="621.5"/><ellipse cx="541.25" cy="637.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M544.2188,643.1406 Q543.6406,643.4375 543,643.5781 Q542.3594,643.7344 541.6563,643.7344 Q539.1563,643.7344 537.8281,642.0938 Q536.5156,640.4375 536.5156,637.3125 Q536.5156,634.1875 537.8281,632.5313 Q539.1563,630.875 541.6563,630.875 Q542.3594,630.875 543,631.0313 Q543.6563,631.1875 544.2188,631.4844 L544.2188,634.2031 Q543.5938,633.625 543,633.3594 Q542.4063,633.0781 541.7813,633.0781 Q540.4375,633.0781 539.75,634.1563 Q539.0625,635.2188 539.0625,637.3125 Q539.0625,639.4063 539.75,640.4844 Q540.4375,641.5469 541.7813,641.5469 Q542.4063,641.5469 543,641.2813 Q543.5938,641 544.2188,640.4219 L544.2188,643.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="561.75" y="641.6543">AESDecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="418" x2="758" y1="653.5" y2="653.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="418" x2="758" y1="661.5" y2="661.5"/><ellipse cx="428" cy="672.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="437" y="675.7104">AESDecryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="441" y="688.5151"/><ellipse cx="428" cy="698.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="437" y="701.3198">decryptFile(const std::string &amp;bflyFileName): void</text><ellipse cx="428" cy="710.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="437" y="714.1245">decryptLargeFile (const std::string &amp;bflyFileName): void</text><!--MD5=[137afd6d0173c42694efae0db5e21a8c]
reverse link CryptoRSA to RSAEncryptor--><path d="M2573.04,523.93 C2557.9,539.83 2543.13,555.35 2529.21,569.97 " fill="none" id="CryptoRSA&lt;-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2568.16,518.9,2587.02,509.24,2578.3,528.55,2568.16,518.9" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[df32503cb49fc0909b2d86fbd32385e9]
reverse link CryptoAES to AESEncryptor--><path d="M309.38,501.04 C286.24,545.79 263.63,589.5 247.22,621.25 " fill="none" id="CryptoAES&lt;-AESEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="303.21,497.74,318.62,483.19,315.65,504.17,303.21,497.74" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[da09116253ffa8d0ebc045e43eafac49]
reverse link CryptoThread to Encryptor--><path d="M1470.73,749.26 C1409.25,780.87 1337.55,817.74 1273.12,850.86 " fill="none" id="CryptoThread&lt;-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1467.64,742.98,1488.63,740.06,1474.04,755.43,1467.64,742.98" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9c311359150372b518fa0602364dfebd]
reverse link CryptoSecurity to Encryptor--><path d="M1091.7,754.14 C1091.59,784.61 1091.46,819.39 1091.34,850.8 " fill="none" id="CryptoSecurity&lt;-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1084.7,753.81,1091.77,733.83,1098.7,753.86,1084.7,753.81" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[48ba36412de84f8a3aa925712ba2875d]
reverse link RSAEncryptor to Encryptor--><path d="M2152.16,775.51 C2121.71,783.74 2090.92,790.85 2061,796 C1973.82,811.01 1751.08,795.74 1663,804 C1537.8,815.74 1506.21,821.37 1384,851 C1378.29,852.38 1372.53,853.82 1366.74,855.31 " fill="none" id="RSAEncryptor&lt;-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2164.73,772.05,2157.8846,769.7828,2153.1589,775.2297,2160.0044,777.4969,2164.73,772.05" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="116" x="1664" y="817.0669">«encrypting keys»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="2121.9884" y="791.7661">1..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="1374.1706" y="849.7857">1</text><!--MD5=[01d906c2b651a9e3654fa98e059b7922]
reverse link AESEncryptor to Encryptor--><path d="M289.49,728.55 C321.26,752.58 360.75,778.94 400,796 C530.96,852.93 685.65,888.79 815.43,910.97 " fill="none" id="AESEncryptor&lt;-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="279.02,720.51,281.3451,727.336,288.5403,727.8151,286.2152,720.9891,279.02,720.51" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="112" x="453" y="817.0669">«encrypting files»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="262.7058" y="740.9439">1..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="799.1303" y="906.7933">1</text><!--MD5=[7bcf5c2aff3c7f26be14b7b093d51c6e]
reverse link CryptoRSA to RSADecryptor--><path d="M2989.96,523.93 C3005.31,539.83 3020.29,555.35 3034.41,569.97 " fill="none" id="CryptoRSA&lt;-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2984.63,528.49,2975.77,509.24,2994.7,518.77,2984.63,528.49" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[cebc2a8dc5e16f51f4a96f51329200ff]
reverse link CryptoAES to AESDecryptor--><path d="M505.41,501.34 C527.27,545.98 548.61,589.57 564.13,621.25 " fill="none" id="CryptoAES&lt;-AESDecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="499.03,504.23,496.52,483.19,511.61,498.08,499.03,504.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5b3184d42af8988dbf7f71809d1a2955]
reverse link CryptoThread to Decryptor--><path d="M1614.84,760.13 C1615.89,780.59 1619.05,801.94 1626,821 C1629.74,831.25 1634.67,841.3 1640.34,850.99 " fill="none" id="CryptoThread&lt;-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1607.84,760.22,1614.45,740.09,1621.84,759.94,1607.84,760.22" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2de51c8df44da492eb59e9928058e3ac]
reverse link CryptoSecurity to Decryptor--><path d="M1253.47,741.73 C1330.37,774.94 1423.46,815.14 1506.4,850.96 " fill="none" id="CryptoSecurity&lt;-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1250.38,748.02,1234.79,733.66,1255.93,735.17,1250.38,748.02" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[619a48bb39d0270cb72b1efab703cdc2]
reverse link RSADecryptor to Decryptor--><path d="M2857.03,775.93 C2832.86,783.35 2808.61,790.18 2785,796 C2540.06,856.34 2256.89,894.4 2044.58,916.87 " fill="none" id="RSADecryptor&lt;-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2869.66,772.01,2862.7434,769.9704,2858.2004,775.5705,2865.117,777.6101,2869.66,772.01" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="116" x="2729" y="817.0669">«decrypting keys»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="2827.4759" y="791.7233">1..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="2052.2108" y="913.0934">1</text><!--MD5=[7a99fc0aa39fcb1ea225c041c43a5a70]
reverse link AESDecryptor to Decryptor--><path d="M664.38,727.9 C702.85,753.1 751.35,780.6 799,796 C1047.5,876.29 1127.14,803.88 1384,851 C1389.7,852.05 1395.45,853.14 1401.23,854.29 " fill="none" id="AESDecryptor&lt;-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="653.29,720.52,656.0716,727.173,663.2827,727.1642,660.5011,720.5112,653.29,720.52" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="112" x="882" y="817.0669">«decrypting files»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="638.1904" y="740.9554">1..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="1385.5948" y="849.0467">1</text><!--MD5=[31acd03088b200ff451ab47d774cee3e]
@startuml



package butterfly #AAAAAA
{

package hybrid #DDDDDD
{

class CryptoThread
{
    - _threads: std::vector<std::thread>
    - handleLargeFilesWithAES(const std::string &filepath) = 0: void

    + CryptoThread()

    + create(const std::string &filepath): void
    + jonThreads(): void

}

}

}


package butterfly #AAAAAA
{

package hybrid #DDDDDD
{

class CryptoSecurity
{

    + CryptoSecurity()

    + {static} saveUnencryptedAESKeyPair(const std::string &aesKeyPair): void
    + {static} areEncryptionFilesAvailable(): bool
    + {static} removeDecryptedFiles(): void
    + {static} getAESKeyPairFromUnencryptedFile(std::string &aesKeyPair): bool
}

}

}



package butterfly #AAAAAA
{

package rsa #DDDDDD
{

class CryptoRSA
{
    - _pkey: EVP_PKEY*
    - _keySize, _paddingSize: int
    - _rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*
    - _encryptedKey, _iv: unsigned char*
    - rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*

    - {static} getOpenSSLError(): std::string
    - generateRSAKey(): bool
    - loadKeyFromFile(const std::string &filepath): void
    - loadKeyFromStr(const std::string &str): void

    # getPaddingSize() const: int

    + CryptoRSA(int keySize)
    + CryptoRSA(const std::string &key)

    + getRSAIV() const: unsigned char*
    + getRSAEncryptedKey() const: unsigned char*
    + getEvpPkey(): EVP_PKEY*
    + getEvpPkeySize(EVP_PKEY *key): int

    + getRSAPrivateKeyStr(): char*
    + getPrivateKeyStr(): char*
    + getPublicKeyStr(): char*

    + encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): int
    + decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): int
    + {static} encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): int
    + {static} decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): int
}

}

}

package butterfly #AAAAAA
{

package rsa #DDDDDD
{

class RSAEncryptor
{
    - _encryptedMessage: std::string

    - validateStringLengthForRSA(const std::string &msg, const int &keysize): bool
    - writeRSAFileToSystem(): bool

    + RSAEncryptor(int keySize)
    + RSAEncryptor(const std::string &key)

    + getEncryptedMessage() const: std::string
    + writeEncMSGToFile(const std::string &filename, const std::string &ciphertextMsg, int ciphertextMsgLength): void

    + encrypt(EVP_PKEY *pkey, const std::string &decMSG): int
    + encryptEVP(EVP_PKEY *pkey, const std::string &decMSG): int
}

CryptoRSA <|- - RSAEncryptor

}

}


package butterfly #AAAAAA
{

package aes #DDDDDD
{

class CryptoAES
{
    - _aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*
    - _aesKeyLength, _aesIvLength, _aesSaltLength: int

    # {static} aesKey, aesIv: unsigned char*

    - {static} getOpenSSLError(): std::string

    + CryptoAES()

    + {static} isInitialized(): bool
    + generateAESKey() const: bool
    + generateAESKeyWithSalt() const: bool

    + setAESKey(std::string &aesKey): void
    + setAESIv(std::string &aesIv): void
    + getAESKey() const: std::string
    + getAESIv() const: std::string
    + getAESKeyPair() const: std::string
    + getAESKeyLength() const: int
    + getAESIVLength() const: int

    + encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t
    + decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t
    + encrypt(std::ifstream &fin, std::ofstream &fout): size_t
    + decrypt(std::ifstream &fin, std::ofstream &fout): size_t
}

}

}


package butterfly #AAAAAA
{

package aes #DDDDDD
{

class AESEncryptor
{
    + AESEncryptor()

    + encryptFile(const std::string &filename): void
    + encryptLargeFile (const std::string &filename): void
}

CryptoAES <|- - AESEncryptor

}

}

package butterfly #AAAAAA
{

package hybrid #DDDDDD
{

class Encryptor
{
    - _keySize: int

    - _rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: std::unique_ptr<rsa::RSAEncryptor>
    - _aesEncryptor: std::unique_ptr<aes::AESEncryptor>

    + Encryptor(int keySize = 2048)

    + invokeDir(const std::string &dirPath, bool protection): void
    + encryptCPrivateRSA(): void
    + encryptFileWithAES(const std::string &filepath): void
    + encryptLargeFilesWithAES(const std::string &filepath): void
    + encryptFinalAESKeyWithRSA(const std::string &aesKeyStr, const std::string &filename): void
}

CryptoThread   <|- - Encryptor
CryptoSecurity <|- - Encryptor

RSAEncryptor "1..*" o- - "1" Encryptor: <<encrypting keys>>
AESEncryptor "1..*" o- - "1" Encryptor: <<encrypting files>>

}

}




package butterfly #AAAAAA
{

package rsa #DDDDDD
{

class RSADecryptor
{
    - _decryptedMessage: std::string

    - validateStringLengthForRSA(const std::string &msg, const int &keysize): bool
    - readRSAFileFromSystem(const RSAKEY_TYPE &rsakeysType, std::string &encKey, std::string &iv): void

    + RSADecryptor() = delete
    + RSADecryptor(const std::string &key)

    + getDecryptedMessage() const: std::string
    + {static} readEncMSGFromFile(const std::string &filepath): std::string

    + decrypt(EVP_PKEY *pkey, const std::string &encMSG): int
    + decryptEVP(EVP_PKEY *pkey, const std::string &encMSG, std::string &decMSG, const RSAKEY_TYPE &type): int
}

CryptoRSA <|- - RSADecryptor

}

}



package butterfly #AAAAAA
{

package aes #DDDDDD
{

class AESDecryptor
{
    + AESDecryptor()

    + decryptFile(const std::string &bflyFileName): void
    + decryptLargeFile (const std::string &bflyFileName): void
}

CryptoAES <|- - AESDecryptor

}

}


package butterfly #AAAAAA
{

package hybrid #DDDDDD
{

class Decryptor
{
    - _decryptedCPrivateRSA: std::string

    - _rsaDecryptorCPrivateRSA, _rsaDecryptorAESKey: std::unique_ptr<rsa::RSADecryptor>
    - _aesDecryptor: std::unique_ptr<aes::AESDecryptor>

    + Decryptor(const std::string &decryptedCPrivateRSA)
    + Decryptor(const std::string &privateKeyFromServer, const std::string &encCPrivateRSAFile)

    + invokeDir(const std::string &dirPath): void
    + decryptFileWithAES(const std::string &filepath): void
    + handleLargeFilesWithAES(const std::string &filepath): void
    + decryptAESKeyPair(const std::string &filepathAESKey, std::string &decAESKey,  std::string &decAESIV): void
}

CryptoThread   <|- - Decryptor
CryptoSecurity <|- - Decryptor

RSADecryptor "1..*" o- - "1" Decryptor: <<decrypting keys>>
AESDecryptor "1..*" o- - "1" Decryptor: <<decrypting files>>

}

}


@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.21+9-post-Ubuntu-0ubuntu122.04
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>