<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1092px" preserveAspectRatio="none" style="width:2569px;height:1092px;" version="1.1" viewBox="0 0 2569 1092" width="2569px" zoomAndPan="magnify"><defs><filter height="300%" id="f1phv6v2o6vfn7" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[8e789fa2d79d87af7a89a0214c555b42]
cluster butterfly--><polygon fill="#AAAAAA" filter="url(#f1phv6v2o6vfn7)" points="22,24,96,24,103,46.2969,2547,46.2969,2547,1080,22,1080,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--MD5=[c85b91184774f21f9fb19ef777095c59]
cluster hybrid--><polygon fill="#DDDDDD" filter="url(#f1phv6v2o6vfn7)" points="684,567,740,567,747,589.2969,1535,589.2969,1535,1056,684,1056,684,567" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="684" x2="747" y1="589.2969" y2="589.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="50" x="688" y="581.9951">hybrid</text><!--MD5=[2ecd8032ccbc79e7fc0a9e1475a4a439]
cluster rsa--><polygon fill="#DDDDDD" filter="url(#f1phv6v2o6vfn7)" points="1559,67,1590,67,1597,89.2969,2523,89.2969,2523,788,1559,788,1559,67" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1559" x2="1597" y1="89.2969" y2="89.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="1563" y="81.9951">rsa</text><!--MD5=[2316bb41a6150af629e39d956b089817]
cluster aes--><polygon fill="#DDDDDD" filter="url(#f1phv6v2o6vfn7)" points="46,93,80,93,87,115.2969,660,115.2969,660,736.5,46,736.5,46,93" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="46" x2="87" y1="115.2969" y2="115.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="28" x="50" y="107.9951">aes</text><!--MD5=[0ceb135fd6b0c2b102e82ffe4bb2652f]
class CryptoThread--><rect fill="#FEFECE" filter="url(#f1phv6v2o6vfn7)" height="137.6328" id="CryptoThread" style="stroke: #A80036; stroke-width: 1.5;" width="380" x="1139" y="602"/><ellipse cx="1282.75" cy="618" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1285.7188,623.6406 Q1285.1406,623.9375 1284.5,624.0781 Q1283.8594,624.2344 1283.1563,624.2344 Q1280.6563,624.2344 1279.3281,622.5938 Q1278.0156,620.9375 1278.0156,617.8125 Q1278.0156,614.6875 1279.3281,613.0313 Q1280.6563,611.375 1283.1563,611.375 Q1283.8594,611.375 1284.5,611.5313 Q1285.1563,611.6875 1285.7188,611.9844 L1285.7188,614.7031 Q1285.0938,614.125 1284.5,613.8594 Q1283.9063,613.5781 1283.2813,613.5781 Q1281.9375,613.5781 1281.25,614.6563 Q1280.5625,615.7188 1280.5625,617.8125 Q1280.5625,619.9063 1281.25,620.9844 Q1281.9375,622.0469 1283.2813,622.0469 Q1283.9063,622.0469 1284.5,621.7813 Q1285.0938,621.5 1285.7188,620.9219 L1285.7188,623.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="1303.25" y="622.1543">CryptoThread</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1140" x2="1518" y1="634" y2="634"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1147" y="642"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="1159" y="648.2104">_threads: std::vector&lt;std::thread&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1140" x2="1518" y1="654.8047" y2="654.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1147" y="662.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="1159" y="669.0151">handleLargeFilesWithAES(const std::string &amp;filepath) = 0: void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1163" y="681.8198"/><ellipse cx="1150" cy="691.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1159" y="694.6245">CryptoThread()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1163" y="707.4292"/><ellipse cx="1150" cy="717.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="1159" y="720.2339">create(const std::string &amp;filepath): void</text><ellipse cx="1150" cy="729.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1159" y="733.0386">jonThreads(): void</text><!--MD5=[d3b405991237fdfd6a1d7536c9b0ae84]
class CryptoSecurity--><rect fill="#FEFECE" filter="url(#f1phv6v2o6vfn7)" height="124.8281" id="CryptoSecurity" style="stroke: #A80036; stroke-width: 1.5;" width="403" x="700.5" y="608.5"/><ellipse cx="852.75" cy="624.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M855.7188,630.1406 Q855.1406,630.4375 854.5,630.5781 Q853.8594,630.7344 853.1563,630.7344 Q850.6563,630.7344 849.3281,629.0938 Q848.0156,627.4375 848.0156,624.3125 Q848.0156,621.1875 849.3281,619.5313 Q850.6563,617.875 853.1563,617.875 Q853.8594,617.875 854.5,618.0313 Q855.1563,618.1875 855.7188,618.4844 L855.7188,621.2031 Q855.0938,620.625 854.5,620.3594 Q853.9063,620.0781 853.2813,620.0781 Q851.9375,620.0781 851.25,621.1563 Q850.5625,622.2188 850.5625,624.3125 Q850.5625,626.4063 851.25,627.4844 Q851.9375,628.5469 853.2813,628.5469 Q853.9063,628.5469 854.5,628.2813 Q855.0938,628 855.7188,627.4219 L855.7188,630.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="90" x="873.25" y="628.6543">CryptoSecurity</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="701.5" x2="1102.5" y1="640.5" y2="640.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="701.5" x2="1102.5" y1="648.5" y2="648.5"/><ellipse cx="711.5" cy="659.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="720.5" y="662.7104">CryptoSecurity()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="724.5" y="675.5151"/><ellipse cx="711.5" cy="685.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="372" x="720.5" y="688.3198">saveUnencryptedAESKeyPair(const std::string &amp;aesKeyPair): void</text><ellipse cx="711.5" cy="697.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="194" x="720.5" y="701.1245">areEncryptionFilesAvailable(): bool</text><ellipse cx="711.5" cy="710.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="165" x="720.5" y="713.9292">removeDecryptedFiles(): void</text><ellipse cx="711.5" cy="723.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="377" x="720.5" y="726.7339">getAESKeyPairFromUnencryptedFile(std::string &amp;aesKeyPair): bool</text><!--MD5=[b2f9fd5e50dd999be3fbf662fc19368c]
class Encryptor--><rect fill="#FEFECE" filter="url(#f1phv6v2o6vfn7)" height="188.8516" id="Encryptor" style="stroke: #A80036; stroke-width: 1.5;" width="551" x="833.5" y="851"/><ellipse cx="1074.75" cy="867" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1077.7188,872.6406 Q1077.1406,872.9375 1076.5,873.0781 Q1075.8594,873.2344 1075.1563,873.2344 Q1072.6563,873.2344 1071.3281,871.5938 Q1070.0156,869.9375 1070.0156,866.8125 Q1070.0156,863.6875 1071.3281,862.0313 Q1072.6563,860.375 1075.1563,860.375 Q1075.8594,860.375 1076.5,860.5313 Q1077.1563,860.6875 1077.7188,860.9844 L1077.7188,863.7031 Q1077.0938,863.125 1076.5,862.8594 Q1075.9063,862.5781 1075.2813,862.5781 Q1073.9375,862.5781 1073.25,863.6563 Q1072.5625,864.7188 1072.5625,866.8125 Q1072.5625,868.9063 1073.25,869.9844 Q1073.9375,871.0469 1075.2813,871.0469 Q1075.9063,871.0469 1076.5,870.7813 Q1077.0938,870.5 1077.7188,869.9219 L1077.7188,872.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="1095.25" y="871.1543">Encryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="834.5" x2="1383.5" y1="883" y2="883"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="841.5" y="891"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="853.5" y="897.2104">_keySize: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="857.5" y="910.0151"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="841.5" y="916.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="492" x="853.5" y="922.8198">_rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: std::unique_ptr&lt;rsa::RSAEncryptor&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="841.5" y="929.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="853.5" y="935.6245">_aesEncryptor: std::unique_ptr&lt;aes::AESEncryptor&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="834.5" x2="1383.5" y1="942.2188" y2="942.2188"/><ellipse cx="844.5" cy="953.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="853.5" y="956.4292">Encryptor(int keySize = 2048)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="857.5" y="969.2339"/><ellipse cx="844.5" cy="978.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="853.5" y="982.0386">invokeDir(const std::string &amp;dirPath, bool protection): void</text><ellipse cx="844.5" cy="991.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="853.5" y="994.8433">encryptCPrivateRSA(): void</text><ellipse cx="844.5" cy="1004.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="853.5" y="1007.6479">encryptFileWithAES(const std::string &amp;filepath): void</text><ellipse cx="844.5" cy="1017.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="853.5" y="1020.4526">encryptLargeFilesWithAES(const std::string &amp;filepath): void</text><ellipse cx="844.5" cy="1030.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="525" x="853.5" y="1033.2573">encryptFinalAESKeyWithRSA(const std::string &amp;aesKeyStr, const std::string &amp;filename): void</text><!--MD5=[8d9dfa2111def7a072c96e2c6573e692]
class CryptoRSA--><rect fill="#FEFECE" filter="url(#f1phv6v2o6vfn7)" height="406.5313" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="932" x="1575" y="102"/><ellipse cx="2004.75" cy="118" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2007.7188,123.6406 Q2007.1406,123.9375 2006.5,124.0781 Q2005.8594,124.2344 2005.1563,124.2344 Q2002.6563,124.2344 2001.3281,122.5938 Q2000.0156,120.9375 2000.0156,117.8125 Q2000.0156,114.6875 2001.3281,113.0313 Q2002.6563,111.375 2005.1563,111.375 Q2005.8594,111.375 2006.5,111.5313 Q2007.1563,111.6875 2007.7188,111.9844 L2007.7188,114.7031 Q2007.0938,114.125 2006.5,113.8594 Q2005.9063,113.5781 2005.2813,113.5781 Q2003.9375,113.5781 2003.25,114.6563 Q2002.5625,115.7188 2002.5625,117.8125 Q2002.5625,119.9063 2003.25,120.9844 Q2003.9375,122.0469 2005.2813,122.0469 Q2005.9063,122.0469 2006.5,121.7813 Q2007.0938,121.5 2007.7188,120.9219 L2007.7188,123.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="2025.25" y="122.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1576" x2="2506" y1="134" y2="134"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1583" y="142"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="1595" y="148.2104">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1583" y="154.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="1595" y="161.0151">_keySize, _paddingSize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1583" y="167.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="1595" y="173.8198">_rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1583" y="180.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="1595" y="186.6245">_encryptedKey, _iv: unsigned char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1583" y="193.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="1595" y="199.4292">rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1576" x2="2506" y1="206.0234" y2="206.0234"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1583" y="214.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="174" x="1595" y="220.2339">getOpenSSLError(): std::string</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1583" y="226.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1595" y="233.0386">generateRSAKey(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1583" y="239.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="1595" y="245.8433">loadKeyFromFile(const std::string &amp;filepath): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1583" y="252.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="1595" y="258.6479">loadKeyFromStr(const std::string &amp;str): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1599" y="271.4526"/><polygon fill="#FFFF44" points="1586,276.0469,1590,280.0469,1586,284.0469,1582,280.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="1595" y="284.2573">getPaddingSize() const: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1599" y="297.062"/><ellipse cx="1586" cy="306.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="1595" y="309.8667">CryptoRSA(int keySize)</text><ellipse cx="1586" cy="319.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1595" y="322.6714">CryptoRSA(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1599" y="335.4761"/><ellipse cx="1586" cy="345.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="1595" y="348.2808">getRSAIV() const: unsigned char*</text><ellipse cx="1586" cy="357.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="1595" y="361.0854">getRSAEncryptedKey() const: unsigned char*</text><ellipse cx="1586" cy="370.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1595" y="373.8901">getEvpPkey(): EVP_PKEY*</text><ellipse cx="1586" cy="383.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="1595" y="386.6948">getEvpPkeySize(EVP_PKEY *key): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1599" y="399.4995"/><ellipse cx="1586" cy="409.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="1595" y="412.3042">getRSAPrivateKeyStr(): char*</text><ellipse cx="1586" cy="421.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1595" y="425.1089">getPrivateKeyStr(): char*</text><ellipse cx="1586" cy="434.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1595" y="437.9136">getPublicKeyStr(): char*</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1599" y="450.7183"/><ellipse cx="1586" cy="460.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="1595" y="463.5229">encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): int</text><ellipse cx="1586" cy="473.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="906" x="1595" y="476.3276">decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): int</text><ellipse cx="1586" cy="485.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="623" x="1595" y="489.1323">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): int</text><ellipse cx="1586" cy="498.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="596" x="1595" y="501.937">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): int</text><!--MD5=[d753d1327a2a1fef8ecee416b36a81c3]
class RSAEncryptor--><rect fill="#FEFECE" filter="url(#f1phv6v2o6vfn7)" height="201.6563" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="667" x="1640.5" y="570"/><ellipse cx="1927.75" cy="586" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1930.7188,591.6406 Q1930.1406,591.9375 1929.5,592.0781 Q1928.8594,592.2344 1928.1563,592.2344 Q1925.6563,592.2344 1924.3281,590.5938 Q1923.0156,588.9375 1923.0156,585.8125 Q1923.0156,582.6875 1924.3281,581.0313 Q1925.6563,579.375 1928.1563,579.375 Q1928.8594,579.375 1929.5,579.5313 Q1930.1563,579.6875 1930.7188,579.9844 L1930.7188,582.7031 Q1930.0938,582.125 1929.5,581.8594 Q1928.9063,581.5781 1928.2813,581.5781 Q1926.9375,581.5781 1926.25,582.6563 Q1925.5625,583.7188 1925.5625,585.8125 Q1925.5625,587.9063 1926.25,588.9844 Q1926.9375,590.0469 1928.2813,590.0469 Q1928.9063,590.0469 1929.5,589.7813 Q1930.0938,589.5 1930.7188,588.9219 L1930.7188,591.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="1948.25" y="590.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1641.5" x2="2306.5" y1="602" y2="602"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1648.5" y="610"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="1660.5" y="616.2104">_encryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1641.5" x2="2306.5" y1="622.8047" y2="622.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1648.5" y="630.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="1660.5" y="637.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1648.5" y="643.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1660.5" y="649.8198">writeRSAFileToSystem(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1664.5" y="662.6245"/><ellipse cx="1651.5" cy="672.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="1660.5" y="675.4292">RSAEncryptor(int keySize)</text><ellipse cx="1651.5" cy="685.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="1660.5" y="688.2339">RSAEncryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1664.5" y="701.0386"/><ellipse cx="1651.5" cy="710.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="1660.5" y="713.8433">getEncryptedMessage() const: std::string</text><ellipse cx="1651.5" cy="723.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="1660.5" y="726.6479">writeEncMSGToFile(const std::string &amp;filename, const std::string &amp;ciphertextMsg, int ciphertextMsgLength): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1664.5" y="739.4526"/><ellipse cx="1651.5" cy="749.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="1660.5" y="752.2573">encrypt(EVP_PKEY *pkey, const std::string &amp;decMSG): int</text><ellipse cx="1651.5" cy="761.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="346" x="1660.5" y="765.062">encryptEVP(EVP_PKEY *pkey, const std::string &amp;decMSG): int</text><!--MD5=[eb359e5886597e786b161bf30047c798]
class CryptoAES--><rect fill="#FEFECE" filter="url(#f1phv6v2o6vfn7)" height="355.3125" id="CryptoAES" style="stroke: #A80036; stroke-width: 1.5;" width="581" x="62.5" y="128"/><ellipse cx="316.75" cy="144" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M319.7188,149.6406 Q319.1406,149.9375 318.5,150.0781 Q317.8594,150.2344 317.1563,150.2344 Q314.6563,150.2344 313.3281,148.5938 Q312.0156,146.9375 312.0156,143.8125 Q312.0156,140.6875 313.3281,139.0313 Q314.6563,137.375 317.1563,137.375 Q317.8594,137.375 318.5,137.5313 Q319.1563,137.6875 319.7188,137.9844 L319.7188,140.7031 Q319.0938,140.125 318.5,139.8594 Q317.9063,139.5781 317.2813,139.5781 Q315.9375,139.5781 315.25,140.6563 Q314.5625,141.7188 314.5625,143.8125 Q314.5625,145.9063 315.25,146.9844 Q315.9375,148.0469 317.2813,148.0469 Q317.9063,148.0469 318.5,147.7813 Q319.0938,147.5 319.7188,146.9219 L319.7188,149.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="337.25" y="148.1543">CryptoAES</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="63.5" x2="642.5" y1="160" y2="160"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="70.5" y="168"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="82.5" y="174.2104">_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="70.5" y="180.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="82.5" y="187.0151">_aesKeyLength, _aesIvLength, _aesSaltLength: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="86.5" y="199.8198"/><polygon fill="none" points="73.5,204.4141,77.5,208.4141,73.5,212.4141,69.5,208.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="174" x="82.5" y="212.6245">aesKey, aesIv: unsigned char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="63.5" x2="642.5" y1="219.2188" y2="219.2188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="70.5" y="227.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="174" x="82.5" y="233.4292">getOpenSSLError(): std::string</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="86.5" y="246.2339"/><ellipse cx="73.5" cy="255.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="82.5" y="259.0386">CryptoAES()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="86.5" y="271.8433"/><ellipse cx="73.5" cy="281.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="102" x="82.5" y="284.6479">isInitialized(): bool</text><ellipse cx="73.5" cy="294.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="82.5" y="297.4526">generateAESKey() const: bool</text><ellipse cx="73.5" cy="307.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="82.5" y="310.2573">generateAESKeyWithSalt() const: bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="86.5" y="323.062"/><ellipse cx="73.5" cy="332.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="82.5" y="335.8667">setAESKey(std::string &amp;aesKey): void</text><ellipse cx="73.5" cy="345.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="82.5" y="348.6714">setAESIv(std::string &amp;aesIv): void</text><ellipse cx="73.5" cy="358.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="82.5" y="361.4761">getAESKey() const: std::string</text><ellipse cx="73.5" cy="371.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="82.5" y="374.2808">getAESIv() const: std::string</text><ellipse cx="73.5" cy="383.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="82.5" y="387.0854">getAESKeyPair() const: std::string</text><ellipse cx="73.5" cy="396.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="82.5" y="399.8901">getAESKeyLength() const: int</text><ellipse cx="73.5" cy="409.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="82.5" y="412.6948">getAESIVLength() const: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="86.5" y="425.4995"/><ellipse cx="73.5" cy="435.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="555" x="82.5" y="438.3042">encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t</text><ellipse cx="73.5" cy="447.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="528" x="82.5" y="451.1089">decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t</text><ellipse cx="73.5" cy="460.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="82.5" y="463.9136">encrypt(std::ifstream &amp;fin, std::ofstream &amp;fout): size_t</text><ellipse cx="73.5" cy="473.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="82.5" y="476.7183">decrypt(std::ifstream &amp;fin, std::ofstream &amp;fout): size_t</text><!--MD5=[1bab4e8cf321706813c8f1e8f3b1e9d2]
class AESEncryptor--><rect fill="#FEFECE" filter="url(#f1phv6v2o6vfn7)" height="99.2188" id="AESEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="319" x="291.5" y="621.5"/><ellipse cx="404.75" cy="637.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M407.7188,643.1406 Q407.1406,643.4375 406.5,643.5781 Q405.8594,643.7344 405.1563,643.7344 Q402.6563,643.7344 401.3281,642.0938 Q400.0156,640.4375 400.0156,637.3125 Q400.0156,634.1875 401.3281,632.5313 Q402.6563,630.875 405.1563,630.875 Q405.8594,630.875 406.5,631.0313 Q407.1563,631.1875 407.7188,631.4844 L407.7188,634.2031 Q407.0938,633.625 406.5,633.3594 Q405.9063,633.0781 405.2813,633.0781 Q403.9375,633.0781 403.25,634.1563 Q402.5625,635.2188 402.5625,637.3125 Q402.5625,639.4063 403.25,640.4844 Q403.9375,641.5469 405.2813,641.5469 Q405.9063,641.5469 406.5,641.2813 Q407.0938,641 407.7188,640.4219 L407.7188,643.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="425.25" y="641.6543">AESEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="292.5" x2="609.5" y1="653.5" y2="653.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="292.5" x2="609.5" y1="661.5" y2="661.5"/><ellipse cx="302.5" cy="672.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="311.5" y="675.7104">AESEncryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="315.5" y="688.5151"/><ellipse cx="302.5" cy="698.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="311.5" y="701.3198">encryptFile(const std::string &amp;filename): void</text><ellipse cx="302.5" cy="710.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="311.5" y="714.1245">encryptLargeFile (const std::string &amp;filename): void</text><!--MD5=[137afd6d0173c42694efae0db5e21a8c]
reverse link CryptoRSA to RSAEncryptor--><path d="M1999.94,529.27 C1997.35,543.3 1994.83,556.99 1992.44,569.97 " fill="none" id="CryptoRSA&lt;-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1993.12,527.64,2003.63,509.24,2006.89,530.18,1993.12,527.64" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[df32503cb49fc0909b2d86fbd32385e9]
reverse link CryptoAES to AESEncryptor--><path d="M405.85,502.53 C417.77,546.76 429.39,589.85 437.86,621.25 " fill="none" id="CryptoAES&lt;-AESEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="399.08,504.32,400.64,483.19,412.6,500.68,399.08,504.32" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[da09116253ffa8d0ebc045e43eafac49]
reverse link CryptoThread to Encryptor--><path d="M1261.31,755.84 C1237.03,785.92 1209.5,820.01 1184.6,850.86 " fill="none" id="CryptoThread&lt;-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1256.04,751.22,1274.05,740.06,1266.94,760.02,1256.04,751.22" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9c311359150372b518fa0602364dfebd]
reverse link CryptoSecurity to Encryptor--><path d="M961.08,749.78 C985,781.26 1012.81,817.87 1037.83,850.8 " fill="none" id="CryptoSecurity&lt;-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="955.5,753.99,948.97,733.83,966.64,745.53,955.5,753.99" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[48ba36412de84f8a3aa925712ba2875d]
reverse link RSAEncryptor to Encryptor--><path d="M1643.93,775.98 C1558.33,802.95 1467.06,831.7 1384.59,857.68 " fill="none" id="RSAEncryptor&lt;-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1656.51,772.02,1649.5842,770.0117,1645.0666,775.6323,1651.9924,777.6406,1656.51,772.02" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="116" x="1542" y="817.0669">«encrypting keys»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="1610.3779" y="791.734">1..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="1392.8903" y="851.9213">1</text><!--MD5=[01d906c2b651a9e3654fa98e059b7922]
reverse link AESEncryptor to Encryptor--><path d="M546.18,726.9 C587.77,749.77 637.57,775.68 684,796 C731.61,816.84 783.17,836.88 833.41,855.12 " fill="none" id="AESEncryptor&lt;-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="534.67,720.53,537.9895,726.9317,545.1754,726.3297,541.8559,719.9281,534.67,720.53" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="112" x="741" y="817.0669">«encrypting files»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="521.8189" y="740.6107">1..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="817.1097" y="849.2853">1</text><!--MD5=[68fe4b03ed3c71441bb20ab21b505f7e]
@startuml


package butterfly #AAAAAA
{

package hybrid #DDDDDD
{

class CryptoThread
{
    - _threads: std::vector<std::thread>
    - handleLargeFilesWithAES(const std::string &filepath) = 0: void

    + CryptoThread()

    + create(const std::string &filepath): void
    + jonThreads(): void

}

}

}


package butterfly #AAAAAA
{

package hybrid #DDDDDD
{

class CryptoSecurity
{

    + CryptoSecurity()

    + {static} saveUnencryptedAESKeyPair(const std::string &aesKeyPair): void
    + {static} areEncryptionFilesAvailable(): bool
    + {static} removeDecryptedFiles(): void
    + {static} getAESKeyPairFromUnencryptedFile(std::string &aesKeyPair): bool
}

}

}



package butterfly #AAAAAA
{

package rsa #DDDDDD
{

class CryptoRSA
{
    - _pkey: EVP_PKEY*
    - _keySize, _paddingSize: int
    - _rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*
    - _encryptedKey, _iv: unsigned char*
    - rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*

    - {static} getOpenSSLError(): std::string
    - generateRSAKey(): bool
    - loadKeyFromFile(const std::string &filepath): void
    - loadKeyFromStr(const std::string &str): void

    # getPaddingSize() const: int

    + CryptoRSA(int keySize)
    + CryptoRSA(const std::string &key)

    + getRSAIV() const: unsigned char*
    + getRSAEncryptedKey() const: unsigned char*
    + getEvpPkey(): EVP_PKEY*
    + getEvpPkeySize(EVP_PKEY *key): int

    + getRSAPrivateKeyStr(): char*
    + getPrivateKeyStr(): char*
    + getPublicKeyStr(): char*

    + encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): int
    + decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): int
    + {static} encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): int
    + {static} decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): int
}

}

}

package butterfly #AAAAAA
{

package rsa #DDDDDD
{

class RSAEncryptor
{
    - _encryptedMessage: std::string

    - validateStringLengthForRSA(const std::string &msg, const int &keysize): bool
    - writeRSAFileToSystem(): bool

    + RSAEncryptor(int keySize)
    + RSAEncryptor(const std::string &key)

    + getEncryptedMessage() const: std::string
    + writeEncMSGToFile(const std::string &filename, const std::string &ciphertextMsg, int ciphertextMsgLength): void

    + encrypt(EVP_PKEY *pkey, const std::string &decMSG): int
    + encryptEVP(EVP_PKEY *pkey, const std::string &decMSG): int
}

CryptoRSA <|- - RSAEncryptor

}

}


package butterfly #AAAAAA
{

package aes #DDDDDD
{

class CryptoAES
{
    - _aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*
    - _aesKeyLength, _aesIvLength, _aesSaltLength: int

    # {static} aesKey, aesIv: unsigned char*

    - {static} getOpenSSLError(): std::string

    + CryptoAES()

    + {static} isInitialized(): bool
    + generateAESKey() const: bool
    + generateAESKeyWithSalt() const: bool

    + setAESKey(std::string &aesKey): void
    + setAESIv(std::string &aesIv): void
    + getAESKey() const: std::string
    + getAESIv() const: std::string
    + getAESKeyPair() const: std::string
    + getAESKeyLength() const: int
    + getAESIVLength() const: int

    + encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t
    + decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t
    + encrypt(std::ifstream &fin, std::ofstream &fout): size_t
    + decrypt(std::ifstream &fin, std::ofstream &fout): size_t
}

}

}


package butterfly #AAAAAA
{

package aes #DDDDDD
{

class AESEncryptor
{
    + AESEncryptor()

    + encryptFile(const std::string &filename): void
    + encryptLargeFile (const std::string &filename): void
}

CryptoAES <|- - AESEncryptor

}

}

package butterfly #AAAAAA
{

package hybrid #DDDDDD
{

class Encryptor
{
    - _keySize: int

    - _rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: std::unique_ptr<rsa::RSAEncryptor>
    - _aesEncryptor: std::unique_ptr<aes::AESEncryptor>

    + Encryptor(int keySize = 2048)

    + invokeDir(const std::string &dirPath, bool protection): void
    + encryptCPrivateRSA(): void
    + encryptFileWithAES(const std::string &filepath): void
    + encryptLargeFilesWithAES(const std::string &filepath): void
    + encryptFinalAESKeyWithRSA(const std::string &aesKeyStr, const std::string &filename): void
}

CryptoThread   <|- - Encryptor
CryptoSecurity <|- - Encryptor

RSAEncryptor "1..*" o- - "1" Encryptor: <<encrypting keys>>
AESEncryptor "1..*" o- - "1" Encryptor: <<encrypting files>>

}

}

@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.21+9-post-Ubuntu-0ubuntu122.04
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>