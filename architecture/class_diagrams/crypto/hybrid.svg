<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1190px" preserveAspectRatio="none" style="width:2272px;height:1190px;" version="1.1" viewBox="0 0 2272 1190" width="2272px" zoomAndPan="magnify"><defs><filter height="300%" id="f1r3o69d625z2k" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster butterfly--><polygon fill="#AAAAAA" filter="url(#f1r3o69d625z2k)" points="22,24,96,24,103,46.2969,2250,46.2969,2250,1178,22,1178,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--cluster aes--><polygon fill="#DDDDDD" filter="url(#f1r3o69d625z2k)" points="1569,105.5,1603,105.5,1610,127.7969,2226,127.7969,2226,730,1569,730,1569,105.5" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1569" x2="1610" y1="127.7969" y2="127.7969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="28" x="1573" y="120.4951">aes</text><!--cluster rsa--><polygon fill="#DDDDDD" filter="url(#f1r3o69d625z2k)" points="154,67,185,67,192,89.2969,1545,89.2969,1545,788,154,788,154,67" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="154" x2="192" y1="89.2969" y2="89.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="158" y="81.9951">rsa</text><!--cluster hybrid--><polygon fill="#DDDDDD" filter="url(#f1r3o69d625z2k)" points="698,837,754,837,761,859.2969,1960,859.2969,1960,1154,698,1154,698,837" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="698" x2="761" y1="859.2969" y2="859.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="50" x="702" y="851.9951">hybrid</text><!--class CryptoAES--><rect fill="#FEFECE" filter="url(#f1r3o69d625z2k)" height="329.7031" id="CryptoAES" style="stroke: #A80036; stroke-width: 1.5;" width="581" x="1606.5" y="140.5"/><ellipse cx="1860.75" cy="156.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1863.7188,162.1406 Q1863.1406,162.4375 1862.5,162.5781 Q1861.8594,162.7344 1861.1563,162.7344 Q1858.6563,162.7344 1857.3281,161.0938 Q1856.0156,159.4375 1856.0156,156.3125 Q1856.0156,153.1875 1857.3281,151.5313 Q1858.6563,149.875 1861.1563,149.875 Q1861.8594,149.875 1862.5,150.0313 Q1863.1563,150.1875 1863.7188,150.4844 L1863.7188,153.2031 Q1863.0938,152.625 1862.5,152.3594 Q1861.9063,152.0781 1861.2813,152.0781 Q1859.9375,152.0781 1859.25,153.1563 Q1858.5625,154.2188 1858.5625,156.3125 Q1858.5625,158.4063 1859.25,159.4844 Q1859.9375,160.5469 1861.2813,160.5469 Q1861.9063,160.5469 1862.5,160.2813 Q1863.0938,160 1863.7188,159.4219 L1863.7188,162.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="1881.25" y="160.6543">CryptoAES</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1607.5" x2="2186.5" y1="172.5" y2="172.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1614.5" y="181.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1626.5" y="186.7104">_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1614.5" y="194.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="1626.5" y="199.5151">_aesKeyLength, _aesIvLength: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1630.5" y="212.3198"/><polygon fill="none" points="1617.5,217.8164,1621.5,221.8164,1617.5,225.8164,1613.5,221.8164" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="174" x="1626.5" y="225.1245">aesKey, aesIv: unsigned char*</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1626.5" x2="1800.5" y1="227.1245" y2="227.1245"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1607.5" x2="2186.5" y1="231.7188" y2="231.7188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1614.5" y="240.6211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="174" x="1626.5" y="245.9292">getOpenSSLError(): std::string</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1626.5" x2="1800.5" y1="247.9292" y2="247.9292"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1630.5" y="258.7339"/><ellipse cx="1617.5" cy="269.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1626.5" y="271.5386">CryptoAES()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1630.5" y="284.3433"/><ellipse cx="1617.5" cy="294.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="86" x="1626.5" y="297.1479">initDone(): bool</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1626.5" x2="1712.5" y1="299.1479" y2="299.1479"/><ellipse cx="1617.5" cy="307.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1626.5" y="309.9526">generateAESKey(): bool</text><ellipse cx="1617.5" cy="320.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="1626.5" y="322.7573">generateAESKeyWithSalt(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1630.5" y="335.562"/><ellipse cx="1617.5" cy="346.0586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="1626.5" y="348.3667">setAESKey(std::string &amp;aesKey): void</text><ellipse cx="1617.5" cy="358.8633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="1626.5" y="361.1714">setAESIv(std::string &amp;aesIv): void</text><ellipse cx="1617.5" cy="371.668" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="1626.5" y="373.9761">getAESKey() const: std::string</text><ellipse cx="1617.5" cy="384.4727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1626.5" y="386.7808">getAESIv() const: std::string</text><ellipse cx="1617.5" cy="397.2773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1626.5" y="399.5854">getAESKeyPair() const: std::string</text><ellipse cx="1617.5" cy="410.082" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="1626.5" y="412.3901">getAESKeyLength() const: int</text><ellipse cx="1617.5" cy="422.8867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1626.5" y="425.1948">getAESIVLength() const: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1630.5" y="437.9995"/><ellipse cx="1617.5" cy="448.4961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="555" x="1626.5" y="450.8042">encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t</text><ellipse cx="1617.5" cy="461.3008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="528" x="1626.5" y="463.6089">decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t</text><!--class AESEncryptor--><rect fill="#FEFECE" filter="url(#f1r3o69d625z2k)" height="86.4141" id="AESEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="283" x="1585.5" y="628"/><ellipse cx="1680.75" cy="644" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1683.7188,649.6406 Q1683.1406,649.9375 1682.5,650.0781 Q1681.8594,650.2344 1681.1563,650.2344 Q1678.6563,650.2344 1677.3281,648.5938 Q1676.0156,646.9375 1676.0156,643.8125 Q1676.0156,640.6875 1677.3281,639.0313 Q1678.6563,637.375 1681.1563,637.375 Q1681.8594,637.375 1682.5,637.5313 Q1683.1563,637.6875 1683.7188,637.9844 L1683.7188,640.7031 Q1683.0938,640.125 1682.5,639.8594 Q1681.9063,639.5781 1681.2813,639.5781 Q1679.9375,639.5781 1679.25,640.6563 Q1678.5625,641.7188 1678.5625,643.8125 Q1678.5625,645.9063 1679.25,646.9844 Q1679.9375,648.0469 1681.2813,648.0469 Q1681.9063,648.0469 1682.5,647.7813 Q1683.0938,647.5 1683.7188,646.9219 L1683.7188,649.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="1701.25" y="648.1543">AESEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1586.5" x2="1867.5" y1="660" y2="660"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1586.5" x2="1867.5" y1="668" y2="668"/><ellipse cx="1596.5" cy="679.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="1605.5" y="682.2104">AESEncryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1609.5" y="695.0151"/><ellipse cx="1596.5" cy="705.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="1605.5" y="707.8198">encryptFile(const std::string &amp;filename): void</text><!--class AESDecryptor--><rect fill="#FEFECE" filter="url(#f1r3o69d625z2k)" height="86.4141" id="AESDecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="306" x="1904" y="628"/><ellipse cx="2010.25" cy="644" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2013.2188,649.6406 Q2012.6406,649.9375 2012,650.0781 Q2011.3594,650.2344 2010.6563,650.2344 Q2008.1563,650.2344 2006.8281,648.5938 Q2005.5156,646.9375 2005.5156,643.8125 Q2005.5156,640.6875 2006.8281,639.0313 Q2008.1563,637.375 2010.6563,637.375 Q2011.3594,637.375 2012,637.5313 Q2012.6563,637.6875 2013.2188,637.9844 L2013.2188,640.7031 Q2012.5938,640.125 2012,639.8594 Q2011.4063,639.5781 2010.7813,639.5781 Q2009.4375,639.5781 2008.75,640.6563 Q2008.0625,641.7188 2008.0625,643.8125 Q2008.0625,645.9063 2008.75,646.9844 Q2009.4375,648.0469 2010.7813,648.0469 Q2011.4063,648.0469 2012,647.7813 Q2012.5938,647.5 2013.2188,646.9219 L2013.2188,649.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="2030.75" y="648.1543">AESDecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1905" x2="2209" y1="660" y2="660"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1905" x2="2209" y1="668" y2="668"/><ellipse cx="1915" cy="679.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1924" y="682.2104">AESDecryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1928" y="695.0151"/><ellipse cx="1915" cy="705.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="1924" y="707.8198">decryptFile(const std::string &amp;bflyFileName): void</text><!--class CryptoRSA--><rect fill="#FEFECE" filter="url(#f1r3o69d625z2k)" height="406.5313" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="932" x="385" y="102"/><ellipse cx="814.75" cy="118" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M817.7188,123.6406 Q817.1406,123.9375 816.5,124.0781 Q815.8594,124.2344 815.1563,124.2344 Q812.6563,124.2344 811.3281,122.5938 Q810.0156,120.9375 810.0156,117.8125 Q810.0156,114.6875 811.3281,113.0313 Q812.6563,111.375 815.1563,111.375 Q815.8594,111.375 816.5,111.5313 Q817.1563,111.6875 817.7188,111.9844 L817.7188,114.7031 Q817.0938,114.125 816.5,113.8594 Q815.9063,113.5781 815.2813,113.5781 Q813.9375,113.5781 813.25,114.6563 Q812.5625,115.7188 812.5625,117.8125 Q812.5625,119.9063 813.25,120.9844 Q813.9375,122.0469 815.2813,122.0469 Q815.9063,122.0469 816.5,121.7813 Q817.0938,121.5 817.7188,120.9219 L817.7188,123.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="835.25" y="122.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="386" x2="1316" y1="134" y2="134"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="142.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="405" y="148.2104">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="155.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="405" y="161.0151">_keySize, _paddingSize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="168.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="405" y="173.8198">_rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="181.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="405" y="186.6245">_encryptedKey, _iv: unsigned char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="194.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="405" y="199.4292">rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="386" x2="1316" y1="206.0234" y2="206.0234"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="214.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="148" x="405" y="220.2339">getOpenSSLError(): string</text><line style="stroke: #000000; stroke-width: 1.0;" x1="405" x2="553" y1="222.2339" y2="222.2339"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="227.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="405" y="233.0386">generateRSAKey(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="240.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="405" y="245.8433">loadKeyFromFile(const std::string &amp;filepath): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="253.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="405" y="258.6479">loadKeyFromStr(const std::string &amp;str): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="409" y="271.4526"/><polygon fill="#FFFF44" points="396,276.9492,400,280.9492,396,284.9492,392,280.9492" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="405" y="284.2573">getPaddingSize(): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="409" y="297.062"/><ellipse cx="396" cy="307.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="405" y="309.8667">CryptoRSA(int keySize)</text><ellipse cx="396" cy="320.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="405" y="322.6714">CryptoRSA(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="409" y="335.4761"/><ellipse cx="396" cy="345.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="405" y="348.2808">getRSAIV() const: unsigned char*</text><ellipse cx="396" cy="358.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="405" y="361.0854">getRSAEncryptedKey() const: unsigned char*</text><ellipse cx="396" cy="371.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="405" y="373.8901">getEvpPkey(): EVP_PKEY*</text><ellipse cx="396" cy="384.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="405" y="386.6948">getEvpPkeySize(EVP_PKEY *key): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="409" y="399.4995"/><ellipse cx="396" cy="409.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="405" y="412.3042">getRSAPrivateKeyStr(): char*</text><ellipse cx="396" cy="422.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="405" y="425.1089">getPrivateKeyStr(): char*</text><ellipse cx="396" cy="435.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="405" y="437.9136">getPublicKeyStr(): char*</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="409" y="450.7183"/><ellipse cx="396" cy="461.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="405" y="463.5229">encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): int</text><ellipse cx="396" cy="474.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="906" x="405" y="476.3276">decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): int</text><ellipse cx="396" cy="486.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="623" x="405" y="489.1323">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): int</text><line style="stroke: #000000; stroke-width: 1.0;" x1="405" x2="1028" y1="491.1323" y2="491.1323"/><ellipse cx="396" cy="499.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="596" x="405" y="501.937">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): int</text><line style="stroke: #000000; stroke-width: 1.0;" x1="405" x2="1001" y1="503.937" y2="503.937"/><!--class RSAEncryptor--><rect fill="#FEFECE" filter="url(#f1r3o69d625z2k)" height="201.6563" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="667" x="169.5" y="570"/><ellipse cx="456.75" cy="586" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M459.7188,591.6406 Q459.1406,591.9375 458.5,592.0781 Q457.8594,592.2344 457.1563,592.2344 Q454.6563,592.2344 453.3281,590.5938 Q452.0156,588.9375 452.0156,585.8125 Q452.0156,582.6875 453.3281,581.0313 Q454.6563,579.375 457.1563,579.375 Q457.8594,579.375 458.5,579.5313 Q459.1563,579.6875 459.7188,579.9844 L459.7188,582.7031 Q459.0938,582.125 458.5,581.8594 Q457.9063,581.5781 457.2813,581.5781 Q455.9375,581.5781 455.25,582.6563 Q454.5625,583.7188 454.5625,585.8125 Q454.5625,587.9063 455.25,588.9844 Q455.9375,590.0469 457.2813,590.0469 Q457.9063,590.0469 458.5,589.7813 Q459.0938,589.5 459.7188,588.9219 L459.7188,591.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="477.25" y="590.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="170.5" x2="835.5" y1="602" y2="602"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="177.5" y="610.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="189.5" y="616.2104">_encryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="170.5" x2="835.5" y1="622.8047" y2="622.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="177.5" y="631.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="189.5" y="637.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="177.5" y="644.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="189.5" y="649.8198">writeRSAFileToSystem(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="193.5" y="662.6245"/><ellipse cx="180.5" cy="673.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="189.5" y="675.4292">RSAEncryptor(int keySize)</text><ellipse cx="180.5" cy="685.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="189.5" y="688.2339">RSAEncryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="193.5" y="701.0386"/><ellipse cx="180.5" cy="711.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="189.5" y="713.8433">getEncryptedMessage() const: std::string</text><ellipse cx="180.5" cy="724.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="189.5" y="726.6479">writeEncMSGToFile(const std::string &amp;filename, const std::string &amp;ciphertextMsg, int ciphertextMsgLength): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="193.5" y="739.4526"/><ellipse cx="180.5" cy="749.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="189.5" y="752.2573">encrypt(EVP_PKEY *pkey, const std::string &amp;decMSG): int</text><ellipse cx="180.5" cy="762.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="346" x="189.5" y="765.062">encryptEVP(EVP_PKEY *pkey, const std::string &amp;decMSG): int</text><!--class RSADecryptor--><rect fill="#FEFECE" filter="url(#f1r3o69d625z2k)" height="201.6563" id="RSADecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="657" x="871.5" y="570"/><ellipse cx="1153.25" cy="586" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1156.2188,591.6406 Q1155.6406,591.9375 1155,592.0781 Q1154.3594,592.2344 1153.6563,592.2344 Q1151.1563,592.2344 1149.8281,590.5938 Q1148.5156,588.9375 1148.5156,585.8125 Q1148.5156,582.6875 1149.8281,581.0313 Q1151.1563,579.375 1153.6563,579.375 Q1154.3594,579.375 1155,579.5313 Q1155.6563,579.6875 1156.2188,579.9844 L1156.2188,582.7031 Q1155.5938,582.125 1155,581.8594 Q1154.4063,581.5781 1153.7813,581.5781 Q1152.4375,581.5781 1151.75,582.6563 Q1151.0625,583.7188 1151.0625,585.8125 Q1151.0625,587.9063 1151.75,588.9844 Q1152.4375,590.0469 1153.7813,590.0469 Q1154.4063,590.0469 1155,589.7813 Q1155.5938,589.5 1156.2188,588.9219 L1156.2188,591.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="1173.75" y="590.1543">RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="872.5" x2="1527.5" y1="602" y2="602"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="879.5" y="610.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="891.5" y="616.2104">_decryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="872.5" x2="1527.5" y1="622.8047" y2="622.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="879.5" y="631.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="891.5" y="637.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="879.5" y="644.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="587" x="891.5" y="649.8198">readRSAFileFromSystem(const RSAKEY_TYPE &amp;rsakeysType, std::string &amp;encKey, std::string &amp;iv): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="895.5" y="662.6245"/><ellipse cx="882.5" cy="673.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="891.5" y="675.4292">RSADecryptor() = delete</text><ellipse cx="882.5" cy="685.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="891.5" y="688.2339">RSADecryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="895.5" y="701.0386"/><ellipse cx="882.5" cy="711.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="891.5" y="713.8433">getDecryptedMessage() const: std::string</text><ellipse cx="882.5" cy="724.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="345" x="891.5" y="726.6479">readEncMSGFromFile(const std::string &amp;filepath): std::string</text><line style="stroke: #000000; stroke-width: 1.0;" x1="891.5" x2="1236.5" y1="728.6479" y2="728.6479"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="895.5" y="739.4526"/><ellipse cx="882.5" cy="749.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="891.5" y="752.2573">decrypt(EVP_PKEY *pkey, const std::string &amp;encMSG): int</text><ellipse cx="882.5" cy="762.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="631" x="891.5" y="765.062">decryptEVP(EVP_PKEY *pkey, const std::string &amp;encMSG, std::string &amp;decMSG, const RSAKEY_TYPE &amp;type): int</text><!--class Encryptor--><rect fill="#FEFECE" filter="url(#f1r3o69d625z2k)" height="265.6797" id="Encryptor" style="stroke: #A80036; stroke-width: 1.5;" width="551" x="714.5" y="872"/><ellipse cx="955.75" cy="888" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M958.7188,893.6406 Q958.1406,893.9375 957.5,894.0781 Q956.8594,894.2344 956.1563,894.2344 Q953.6563,894.2344 952.3281,892.5938 Q951.0156,890.9375 951.0156,887.8125 Q951.0156,884.6875 952.3281,883.0313 Q953.6563,881.375 956.1563,881.375 Q956.8594,881.375 957.5,881.5313 Q958.1563,881.6875 958.7188,881.9844 L958.7188,884.7031 Q958.0938,884.125 957.5,883.8594 Q956.9063,883.5781 956.2813,883.5781 Q954.9375,883.5781 954.25,884.6563 Q953.5625,885.7188 953.5625,887.8125 Q953.5625,889.9063 954.25,890.9844 Q954.9375,892.0469 956.2813,892.0469 Q956.9063,892.0469 957.5,891.7813 Q958.0938,891.5 958.7188,890.9219 L958.7188,893.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="976.25" y="892.1543">Encryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="715.5" x2="1264.5" y1="904" y2="904"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="722.5" y="912.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="734.5" y="918.2104">_keySize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="722.5" y="925.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="734.5" y="931.0151">_aesKeyInit: bool</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="722.5" y="938.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="734.5" y="943.8198">_threads: std::vector&lt;std::thread&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="722.5" y="951.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="492" x="734.5" y="956.6245">_rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: std::unique_ptr&lt;rsa::RSAEncryptor&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="722.5" y="964.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="734.5" y="969.4292">_aesEncryptor: std::unique_ptr&lt;aes::AESEncryptor&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="715.5" x2="1264.5" y1="976.0234" y2="976.0234"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="722.5" y="984.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="734.5" y="990.2339">validateAESKeyLength(): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="722.5" y="997.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="372" x="734.5" y="1003.0386">saveUnencryptedAESKeyPair(const std::string &amp;aesKeyPair): void</text><line style="stroke: #000000; stroke-width: 1.0;" x1="734.5" x2="1106.5" y1="1005.0386" y2="1005.0386"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="722.5" y="1010.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="197" x="734.5" y="1015.8433">checkIfEncryptionFilesExists(): void</text><line style="stroke: #000000; stroke-width: 1.0;" x1="734.5" x2="931.5" y1="1017.8433" y2="1017.8433"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="738.5" y="1028.6479"/><ellipse cx="725.5" cy="1039.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="734.5" y="1041.4526">Encryptor(int keySize = 2048)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="738.5" y="1054.2573"/><ellipse cx="725.5" cy="1064.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="734.5" y="1067.062">invokeDir(const std::string &amp;dirPath, bool protection): void</text><ellipse cx="725.5" cy="1077.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="734.5" y="1079.8667">encryptCPrivateRSA(): void</text><ellipse cx="725.5" cy="1090.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="734.5" y="1092.6714">encryptFileWithAES(const std::string &amp;filepath): void</text><ellipse cx="725.5" cy="1103.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="525" x="734.5" y="1105.4761">encryptFinalAESKeyWithRSA(const std::string &amp;aesKeyStr, const std::string &amp;filename): void</text><ellipse cx="725.5" cy="1115.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="734.5" y="1118.2808">spawnThread(const std::string &amp;filepath): void</text><ellipse cx="725.5" cy="1128.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="734.5" y="1131.0854">joinThreads(): void</text><!--class Decryptor--><rect fill="#FEFECE" filter="url(#f1r3o69d625z2k)" height="252.875" id="Decryptor" style="stroke: #A80036; stroke-width: 1.5;" width="643" x="1300.5" y="878.5"/><ellipse cx="1587.25" cy="894.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1590.2188,900.1406 Q1589.6406,900.4375 1589,900.5781 Q1588.3594,900.7344 1587.6563,900.7344 Q1585.1563,900.7344 1583.8281,899.0938 Q1582.5156,897.4375 1582.5156,894.3125 Q1582.5156,891.1875 1583.8281,889.5313 Q1585.1563,887.875 1587.6563,887.875 Q1588.3594,887.875 1589,888.0313 Q1589.6563,888.1875 1590.2188,888.4844 L1590.2188,891.2031 Q1589.5938,890.625 1589,890.3594 Q1588.4063,890.0781 1587.7813,890.0781 Q1586.4375,890.0781 1585.75,891.1563 Q1585.0625,892.2188 1585.0625,894.3125 Q1585.0625,896.4063 1585.75,897.4844 Q1586.4375,898.5469 1587.7813,898.5469 Q1588.4063,898.5469 1589,898.2813 Q1589.5938,898 1590.2188,897.4219 L1590.2188,900.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="1607.75" y="898.6543">Decryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1301.5" x2="1942.5" y1="910.5" y2="910.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1308.5" y="919.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="1320.5" y="924.7104">_decryptedCPrivateRSA: std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1308.5" y="932.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="1320.5" y="937.5151">_threads: std::vector&lt;std::thread&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1308.5" y="945.0117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="365" x="1320.5" y="950.3198">_rsaDecryptorCPrivateRSA: std::unique_ptr&lt;rsa::RSADecryptor&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1308.5" y="957.8164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="1320.5" y="963.1245">_aesDecryptor: std::unique_ptr&lt;aes::AESDecryptor&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1301.5" x2="1942.5" y1="969.7188" y2="969.7188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1308.5" y="978.6211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="165" x="1320.5" y="983.9292">removeDecryptedFiles(): void</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1320.5" x2="1485.5" y1="985.9292" y2="985.9292"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1308.5" y="991.4258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="377" x="1320.5" y="996.7339">getAESKeyPairFromUnencryptedFile(std::string &amp;aesKeyPair): bool</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1320.5" x2="1697.5" y1="998.7339" y2="998.7339"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1324.5" y="1009.5386"/><ellipse cx="1311.5" cy="1020.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="1320.5" y="1022.3433">Decryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1324.5" y="1035.1479"/><ellipse cx="1311.5" cy="1045.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="433" x="1320.5" y="1047.9526">setDecryptedCPrivateRSAStr(const std::string &amp;decryptedCPrivateRSA): void</text><ellipse cx="1311.5" cy="1058.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="1320.5" y="1060.7573">invokeDir(const std::string &amp;dirPath): void</text><ellipse cx="1311.5" cy="1071.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="575" x="1320.5" y="1073.562">decryptCPrivateRSA(const std::string &amp;pkeyFromServer, const std::string &amp;encCPrivateRSAFile): void</text><ellipse cx="1311.5" cy="1084.0586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="617" x="1320.5" y="1086.3667">decryptAESKeyPair(const std::string &amp;filepathAESKey, std::string &amp;decAESKey,  std::string &amp;decAESIV): void</text><ellipse cx="1311.5" cy="1096.8633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="1320.5" y="1099.1714">decryptFileWithAES(const std::string &amp;filepath): void</text><ellipse cx="1311.5" cy="1109.668" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="1320.5" y="1111.9761">spawnThread(const std::string &amp;filepath): void</text><ellipse cx="1311.5" cy="1122.4727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="1320.5" y="1124.7808">joinThreads(): void</text><!--entity ##14--><!--entity ##16--><!--entity ##18--><!--link CryptoRSA to RSAEncryptor--><path d="M642.84,523.93 C627.62,539.83 612.76,555.35 598.76,569.97 " fill="none" id="CryptoRSA-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="638.02,518.85,656.9,509.24,648.13,528.53,638.02,518.85" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoRSA to RSADecryptor--><path d="M1059.76,523.93 C1075.02,539.83 1089.92,555.35 1103.96,569.97 " fill="none" id="CryptoRSA-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1054.46,528.52,1045.65,509.24,1064.55,518.82,1054.46,528.52" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoAES to AESEncryptor--><path d="M1811.61,489.09 C1787.26,541.14 1762.96,593.1 1746.69,627.89 " fill="none" id="CryptoAES-AESEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1805.39,485.85,1820.21,470.7,1818.07,491.78,1805.39,485.85" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoAES to AESDecryptor--><path d="M1977.37,489.09 C2000.28,541.14 2023.15,593.1 2038.47,627.89 " fill="none" id="CryptoAES-AESDecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1970.93,491.83,1969.28,470.7,1983.74,486.19,1970.93,491.83" style="stroke: #A80036; stroke-width: 1.0;"/><!--link RSAEncryptor to Encryptor--><path d="M660.67,779.49 C703.89,808.95 751.25,841.24 796.24,871.91 " fill="none" id="RSAEncryptor-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="649.78,772.06,652.4824,778.7456,659.6931,778.8225,656.9907,772.1369,649.78,772.06" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="116" x="718" y="817.0669">«encrypting keys»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="636.2919" y="791.7768">1..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="776.807" y="860.8621">1</text><!--link AESEncryptor to Encryptor--><path d="M1672.36,722.94 C1631.36,757.65 1572.01,800.82 1511,821 C1462.87,836.92 1331.63,814.66 1283,829 C1248.33,839.22 1213.55,854.51 1180.68,871.87 " fill="none" id="AESEncryptor-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1682.38,714.32,1675.2232,715.2031,1673.2857,722.149,1680.4425,721.2659,1682.38,714.32" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="112" x="1551" y="817.0669">«encrypting files»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="1650.4359" y="734.4639">1..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="1183.4724" y="860.8198">1</text><!--link RSADecryptor to Decryptor--><path d="M1337.49,780.17 C1377.3,811.49 1421.11,845.95 1462.16,878.25 " fill="none" id="RSADecryptor-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1327.19,772.06,1329.4341,778.913,1336.6231,779.4773,1334.379,772.6243,1327.19,772.06" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="116" x="1386" y="817.0669">«decrypting keys»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="1312.3245" y="791.7768">1..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="1444.688" y="867.563">1</text><!--link AESDecryptor to Decryptor--><path d="M1991.41,722.06 C1937.23,763.41 1857.91,823.95 1786.65,878.34 " fill="none" id="AESDecryptor-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2001.91,714.05,1994.7137,714.5117,1992.3721,721.3321,1999.5684,720.8703,2001.91,714.05" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="112" x="1879" y="817.0669">«decrypting files»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="1967.881" y="734.4659">1..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="1788.4396" y="867.2394">1</text><!--
@startuml

package butterfly #AAAAAA
{

package aes #DDDDDD
{
    class CryptoAES
    {
        - _aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*
        - _aesKeyLength, _aesIvLength: int

        # {static} aesKey, aesIv: unsigned char*

        - {static} getOpenSSLError(): std::string

        + CryptoAES()

        + {static} initDone(): bool
        + generateAESKey(): bool
        + generateAESKeyWithSalt(): bool

        + setAESKey(std::string &aesKey): void
        + setAESIv(std::string &aesIv): void
        + getAESKey() const: std::string
        + getAESIv() const: std::string
        + getAESKeyPair() const: std::string
        + getAESKeyLength() const: int
        + getAESIVLength() const: int

        + encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t
        + decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t
    }


    class AESEncryptor
    {
        + AESEncryptor()

        + encryptFile(const std::string &filename): void

    }

    class AESDecryptor
    {
        + AESDecryptor()

        + decryptFile(const std::string &bflyFileName): void
    }

}

package rsa #DDDDDD
{
    class CryptoRSA
    {
        - _pkey: EVP_PKEY*
        - _keySize, _paddingSize: int
        - _rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*
        - _encryptedKey, _iv: unsigned char*
        - rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*

        - {static} getOpenSSLError(): string
        - generateRSAKey(): bool
        - loadKeyFromFile(const std::string &filepath): void
        - loadKeyFromStr(const std::string &str): void

        # getPaddingSize(): int

        + CryptoRSA(int keySize)
        + CryptoRSA(const std::string &key)

        + getRSAIV() const: unsigned char*
        + getRSAEncryptedKey() const: unsigned char*
        + getEvpPkey(): EVP_PKEY*
        + getEvpPkeySize(EVP_PKEY *key): int

        + getRSAPrivateKeyStr(): char*
        + getPrivateKeyStr(): char*
        + getPublicKeyStr(): char*

        + encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): int
        + decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): int
        + {static} encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): int
        + {static} decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): int
    }

    class RSAEncryptor
    {
        - _encryptedMessage: std::string

        - validateStringLengthForRSA(const std::string &msg, const int &keysize): bool
        - writeRSAFileToSystem(): bool

        + RSAEncryptor(int keySize)
        + RSAEncryptor(const std::string &key)

        + getEncryptedMessage() const: std::string
        + writeEncMSGToFile(const std::string &filename, const std::string &ciphertextMsg, int ciphertextMsgLength): void

        + encrypt(EVP_PKEY *pkey, const std::string &decMSG): int
        + encryptEVP(EVP_PKEY *pkey, const std::string &decMSG): int
    }

    class RSADecryptor
    {
        - _decryptedMessage: std::string

        - validateStringLengthForRSA(const std::string &msg, const int &keysize): bool
        - readRSAFileFromSystem(const RSAKEY_TYPE &rsakeysType, std::string &encKey, std::string &iv): void

        + RSADecryptor() = delete
        + RSADecryptor(const std::string &key)

        + getDecryptedMessage() const: std::string
        + {static} readEncMSGFromFile(const std::string &filepath): std::string

        + decrypt(EVP_PKEY *pkey, const std::string &encMSG): int
        + decryptEVP(EVP_PKEY *pkey, const std::string &encMSG, std::string &decMSG, const RSAKEY_TYPE &type): int
    }

}

package hybrid #DDDDDD
{
    class Encryptor
    {
        - _keySize: int
        - _aesKeyInit: bool
        - _threads: std::vector<std::thread>
        - _rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: std::unique_ptr<rsa::RSAEncryptor>
        - _aesEncryptor: std::unique_ptr<aes::AESEncryptor>

        - validateAESKeyLength(): void
        - {static} saveUnencryptedAESKeyPair(const std::string &aesKeyPair): void
        - {static} checkIfEncryptionFilesExists(): void

        + Encryptor(int keySize = 2048)

        + invokeDir(const std::string &dirPath, bool protection): void
        + encryptCPrivateRSA(): void
        + encryptFileWithAES(const std::string &filepath): void
        + encryptFinalAESKeyWithRSA(const std::string &aesKeyStr, const std::string &filename): void
        + spawnThread(const std::string &filepath): void
        + joinThreads(): void
    }

    class Decryptor
    {
        - _decryptedCPrivateRSA: std::string
        - _threads: std::vector<std::thread>
        - _rsaDecryptorCPrivateRSA: std::unique_ptr<rsa::RSADecryptor>
        - _aesDecryptor: std::unique_ptr<aes::AESDecryptor>

        - {static} removeDecryptedFiles(): void
        - {static} getAESKeyPairFromUnencryptedFile(std::string &aesKeyPair): bool

        + Decryptor()

        + setDecryptedCPrivateRSAStr(const std::string &decryptedCPrivateRSA): void
        + invokeDir(const std::string &dirPath): void
        + decryptCPrivateRSA(const std::string &pkeyFromServer, const std::string &encCPrivateRSAFile): void
        + decryptAESKeyPair(const std::string &filepathAESKey, std::string &decAESKey,  std::string &decAESIV): void
        + decryptFileWithAES(const std::string &filepath): void
        + spawnThread(const std::string &filepath): void
        + joinThreads(): void
    }
}

together {
  class CryptoRSA
  class CryptoAES
}

together {
class RSAEncryptor
class RSADecryptor
class AESEncryptor
class AESDecryptor
}

together {
  class Encryptor
  class Decryptor
}

CryptoRSA <|- - RSAEncryptor
CryptoRSA <|- - RSADecryptor

CryptoAES <|- - AESEncryptor
CryptoAES <|- - AESDecryptor

RSAEncryptor "1..*" o- - "1" Encryptor: <<encrypting keys>>
AESEncryptor "1..*" o- - "1" Encryptor: <<encrypting files>>

RSADecryptor "1..*" o- - "1" Decryptor: <<decrypting keys>>
AESDecryptor "1..*" o- - "1" Decryptor: <<decrypting files>>

}
@enduml

PlantUML version 1.2018.13(Mon Nov 26 18:11:51 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.13+8-Ubuntu-0ubuntu1.20.04
Operating System: Linux
OS Version: 5.13.0-30-generic
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>