<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="783px" preserveAspectRatio="none" style="width:2513px;height:783px;" version="1.1" viewBox="0 0 2513 783" width="2513px" zoomAndPan="magnify"><defs><filter height="300%" id="fi677gu3cp381" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster butterfly--><polygon fill="#AAAAAA" filter="url(#fi677gu3cp381)" points="22,24,96,24,103,46.2969,2491,46.2969,2491,771,22,771,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--cluster aes--><polygon fill="#DDDDDD" filter="url(#fi677gu3cp381)" points="46,195,80,195,87,217.2969,680,217.2969,680,734.5,46,734.5,46,195" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="46" x2="87" y1="217.2969" y2="217.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="28" x="50" y="209.9951">aes</text><!--cluster rsa--><polygon fill="#DDDDDD" filter="url(#fi677gu3cp381)" points="1313,67,1344,67,1351,89.2969,2467,89.2969,2467,747,1313,747,1313,67" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1313" x2="1351" y1="89.2969" y2="89.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="1317" y="81.9951">rsa</text><!--cluster hybrid--><polygon fill="#DDDDDD" filter="url(#fi677gu3cp381)" points="704,233.5,760,233.5,767,255.7969,1289,255.7969,1289,370.5,704,370.5,704,233.5" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="704" x2="767" y1="255.7969" y2="255.7969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="50" x="708" y="248.4951">hybrid</text><!--class CryptoAES--><rect fill="#FEFECE" filter="url(#fi677gu3cp381)" height="163.2422" id="CryptoAES" style="stroke: #A80036; stroke-width: 1.5;" width="581" x="72.5" y="230"/><ellipse cx="326.75" cy="246" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M329.7188,251.6406 Q329.1406,251.9375 328.5,252.0781 Q327.8594,252.2344 327.1563,252.2344 Q324.6563,252.2344 323.3281,250.5938 Q322.0156,248.9375 322.0156,245.8125 Q322.0156,242.6875 323.3281,241.0313 Q324.6563,239.375 327.1563,239.375 Q327.8594,239.375 328.5,239.5313 Q329.1563,239.6875 329.7188,239.9844 L329.7188,242.7031 Q329.0938,242.125 328.5,241.8594 Q327.9063,241.5781 327.2813,241.5781 Q325.9375,241.5781 325.25,242.6563 Q324.5625,243.7188 324.5625,245.8125 Q324.5625,247.9063 325.25,248.9844 Q325.9375,250.0469 327.2813,250.0469 Q327.9063,250.0469 328.5,249.7813 Q329.0938,249.5 329.7188,248.9219 L329.7188,251.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="347.25" y="250.1543">CryptoAES</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="73.5" x2="652.5" y1="262" y2="262"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="80.5" y="270.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="92.5" y="276.2104">_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="80.5" y="283.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="92.5" y="289.0151">_aesKeyLength, _aesIvLength: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="96.5" y="301.8198"/><polygon fill="none" points="83.5,307.3164,87.5,311.3164,83.5,315.3164,79.5,311.3164" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="92.5" y="314.6245">_aesKey, _aesIv: unsigned char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="73.5" x2="652.5" y1="321.2188" y2="321.2188"/><ellipse cx="83.5" cy="333.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="92.5" y="335.4292">CryptoAES()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="96.5" y="348.2339"/><ellipse cx="83.5" cy="358.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="92.5" y="361.0386">generateAESKey(): bool</text><ellipse cx="83.5" cy="371.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="555" x="92.5" y="373.8433">encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t</text><ellipse cx="83.5" cy="384.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="528" x="92.5" y="386.6479">decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t</text><!--class AESEncryptor--><rect fill="#FEFECE" filter="url(#fi677gu3cp381)" height="124.8281" id="AESEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="283" x="62.5" y="593.5"/><ellipse cx="157.75" cy="609.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M160.7188,615.1406 Q160.1406,615.4375 159.5,615.5781 Q158.8594,615.7344 158.1563,615.7344 Q155.6563,615.7344 154.3281,614.0938 Q153.0156,612.4375 153.0156,609.3125 Q153.0156,606.1875 154.3281,604.5313 Q155.6563,602.875 158.1563,602.875 Q158.8594,602.875 159.5,603.0313 Q160.1563,603.1875 160.7188,603.4844 L160.7188,606.2031 Q160.0938,605.625 159.5,605.3594 Q158.9063,605.0781 158.2813,605.0781 Q156.9375,605.0781 156.25,606.1563 Q155.5625,607.2188 155.5625,609.3125 Q155.5625,611.4063 156.25,612.4844 Q156.9375,613.5469 158.2813,613.5469 Q158.9063,613.5469 159.5,613.2813 Q160.0938,613 160.7188,612.4219 L160.7188,615.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="178.25" y="613.6543">AESEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="63.5" x2="344.5" y1="625.5" y2="625.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="63.5" x2="344.5" y1="633.5" y2="633.5"/><ellipse cx="73.5" cy="645.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="82.5" y="647.7104">AESEncryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="86.5" y="660.5151"/><ellipse cx="73.5" cy="671.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="82.5" y="673.3198">getAESKey() const: std::string</text><ellipse cx="73.5" cy="683.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="82.5" y="686.1245">getAESIv() const: std::string</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="86.5" y="698.9292"/><ellipse cx="73.5" cy="709.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="82.5" y="711.7339">encryptFile(const std::string &amp;filename): void</text><!--class AESDecryptor--><rect fill="#FEFECE" filter="url(#fi677gu3cp381)" height="124.8281" id="AESDecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="283" x="380.5" y="593.5"/><ellipse cx="475.25" cy="609.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M478.2188,615.1406 Q477.6406,615.4375 477,615.5781 Q476.3594,615.7344 475.6563,615.7344 Q473.1563,615.7344 471.8281,614.0938 Q470.5156,612.4375 470.5156,609.3125 Q470.5156,606.1875 471.8281,604.5313 Q473.1563,602.875 475.6563,602.875 Q476.3594,602.875 477,603.0313 Q477.6563,603.1875 478.2188,603.4844 L478.2188,606.2031 Q477.5938,605.625 477,605.3594 Q476.4063,605.0781 475.7813,605.0781 Q474.4375,605.0781 473.75,606.1563 Q473.0625,607.2188 473.0625,609.3125 Q473.0625,611.4063 473.75,612.4844 Q474.4375,613.5469 475.7813,613.5469 Q476.4063,613.5469 477,613.2813 Q477.5938,613 478.2188,612.4219 L478.2188,615.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="495.75" y="613.6543">AESDecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="381.5" x2="662.5" y1="625.5" y2="625.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="381.5" x2="662.5" y1="633.5" y2="633.5"/><ellipse cx="391.5" cy="645.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="400.5" y="647.7104">AESDecryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="404.5" y="660.5151"/><ellipse cx="391.5" cy="671.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="400.5" y="673.3198">setAESKey(const std::string &amp;aesKey): void</text><ellipse cx="391.5" cy="683.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="400.5" y="686.1245">setAESIv(const std::string &amp;aesIv): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="404.5" y="698.9292"/><ellipse cx="391.5" cy="709.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="400.5" y="711.7339">decryptFile(const std::string &amp;filename): void</text><!--class CryptoRSA--><rect fill="#FEFECE" filter="url(#fi677gu3cp381)" height="419.3359" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="667" x="1556.5" y="102"/><ellipse cx="1853.75" cy="118" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1856.7188,123.6406 Q1856.1406,123.9375 1855.5,124.0781 Q1854.8594,124.2344 1854.1563,124.2344 Q1851.6563,124.2344 1850.3281,122.5938 Q1849.0156,120.9375 1849.0156,117.8125 Q1849.0156,114.6875 1850.3281,113.0313 Q1851.6563,111.375 1854.1563,111.375 Q1854.8594,111.375 1855.5,111.5313 Q1856.1563,111.6875 1856.7188,111.9844 L1856.7188,114.7031 Q1856.0938,114.125 1855.5,113.8594 Q1854.9063,113.5781 1854.2813,113.5781 Q1852.9375,113.5781 1852.25,114.6563 Q1851.5625,115.7188 1851.5625,117.8125 Q1851.5625,119.9063 1852.25,120.9844 Q1852.9375,122.0469 1854.2813,122.0469 Q1854.9063,122.0469 1855.5,121.7813 Q1856.0938,121.5 1856.7188,120.9219 L1856.7188,123.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="1874.25" y="122.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1557.5" x2="2222.5" y1="134" y2="134"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1564.5" y="142.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="1576.5" y="148.2104">_rsa: RSA*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1564.5" y="155.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="1576.5" y="161.0151">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1564.5" y="168.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="1576.5" y="173.8198">_keySize, _paddingSize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1564.5" y="181.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="1576.5" y="186.6245">_rsaPrivateKeyStr, *_rsaPublicKeyStr, *_publicKeyStr: char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1557.5" x2="2222.5" y1="193.2188" y2="193.2188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1564.5" y="202.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="1576.5" y="207.4292">initPaddingSize(): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1564.5" y="214.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="1576.5" y="220.2339">loadKeyFromFile(const std::string &amp;filepath): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1564.5" y="227.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="1576.5" y="233.0386">loadKeyFromStr(const std::string &amp;str): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1564.5" y="240.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="1576.5" y="245.8433">getOpenSSLError(): string</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1564.5" y="253.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1576.5" y="258.6479">generateRSAKey(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1564.5" y="266.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="1576.5" y="271.4526">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1580.5" y="284.2573"/><ellipse cx="1567.5" cy="294.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1576.5" y="297.062">CryptoRSA()</text><ellipse cx="1567.5" cy="307.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="1576.5" y="309.8667">CryptoRSA(int keySize)</text><ellipse cx="1567.5" cy="320.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1576.5" y="322.6714">CryptoRSA(const std::string &amp;key)</text><ellipse cx="1567.5" cy="333.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1576.5" y="335.4761">getRSAKey(): RSA*</text><ellipse cx="1567.5" cy="345.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="1576.5" y="348.2808">getRSAKeySize(): int</text><ellipse cx="1567.5" cy="358.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="1576.5" y="361.0854">getPaddingSize(): int</text><ellipse cx="1567.5" cy="371.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1576.5" y="373.8901">getEvpPkey(): EVP_PKEY*</text><ellipse cx="1567.5" cy="384.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="1576.5" y="386.6948">getEvpPkeySize(EVP_PKEY *key): int</text><ellipse cx="1567.5" cy="397.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="1576.5" y="399.4995">getRSAPrivateKeyStr(): char*</text><ellipse cx="1567.5" cy="409.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="1576.5" y="412.3042">getRSAPublicKeyStr(): char*</text><ellipse cx="1567.5" cy="422.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1576.5" y="425.1089">getPublicKeyStr(): char*</text><ellipse cx="1567.5" cy="435.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="329" x="1576.5" y="437.9136">createRSAPrivateKeyFile(const std::string &amp;filename):bool</text><ellipse cx="1567.5" cy="448.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="1576.5" y="450.7183">createRSAPublicKeyFile(const std::string &amp;filename): bool</text><ellipse cx="1567.5" cy="461.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="1576.5" y="463.5229">createPublicKeyFile(const std::string &amp;filename): bool</text><ellipse cx="1567.5" cy="474.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="378" x="1576.5" y="476.3276">getPkeyFromPrivateKeyFile(const std::string &amp;filepath): EVP_PKEY*</text><ellipse cx="1567.5" cy="486.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="1576.5" y="489.1323">getPkeyFromPublicKeyFile(const std::string &amp;filepath): EVP_PKEY*</text><ellipse cx="1567.5" cy="499.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="1576.5" y="501.937">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): size_t</text><ellipse cx="1567.5" cy="512.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="614" x="1576.5" y="514.7417">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): size_t</text><!--class RSAEncryptor--><rect fill="#FEFECE" filter="url(#fi677gu3cp381)" height="150.4375" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="619" x="1329.5" y="581"/><ellipse cx="1592.75" cy="597" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1595.7188,602.6406 Q1595.1406,602.9375 1594.5,603.0781 Q1593.8594,603.2344 1593.1563,603.2344 Q1590.6563,603.2344 1589.3281,601.5938 Q1588.0156,599.9375 1588.0156,596.8125 Q1588.0156,593.6875 1589.3281,592.0313 Q1590.6563,590.375 1593.1563,590.375 Q1593.8594,590.375 1594.5,590.5313 Q1595.1563,590.6875 1595.7188,590.9844 L1595.7188,593.7031 Q1595.0938,593.125 1594.5,592.8594 Q1593.9063,592.5781 1593.2813,592.5781 Q1591.9375,592.5781 1591.25,593.6563 Q1590.5625,594.7188 1590.5625,596.8125 Q1590.5625,598.9063 1591.25,599.9844 Q1591.9375,601.0469 1593.2813,601.0469 Q1593.9063,601.0469 1594.5,600.7813 Q1595.0938,600.5 1595.7188,599.9219 L1595.7188,602.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="1613.25" y="601.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1330.5" x2="1947.5" y1="613" y2="613"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1337.5" y="621.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="1349.5" y="627.2104">_encryptedKey: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1330.5" x2="1947.5" y1="633.8047" y2="633.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1337.5" y="642.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="1349.5" y="648.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1353.5" y="660.8198"/><ellipse cx="1340.5" cy="671.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="1349.5" y="673.6245">RSAEncryptor(int keySize)</text><ellipse cx="1340.5" cy="684.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="1349.5" y="686.4292">RSAEncryptor(const std::string &amp;key)</text><ellipse cx="1340.5" cy="696.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1349.5" y="699.2339">getEncryptedKey(): std::string</text><ellipse cx="1340.5" cy="709.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="593" x="1349.5" y="712.0386">saveEncryptedKeyFile(const std::string &amp;filename, const std::string &amp;ciphertextKey, int keyLength): void</text><ellipse cx="1340.5" cy="722.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="1349.5" y="724.8433">encrypt(EVP_PKEY *pkey, const std::string &amp;msg): bool</text><!--class RSADecryptor--><rect fill="#FEFECE" filter="url(#fi677gu3cp381)" height="150.4375" id="RSADecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="467" x="1983.5" y="581"/><ellipse cx="2170.25" cy="597" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2173.2188,602.6406 Q2172.6406,602.9375 2172,603.0781 Q2171.3594,603.2344 2170.6563,603.2344 Q2168.1563,603.2344 2166.8281,601.5938 Q2165.5156,599.9375 2165.5156,596.8125 Q2165.5156,593.6875 2166.8281,592.0313 Q2168.1563,590.375 2170.6563,590.375 Q2171.3594,590.375 2172,590.5313 Q2172.6563,590.6875 2173.2188,590.9844 L2173.2188,593.7031 Q2172.5938,593.125 2172,592.8594 Q2171.4063,592.5781 2170.7813,592.5781 Q2169.4375,592.5781 2168.75,593.6563 Q2168.0625,594.7188 2168.0625,596.8125 Q2168.0625,598.9063 2168.75,599.9844 Q2169.4375,601.0469 2170.7813,601.0469 Q2171.4063,601.0469 2172,600.7813 Q2172.5938,600.5 2173.2188,599.9219 L2173.2188,602.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="2190.75" y="601.1543">RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1984.5" x2="2449.5" y1="613" y2="613"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1991.5" y="621.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="2003.5" y="627.2104">_decryptedKey: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1984.5" x2="2449.5" y1="633.8047" y2="633.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1991.5" y="642.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="2003.5" y="648.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="2007.5" y="660.8198"/><ellipse cx="1994.5" cy="671.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="2003.5" y="673.6245">RSADecryptor()</text><ellipse cx="1994.5" cy="684.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="2003.5" y="686.4292">RSADecryptor(const std::string &amp;key)</text><ellipse cx="1994.5" cy="696.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="2003.5" y="699.2339">getDecryptedKey(): std::string</text><ellipse cx="1994.5" cy="709.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="2003.5" y="712.0386">getBinKeyFileContents(const std::string &amp;filepath): std::string</text><ellipse cx="1994.5" cy="722.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="2003.5" y="724.8433">decrypt(EVP_PKEY *pkey, const std::string &amp;msg): bool</text><!--class Encryptor--><rect fill="#FEFECE" filter="url(#fi677gu3cp381)" height="86.4141" id="Encryptor" style="stroke: #A80036; stroke-width: 1.5;" width="258" x="720" y="268.5"/><ellipse cx="814.75" cy="284.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M817.7188,290.1406 Q817.1406,290.4375 816.5,290.5781 Q815.8594,290.7344 815.1563,290.7344 Q812.6563,290.7344 811.3281,289.0938 Q810.0156,287.4375 810.0156,284.3125 Q810.0156,281.1875 811.3281,279.5313 Q812.6563,277.875 815.1563,277.875 Q815.8594,277.875 816.5,278.0313 Q817.1563,278.1875 817.7188,278.4844 L817.7188,281.2031 Q817.0938,280.625 816.5,280.3594 Q815.9063,280.0781 815.2813,280.0781 Q813.9375,280.0781 813.25,281.1563 Q812.5625,282.2188 812.5625,284.3125 Q812.5625,286.4063 813.25,287.4844 Q813.9375,288.5469 815.2813,288.5469 Q815.9063,288.5469 816.5,288.2813 Q817.0938,288 817.7188,287.4219 L817.7188,290.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="835.25" y="288.6543">Encryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="721" x2="977" y1="300.5" y2="300.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="728" y="309.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="740" y="314.7104">_keySize: Int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="728" y="322.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="740" y="327.5151">_rsaEncryptorCPrivateRSA: RSAEncryptor</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="728" y="335.0117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="740" y="340.3198">_rsaEncryptorAESKey: RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="721" x2="977" y1="346.9141" y2="346.9141"/><!--class Decryptor--><rect fill="#FEFECE" filter="url(#fi677gu3cp381)" height="73.6094" id="Decryptor" style="stroke: #A80036; stroke-width: 1.5;" width="260" x="1013" y="274.5"/><ellipse cx="1108.25" cy="290.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1111.2188,296.1406 Q1110.6406,296.4375 1110,296.5781 Q1109.3594,296.7344 1108.6563,296.7344 Q1106.1563,296.7344 1104.8281,295.0938 Q1103.5156,293.4375 1103.5156,290.3125 Q1103.5156,287.1875 1104.8281,285.5313 Q1106.1563,283.875 1108.6563,283.875 Q1109.3594,283.875 1110,284.0313 Q1110.6563,284.1875 1111.2188,284.4844 L1111.2188,287.2031 Q1110.5938,286.625 1110,286.3594 Q1109.4063,286.0781 1108.7813,286.0781 Q1107.4375,286.0781 1106.75,287.1563 Q1106.0625,288.2188 1106.0625,290.3125 Q1106.0625,292.4063 1106.75,293.4844 Q1107.4375,294.5469 1108.7813,294.5469 Q1109.4063,294.5469 1110,294.2813 Q1110.5938,294 1111.2188,293.4219 L1111.2188,296.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="1128.75" y="294.6543">Decryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1014" x2="1272" y1="306.5" y2="306.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1021" y="315.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="1033" y="320.7104">_rsaDecryptorAESKey: RSADecryptor</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1021" y="328.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="1033" y="333.5151">_rsaDecryptorCPrivateRSA: RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1014" x2="1272" y1="340.1094" y2="340.1094"/><!--link CryptoAES to AESEncryptor--><path d="M323.34,397.94 C295.16,458.63 257.98,538.73 232.66,593.27 " fill="none" id="CryptoAES-AESEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="325.52,393.23,318.0882,399.6928,323.4048,397.7606,325.3371,403.0772,325.52,393.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoAES to AESDecryptor--><path d="M402.66,397.94 C430.84,458.63 468.02,538.73 493.34,593.27 " fill="none" id="CryptoAES-AESDecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="400.48,393.23,400.6629,403.0772,402.5952,397.7606,407.9118,399.6928,400.48,393.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoRSA to RSAEncryptor--><path d="M1733.85,525.57 C1719.47,545.2 1705.65,564.05 1693.24,580.99 " fill="none" id="CryptoRSA-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1737.12,521.11,1728.5781,526.0127,1734.1681,525.1456,1735.0352,530.7357,1737.12,521.11" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoRSA to RSADecryptor--><path d="M2092.96,525.08 C2111.87,544.88 2130.03,563.9 2146.34,580.99 " fill="none" id="CryptoRSA-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2089.17,521.11,2092.4813,530.3855,2092.6186,524.7303,2098.2738,524.8677,2089.17,521.11" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Encryptor to AESEncryptor--><path d="M824.23,359.43 C796.04,407.97 745.3,482 680,521 C556.89,594.52 499.5,537.08 363,581 C351.7,584.64 340.15,588.88 328.69,593.47 " fill="none" id="Encryptor-AESEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="826.89,354.81,818.925,360.603,824.3893,359.1397,825.8526,364.6041,826.89,354.81" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Encryptor to RSAEncryptor--><path d="M869.11,359.16 C892.44,407.47 935.57,481.31 996,521 C1052.3,557.97 1193.54,589.35 1329.36,612.43 " fill="none" id="Encryptor-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="866.92,354.57,867.1913,364.4151,869.0758,359.0814,874.4095,360.9659,866.92,354.57" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Decryptor to AESDecryptor--><path d="M1124.65,353.64 C1101.43,401 1056.98,477.82 996,521 C897.68,590.62 764.03,624.19 663.71,640.31 " fill="none" id="Decryptor-AESDecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1126.97,348.86,1119.4562,355.2273,1124.7971,353.3631,1126.6612,358.704,1126.97,348.86" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Decryptor to RSADecryptor--><path d="M1163.24,353.38 C1190.05,402.61 1242.31,483.37 1313,521 C1441.63,589.48 1822.88,553.6 1966,581 C1971.69,582.09 1977.43,583.25 1983.22,584.48 " fill="none" id="Decryptor-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1160.73,348.71,1161.5035,358.5284,1163.1133,353.1055,1168.5362,354.7152,1160.73,348.71" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml

package butterfly #AAAAAA
{

package aes #DDDDDD
{

class CryptoAES
{
    -_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*
    -_aesKeyLength, _aesIvLength: int

    #_aesKey, _aesIv: unsigned char*

    +CryptoAES()

    +generateAESKey(): bool
    +encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t
    +decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t
}

class AESEncryptor
{
    +AESEncryptor()

    +getAESKey() const: std::string
    +getAESIv() const: std::string

    +encryptFile(const std::string &filename): void

}

class AESDecryptor
{
    +AESDecryptor()

    +setAESKey(const std::string &aesKey): void
    +setAESIv(const std::string &aesIv): void

    +decryptFile(const std::string &filename): void
}

CryptoAES <- - AESEncryptor
CryptoAES <- - AESDecryptor
}

package rsa #DDDDDD
{

class CryptoRSA
{
    -_rsa: RSA*
    -_pkey: EVP_PKEY*
    -_keySize, _paddingSize: int
    -_rsaPrivateKeyStr, *_rsaPublicKeyStr, *_publicKeyStr: char*

    -initPaddingSize(): void
    -loadKeyFromFile(const std::string &filepath): void
    -loadKeyFromStr(const std::string &str): void
    -getOpenSSLError(): string
    -generateRSAKey(): bool
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    +CryptoRSA()
    +CryptoRSA(int keySize)
    +CryptoRSA(const std::string &key)
    +getRSAKey(): RSA*
    +getRSAKeySize(): int
    +getPaddingSize(): int
    +getEvpPkey(): EVP_PKEY*
    +getEvpPkeySize(EVP_PKEY *key): int
    +getRSAPrivateKeyStr(): char*
    +getRSAPublicKeyStr(): char*
    +getPublicKeyStr(): char*
    +createRSAPrivateKeyFile(const std::string &filename):bool
    +createRSAPublicKeyFile(const std::string &filename): bool
    +createPublicKeyFile(const std::string &filename): bool
    +getPkeyFromPrivateKeyFile(const std::string &filepath): EVP_PKEY*
    +getPkeyFromPublicKeyFile(const std::string &filepath): EVP_PKEY*
    +encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): size_t
    +decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): size_t
}

class RSAEncryptor
{
    -_encryptedKey: std::string

    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    +RSAEncryptor(int keySize)
    +RSAEncryptor(const std::string &key)
    +getEncryptedKey(): std::string
    +saveEncryptedKeyFile(const std::string &filename, const std::string &ciphertextKey, int keyLength): void
    +encrypt(EVP_PKEY *pkey, const std::string &msg): bool
}

class RSADecryptor
{
    -_decryptedKey: std::string
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    +RSADecryptor()
    +RSADecryptor(const std::string &key)
    +getDecryptedKey(): std::string
    +getBinKeyFileContents(const std::string &filepath): std::string
    +decrypt(EVP_PKEY *pkey, const std::string &msg): bool
}

CryptoRSA <- - RSAEncryptor
CryptoRSA <- - RSADecryptor

}

package hybrid #DDDDDD
{

class Encryptor
{
    - _keySize: Int
    - _rsaEncryptorCPrivateRSA: RSAEncryptor
    - _rsaEncryptorAESKey: RSAEncryptor
}

class Decryptor
{

    -_rsaDecryptorAESKey: RSADecryptor
    -_rsaDecryptorCPrivateRSA: RSADecryptor
}

Encryptor <- - AESEncryptor
Encryptor <- - RSAEncryptor

Decryptor <- - AESDecryptor
Decryptor <- - RSADecryptor

}

}
@enduml

PlantUML version 1.2018.13(Mon Nov 26 18:11:51 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.11+9-Ubuntu-0ubuntu2.20.04
Operating System: Linux
OS Version: 5.11.0-27-generic
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>