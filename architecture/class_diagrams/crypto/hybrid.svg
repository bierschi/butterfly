<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="983px" preserveAspectRatio="none" style="width:2091px;height:983px;" version="1.1" viewBox="0 0 2091 983" width="2091px" zoomAndPan="magnify"><defs><filter height="300%" id="fsv054l6vhh2c" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster butterfly--><polygon fill="#AAAAAA" filter="url(#fsv054l6vhh2c)" points="22,24,96,24,103,46.2969,2069,46.2969,2069,971,22,971,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--cluster aes--><polygon fill="#DDDDDD" filter="url(#fsv054l6vhh2c)" points="1411,195,1445,195,1452,217.2969,2045,217.2969,2045,754,1411,754,1411,195" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1411" x2="1452" y1="217.2969" y2="217.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="28" x="1415" y="209.9951">aes</text><!--cluster rsa--><polygon fill="#DDDDDD" filter="url(#fsv054l6vhh2c)" points="154,67,185,67,192,89.2969,1387,89.2969,1387,786,154,786,154,67" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="154" x2="192" y1="89.2969" y2="89.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="158" y="81.9951">rsa</text><!--cluster hybrid--><polygon fill="#DDDDDD" filter="url(#fsv054l6vhh2c)" points="856,810,912,810,919,832.2969,1695,832.2969,1695,947,856,947,856,810" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="856" x2="919" y1="832.2969" y2="832.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="50" x="860" y="824.9951">hybrid</text><!--class CryptoAES--><rect fill="#FEFECE" filter="url(#fsv054l6vhh2c)" height="163.2422" id="CryptoAES" style="stroke: #A80036; stroke-width: 1.5;" width="581" x="1437.5" y="230"/><ellipse cx="1691.75" cy="246" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1694.7188,251.6406 Q1694.1406,251.9375 1693.5,252.0781 Q1692.8594,252.2344 1692.1563,252.2344 Q1689.6563,252.2344 1688.3281,250.5938 Q1687.0156,248.9375 1687.0156,245.8125 Q1687.0156,242.6875 1688.3281,241.0313 Q1689.6563,239.375 1692.1563,239.375 Q1692.8594,239.375 1693.5,239.5313 Q1694.1563,239.6875 1694.7188,239.9844 L1694.7188,242.7031 Q1694.0938,242.125 1693.5,241.8594 Q1692.9063,241.5781 1692.2813,241.5781 Q1690.9375,241.5781 1690.25,242.6563 Q1689.5625,243.7188 1689.5625,245.8125 Q1689.5625,247.9063 1690.25,248.9844 Q1690.9375,250.0469 1692.2813,250.0469 Q1692.9063,250.0469 1693.5,249.7813 Q1694.0938,249.5 1694.7188,248.9219 L1694.7188,251.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="1712.25" y="250.1543">CryptoAES</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1438.5" x2="2017.5" y1="262" y2="262"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1445.5" y="270.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1457.5" y="276.2104">_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1445.5" y="283.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="1457.5" y="289.0151">_aesKeyLength, _aesIvLength: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1461.5" y="301.8198"/><polygon fill="none" points="1448.5,307.3164,1452.5,311.3164,1448.5,315.3164,1444.5,311.3164" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="1457.5" y="314.6245">_aesKey, _aesIv: unsigned char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1438.5" x2="2017.5" y1="321.2188" y2="321.2188"/><ellipse cx="1448.5" cy="333.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1457.5" y="335.4292">CryptoAES()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1461.5" y="348.2339"/><ellipse cx="1448.5" cy="358.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1457.5" y="361.0386">generateAESKey(): bool</text><ellipse cx="1448.5" cy="371.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="555" x="1457.5" y="373.8433">encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t</text><ellipse cx="1448.5" cy="384.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="528" x="1457.5" y="386.6479">decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t</text><!--class AESEncryptor--><rect fill="#FEFECE" filter="url(#fsv054l6vhh2c)" height="124.8281" id="AESEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="283" x="1427.5" y="613"/><ellipse cx="1522.75" cy="629" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1525.7188,634.6406 Q1525.1406,634.9375 1524.5,635.0781 Q1523.8594,635.2344 1523.1563,635.2344 Q1520.6563,635.2344 1519.3281,633.5938 Q1518.0156,631.9375 1518.0156,628.8125 Q1518.0156,625.6875 1519.3281,624.0313 Q1520.6563,622.375 1523.1563,622.375 Q1523.8594,622.375 1524.5,622.5313 Q1525.1563,622.6875 1525.7188,622.9844 L1525.7188,625.7031 Q1525.0938,625.125 1524.5,624.8594 Q1523.9063,624.5781 1523.2813,624.5781 Q1521.9375,624.5781 1521.25,625.6563 Q1520.5625,626.7188 1520.5625,628.8125 Q1520.5625,630.9063 1521.25,631.9844 Q1521.9375,633.0469 1523.2813,633.0469 Q1523.9063,633.0469 1524.5,632.7813 Q1525.0938,632.5 1525.7188,631.9219 L1525.7188,634.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="1543.25" y="633.1543">AESEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1428.5" x2="1709.5" y1="645" y2="645"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1428.5" x2="1709.5" y1="653" y2="653"/><ellipse cx="1438.5" cy="664.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="1447.5" y="667.2104">AESEncryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1451.5" y="680.0151"/><ellipse cx="1438.5" cy="690.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="1447.5" y="692.8198">getAESKey() const: std::string</text><ellipse cx="1438.5" cy="703.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1447.5" y="705.6245">getAESIv() const: std::string</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1451.5" y="718.4292"/><ellipse cx="1438.5" cy="728.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="1447.5" y="731.2339">encryptFile(const std::string &amp;filename): void</text><!--class AESDecryptor--><rect fill="#FEFECE" filter="url(#fsv054l6vhh2c)" height="124.8281" id="AESDecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="283" x="1745.5" y="613"/><ellipse cx="1840.25" cy="629" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1843.2188,634.6406 Q1842.6406,634.9375 1842,635.0781 Q1841.3594,635.2344 1840.6563,635.2344 Q1838.1563,635.2344 1836.8281,633.5938 Q1835.5156,631.9375 1835.5156,628.8125 Q1835.5156,625.6875 1836.8281,624.0313 Q1838.1563,622.375 1840.6563,622.375 Q1841.3594,622.375 1842,622.5313 Q1842.6563,622.6875 1843.2188,622.9844 L1843.2188,625.7031 Q1842.5938,625.125 1842,624.8594 Q1841.4063,624.5781 1840.7813,624.5781 Q1839.4375,624.5781 1838.75,625.6563 Q1838.0625,626.7188 1838.0625,628.8125 Q1838.0625,630.9063 1838.75,631.9844 Q1839.4375,633.0469 1840.7813,633.0469 Q1841.4063,633.0469 1842,632.7813 Q1842.5938,632.5 1843.2188,631.9219 L1843.2188,634.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="1860.75" y="633.1543">AESDecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1746.5" x2="2027.5" y1="645" y2="645"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1746.5" x2="2027.5" y1="653" y2="653"/><ellipse cx="1756.5" cy="664.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1765.5" y="667.2104">AESDecryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1769.5" y="680.0151"/><ellipse cx="1756.5" cy="690.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="1765.5" y="692.8198">setAESKey(const std::string &amp;aesKey): void</text><ellipse cx="1756.5" cy="703.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="1765.5" y="705.6245">setAESIv(const std::string &amp;aesIv): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1769.5" y="718.4292"/><ellipse cx="1756.5" cy="728.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="1765.5" y="731.2339">decryptFile(const std::string &amp;filename): void</text><!--class CryptoRSA--><rect fill="#FEFECE" filter="url(#fsv054l6vhh2c)" height="419.3359" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="950" x="297" y="102"/><ellipse cx="735.75" cy="118" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M738.7188,123.6406 Q738.1406,123.9375 737.5,124.0781 Q736.8594,124.2344 736.1563,124.2344 Q733.6563,124.2344 732.3281,122.5938 Q731.0156,120.9375 731.0156,117.8125 Q731.0156,114.6875 732.3281,113.0313 Q733.6563,111.375 736.1563,111.375 Q736.8594,111.375 737.5,111.5313 Q738.1563,111.6875 738.7188,111.9844 L738.7188,114.7031 Q738.0938,114.125 737.5,113.8594 Q736.9063,113.5781 736.2813,113.5781 Q734.9375,113.5781 734.25,114.6563 Q733.5625,115.7188 733.5625,117.8125 Q733.5625,119.9063 734.25,120.9844 Q734.9375,122.0469 736.2813,122.0469 Q736.9063,122.0469 737.5,121.7813 Q738.0938,121.5 738.7188,120.9219 L738.7188,123.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="756.25" y="122.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="298" x2="1246" y1="134" y2="134"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="305" y="142.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="317" y="148.2104">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="305" y="155.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="317" y="161.0151">_keySize, _paddingSize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="305" y="168.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="317" y="173.8198">_rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="305" y="181.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="317" y="186.6245">_encryptedKey, _iv: unsigned char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="305" y="194.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="317" y="199.4292">rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="298" x2="1246" y1="206.0234" y2="206.0234"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="305" y="214.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="317" y="220.2339">getOpenSSLError(): string</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="305" y="227.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="317" y="233.0386">generateRSAKey(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="305" y="240.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="317" y="245.8433">loadKeyFromFile(const std::string &amp;filepath): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="305" y="253.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="317" y="258.6479">loadKeyFromStr(const std::string &amp;str): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="305" y="266.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="317" y="271.4526">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="321" y="284.2573"/><polygon fill="#FFFF44" points="308,289.7539,312,293.7539,308,297.7539,304,293.7539" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="317" y="297.062">getPaddingSize(): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="321" y="309.8667"/><ellipse cx="308" cy="320.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="317" y="322.6714">CryptoRSA(int keySize)</text><ellipse cx="308" cy="333.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="317" y="335.4761">CryptoRSA(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="321" y="348.2808"/><ellipse cx="308" cy="358.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="317" y="361.0854">getRSAIV() const: unsigned char*</text><ellipse cx="308" cy="371.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="317" y="373.8901">getRSAEncryptedKey() const: unsigned char*</text><ellipse cx="308" cy="384.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="317" y="386.6948">getEvpPkey(): EVP_PKEY*</text><ellipse cx="308" cy="397.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="317" y="399.4995">getEvpPkeySize(EVP_PKEY *key): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="321" y="412.3042"/><ellipse cx="308" cy="422.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="317" y="425.1089">getRSAPrivateKeyStr(): char*</text><ellipse cx="308" cy="435.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="317" y="437.9136">getPrivateKeyStr(): char*</text><ellipse cx="308" cy="448.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="317" y="450.7183">getPublicKeyStr(): char*</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="321" y="463.5229"/><ellipse cx="308" cy="474.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="668" x="317" y="476.3276">encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t</text><ellipse cx="308" cy="486.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="924" x="317" y="489.1323">decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): size_t</text><ellipse cx="308" cy="499.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="317" y="501.937">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): size_t</text><ellipse cx="308" cy="512.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="614" x="317" y="514.7417">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): size_t</text><!--class RSAEncryptor--><rect fill="#FEFECE" filter="url(#fsv054l6vhh2c)" height="188.8516" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="699" x="169.5" y="581"/><ellipse cx="472.75" cy="597" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M475.7188,602.6406 Q475.1406,602.9375 474.5,603.0781 Q473.8594,603.2344 473.1563,603.2344 Q470.6563,603.2344 469.3281,601.5938 Q468.0156,599.9375 468.0156,596.8125 Q468.0156,593.6875 469.3281,592.0313 Q470.6563,590.375 473.1563,590.375 Q473.8594,590.375 474.5,590.5313 Q475.1563,590.6875 475.7188,590.9844 L475.7188,593.7031 Q475.0938,593.125 474.5,592.8594 Q473.9063,592.5781 473.2813,592.5781 Q471.9375,592.5781 471.25,593.6563 Q470.5625,594.7188 470.5625,596.8125 Q470.5625,598.9063 471.25,599.9844 Q471.9375,601.0469 473.2813,601.0469 Q473.9063,601.0469 474.5,600.7813 Q475.0938,600.5 475.7188,599.9219 L475.7188,602.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="493.25" y="601.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="170.5" x2="867.5" y1="613" y2="613"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="177.5" y="621.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="189.5" y="627.2104">__encryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="170.5" x2="867.5" y1="633.8047" y2="633.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="177.5" y="642.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="189.5" y="648.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="177.5" y="655.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="189.5" y="660.8198">writeRSAFilesToSystem(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="193.5" y="673.6245"/><ellipse cx="180.5" cy="684.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="189.5" y="686.4292">RSAEncryptor(int keySize)</text><ellipse cx="180.5" cy="696.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="189.5" y="699.2339">RSAEncryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="193.5" y="712.0386"/><ellipse cx="180.5" cy="722.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="189.5" y="724.8433">getEncryptedMessage() const: std::string</text><ellipse cx="180.5" cy="735.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="673" x="189.5" y="737.6479">saveEncryptedMsgToFile(const std::string &amp;filename, const std::string &amp;ciphertextMsg, int ciphertextMsgLength): void</text><ellipse cx="180.5" cy="748.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="189.5" y="750.4526">encrypt(EVP_PKEY *pkey, const std::string &amp;msg): void</text><ellipse cx="180.5" cy="760.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="189.5" y="763.2573">encryptEVP(EVP_PKEY *pkey, const std::string &amp;msg): void</text><!--class RSADecryptor--><rect fill="#FEFECE" filter="url(#fsv054l6vhh2c)" height="176.0469" id="RSADecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="467" x="903.5" y="587.5"/><ellipse cx="1090.25" cy="603.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1093.2188,609.1406 Q1092.6406,609.4375 1092,609.5781 Q1091.3594,609.7344 1090.6563,609.7344 Q1088.1563,609.7344 1086.8281,608.0938 Q1085.5156,606.4375 1085.5156,603.3125 Q1085.5156,600.1875 1086.8281,598.5313 Q1088.1563,596.875 1090.6563,596.875 Q1091.3594,596.875 1092,597.0313 Q1092.6563,597.1875 1093.2188,597.4844 L1093.2188,600.2031 Q1092.5938,599.625 1092,599.3594 Q1091.4063,599.0781 1090.7813,599.0781 Q1089.4375,599.0781 1088.75,600.1563 Q1088.0625,601.2188 1088.0625,603.3125 Q1088.0625,605.4063 1088.75,606.4844 Q1089.4375,607.5469 1090.7813,607.5469 Q1091.4063,607.5469 1092,607.2813 Q1092.5938,607 1093.2188,606.4219 L1093.2188,609.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="1110.75" y="607.6543">RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="904.5" x2="1369.5" y1="619.5" y2="619.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="911.5" y="628.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="923.5" y="633.7104">__decryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="904.5" x2="1369.5" y1="640.3047" y2="640.3047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="911.5" y="649.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="923.5" y="654.5151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="927.5" y="667.3198"/><ellipse cx="914.5" cy="677.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="923.5" y="680.1245">RSADecryptor()</text><ellipse cx="914.5" cy="690.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="923.5" y="692.9292">RSADecryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="927.5" y="705.7339"/><ellipse cx="914.5" cy="716.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="923.5" y="718.5386">getDecryptedMessage(): std::string</text><ellipse cx="914.5" cy="729.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="923.5" y="731.3433">getBinKeyFileContents(const std::string &amp;filepath): std::string</text><ellipse cx="914.5" cy="741.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="923.5" y="744.1479">decrypt(EVP_PKEY *pkey, const std::string &amp;msg): void</text><ellipse cx="914.5" cy="754.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="923.5" y="756.9526">decryptEVP(EVP_PKEY *pkey, const std::string &amp;msg): void</text><!--class Encryptor--><rect fill="#FEFECE" filter="url(#fsv054l6vhh2c)" height="86.4141" id="Encryptor" style="stroke: #A80036; stroke-width: 1.5;" width="387" x="872.5" y="845"/><ellipse cx="1031.75" cy="861" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1034.7188,866.6406 Q1034.1406,866.9375 1033.5,867.0781 Q1032.8594,867.2344 1032.1563,867.2344 Q1029.6563,867.2344 1028.3281,865.5938 Q1027.0156,863.9375 1027.0156,860.8125 Q1027.0156,857.6875 1028.3281,856.0313 Q1029.6563,854.375 1032.1563,854.375 Q1032.8594,854.375 1033.5,854.5313 Q1034.1563,854.6875 1034.7188,854.9844 L1034.7188,857.7031 Q1034.0938,857.125 1033.5,856.8594 Q1032.9063,856.5781 1032.2813,856.5781 Q1030.9375,856.5781 1030.25,857.6563 Q1029.5625,858.7188 1029.5625,860.8125 Q1029.5625,862.9063 1030.25,863.9844 Q1030.9375,865.0469 1032.2813,865.0469 Q1032.9063,865.0469 1033.5,864.7813 Q1034.0938,864.5 1034.7188,863.9219 L1034.7188,866.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="1052.25" y="865.1543">Encryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="873.5" x2="1258.5" y1="877" y2="877"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="880.5" y="885.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="892.5" y="891.2104">_keySize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="880.5" y="898.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="892.5" y="904.0151">_rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="873.5" x2="1258.5" y1="910.6094" y2="910.6094"/><ellipse cx="883.5" cy="922.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="892.5" y="924.8198">Encryptor()</text><!--class Decryptor--><rect fill="#FEFECE" filter="url(#fsv054l6vhh2c)" height="73.6094" id="Decryptor" style="stroke: #A80036; stroke-width: 1.5;" width="384" x="1295" y="851"/><ellipse cx="1452.25" cy="867" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1455.2188,872.6406 Q1454.6406,872.9375 1454,873.0781 Q1453.3594,873.2344 1452.6563,873.2344 Q1450.1563,873.2344 1448.8281,871.5938 Q1447.5156,869.9375 1447.5156,866.8125 Q1447.5156,863.6875 1448.8281,862.0313 Q1450.1563,860.375 1452.6563,860.375 Q1453.3594,860.375 1454,860.5313 Q1454.6563,860.6875 1455.2188,860.9844 L1455.2188,863.7031 Q1454.5938,863.125 1454,862.8594 Q1453.4063,862.5781 1452.7813,862.5781 Q1451.4375,862.5781 1450.75,863.6563 Q1450.0625,864.7188 1450.0625,866.8125 Q1450.0625,868.9063 1450.75,869.9844 Q1451.4375,871.0469 1452.7813,871.0469 Q1453.4063,871.0469 1454,870.7813 Q1454.5938,870.5 1455.2188,869.9219 L1455.2188,872.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="1472.75" y="871.1543">Decryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1296" x2="1678" y1="883" y2="883"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1303" y="891.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="1315" y="897.2104">_rsaDecryptorAESKey, rsaDecryptorCPrivateRSA: RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1296" x2="1678" y1="903.8047" y2="903.8047"/><ellipse cx="1306" cy="915.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="1315" y="918.0151">Decryptor()</text><!--entity ##14--><!--entity ##16--><!--entity ##18--><!--link CryptoRSA to RSAEncryptor--><path d="M614.33,538.1 C603.99,552.9 593.94,567.27 584.49,580.79 " fill="none" id="CryptoRSA-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="608.92,533.62,626.11,521.24,620.39,541.64,608.92,533.62" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoRSA to RSADecryptor--><path d="M996.92,535.58 C1015.24,553.74 1032.95,571.3 1049.26,587.48 " fill="none" id="CryptoRSA-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="991.74,540.3,982.47,521.24,1001.6,530.36,991.74,540.3" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoAES to AESEncryptor--><path d="M1684.4,411.77 C1656.17,476.04 1620.3,557.71 1596.1,612.8 " fill="none" id="CryptoAES-AESEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1678.06,408.79,1692.52,393.29,1690.88,414.42,1678.06,408.79" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoAES to AESDecryptor--><path d="M1771.6,411.77 C1799.83,476.04 1835.7,557.71 1859.9,612.8 " fill="none" id="CryptoAES-AESDecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1765.12,414.42,1763.48,393.29,1777.94,408.79,1765.12,414.42" style="stroke: #A80036; stroke-width: 1.0;"/><!--link RSAEncryptor to Encryptor--><path d="M774.49,774.82 C838.65,799.51 904.14,824.71 956.75,844.96 " fill="none" id="RSAEncryptor-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="762.11,770.05,766.2774,775.935,773.3125,774.3516,769.1451,768.4666,762.11,770.05" style="stroke: #A80036; stroke-width: 1.0;"/><!--link AESEncryptor to Encryptor--><path d="M1481.26,745.71 C1452.73,764.65 1419.9,782.99 1387,794 C1340.52,809.56 1324.75,790.93 1277,802 C1234.87,811.77 1190.18,828.73 1152.82,844.94 " fill="none" id="AESEncryptor-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1492.38,738.14,1485.1692,738.2103,1482.4608,744.8935,1489.6716,744.8231,1492.38,738.14" style="stroke: #A80036; stroke-width: 1.0;"/><!--link RSADecryptor to Decryptor--><path d="M1293.24,770.47 C1340.64,798.97 1389.89,828.6 1426.88,850.84 " fill="none" id="RSADecryptor-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1281.88,763.64,1284.9608,770.1599,1292.1641,769.8236,1289.0833,763.3038,1281.88,763.64" style="stroke: #A80036; stroke-width: 1.0;"/><!--link AESDecryptor to Decryptor--><path d="M1801.72,746.01 C1778.61,763.01 1753.04,780.24 1728,794 C1687.42,816.3 1640.37,835.73 1598.67,850.99 " fill="none" id="AESDecryptor-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1812.15,738.23,1804.9488,738.6079,1802.5279,745.4004,1809.7291,745.0226,1812.15,738.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml

package butterfly #AAAAAA
{

package aes #DDDDDD
{
    class CryptoAES {
        -_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*
        -_aesKeyLength, _aesIvLength: int

        #_aesKey, _aesIv: unsigned char*

        +CryptoAES()

        +generateAESKey(): bool
        +encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t
        +decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t
    }

    class AESEncryptor {

        +AESEncryptor()

        +getAESKey() const: std::string
        +getAESIv() const: std::string

        +encryptFile(const std::string &filename): void
    }

    class AESDecryptor {

        +AESDecryptor()

        +setAESKey(const std::string &aesKey): void
        +setAESIv(const std::string &aesIv): void

        +decryptFile(const std::string &filename): void
    }

}

package rsa #DDDDDD
{
    class CryptoRSA {
        -_pkey: EVP_PKEY*
        -_keySize, _paddingSize: int
        -_rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*
        -_encryptedKey, _iv: unsigned char*
        - rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*

        -getOpenSSLError(): string
        -generateRSAKey(): bool
        -loadKeyFromFile(const std::string &filepath): void
        -loadKeyFromStr(const std::string &str): void
        -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

        #getPaddingSize(): int

        +CryptoRSA(int keySize)
        +CryptoRSA(const std::string &key)

        +getRSAIV() const: unsigned char*
        +getRSAEncryptedKey() const: unsigned char*
        +getEvpPkey(): EVP_PKEY*
        +getEvpPkeySize(EVP_PKEY *key): int

        +getRSAPrivateKeyStr(): char*
        +getPrivateKeyStr(): char*
        +getPublicKeyStr(): char*

        +encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t
        +decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): size_t
        +encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): size_t
        +decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): size_t
    }
    class RSAEncryptor {

        -__encryptedMessage: std::string

        -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool
        -writeRSAFilesToSystem(): bool

        +RSAEncryptor(int keySize)
        +RSAEncryptor(const std::string &key)

        +getEncryptedMessage() const: std::string
        +saveEncryptedMsgToFile(const std::string &filename, const std::string &ciphertextMsg, int ciphertextMsgLength): void
        +encrypt(EVP_PKEY *pkey, const std::string &msg): void
        +encryptEVP(EVP_PKEY *pkey, const std::string &msg): void
    }
    class RSADecryptor {

        -__decryptedMessage: std::string
        -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

        +RSADecryptor()
        +RSADecryptor(const std::string &key)

        +getDecryptedMessage(): std::string
        +getBinKeyFileContents(const std::string &filepath): std::string
        +decrypt(EVP_PKEY *pkey, const std::string &msg): void
        +decryptEVP(EVP_PKEY *pkey, const std::string &msg): void
    }
}

package hybrid #DDDDDD
{
    class Encryptor {
        - _keySize: int
        - _rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: RSAEncryptor

        +Encryptor()

    }
    class Decryptor {
        -_rsaDecryptorAESKey, rsaDecryptorCPrivateRSA: RSADecryptor

        +Decryptor()
    }
}

together {
  class CryptoRSA
  class CryptoAES
}

together {
class RSAEncryptor
class RSADecryptor
class AESEncryptor
class AESDecryptor
}

together {
  class Encryptor
  class Decryptor
}

CryptoRSA <|- - RSAEncryptor
CryptoRSA <|- - RSADecryptor

CryptoAES <|- - AESEncryptor
CryptoAES <|- - AESDecryptor

RSAEncryptor *- - Encryptor
AESEncryptor *- - Encryptor

RSADecryptor *- - Decryptor
AESDecryptor *- - Decryptor

}
@enduml

PlantUML version 1.2018.13(Mon Nov 26 18:11:51 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.11+9-Ubuntu-0ubuntu2.20.04
Operating System: Linux
OS Version: 5.11.0-27-generic
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>