<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1112px" preserveAspectRatio="none" style="width:2249px;height:1112px;" version="1.1" viewBox="0 0 2249 1112" width="2249px" zoomAndPan="magnify"><defs><filter height="300%" id="fx9k6k8bkccxj" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster butterfly--><polygon fill="#AAAAAA" filter="url(#fx9k6k8bkccxj)" points="22,24,96,24,103,46.2969,2227,46.2969,2227,1100,22,1100,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--cluster aes--><polygon fill="#DDDDDD" filter="url(#fx9k6k8bkccxj)" points="1569,131,1603,131,1610,153.2969,2203,153.2969,2203,741,1569,741,1569,131" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1569" x2="1610" y1="153.2969" y2="153.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="28" x="1573" y="145.9951">aes</text><!--cluster rsa--><polygon fill="#DDDDDD" filter="url(#fx9k6k8bkccxj)" points="154,67,185,67,192,89.2969,1545,89.2969,1545,799,154,799,154,67" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="154" x2="192" y1="89.2969" y2="89.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="158" y="81.9951">rsa</text><!--cluster hybrid--><polygon fill="#DDDDDD" filter="url(#fx9k6k8bkccxj)" points="608,823,664,823,671,845.2969,1870,845.2969,1870,1076,608,1076,608,823" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="608" x2="671" y1="845.2969" y2="845.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="50" x="612" y="837.9951">hybrid</text><!--class CryptoAES--><rect fill="#FEFECE" filter="url(#fx9k6k8bkccxj)" height="291.2891" id="CryptoAES" style="stroke: #A80036; stroke-width: 1.5;" width="581" x="1595.5" y="166"/><ellipse cx="1849.75" cy="182" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1852.7188,187.6406 Q1852.1406,187.9375 1851.5,188.0781 Q1850.8594,188.2344 1850.1563,188.2344 Q1847.6563,188.2344 1846.3281,186.5938 Q1845.0156,184.9375 1845.0156,181.8125 Q1845.0156,178.6875 1846.3281,177.0313 Q1847.6563,175.375 1850.1563,175.375 Q1850.8594,175.375 1851.5,175.5313 Q1852.1563,175.6875 1852.7188,175.9844 L1852.7188,178.7031 Q1852.0938,178.125 1851.5,177.8594 Q1850.9063,177.5781 1850.2813,177.5781 Q1848.9375,177.5781 1848.25,178.6563 Q1847.5625,179.7188 1847.5625,181.8125 Q1847.5625,183.9063 1848.25,184.9844 Q1848.9375,186.0469 1850.2813,186.0469 Q1850.9063,186.0469 1851.5,185.7813 Q1852.0938,185.5 1852.7188,184.9219 L1852.7188,187.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="1870.25" y="186.1543">CryptoAES</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1596.5" x2="2175.5" y1="198" y2="198"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1603.5" y="206.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1615.5" y="212.2104">_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1603.5" y="219.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="1615.5" y="225.0151">_aesKeyLength, _aesIvLength: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1619.5" y="237.8198"/><polygon fill="none" points="1606.5,243.3164,1610.5,247.3164,1606.5,251.3164,1602.5,247.3164" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="1615.5" y="250.6245">_aesKey, _aesIv: unsigned char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1596.5" x2="2175.5" y1="257.2188" y2="257.2188"/><ellipse cx="1606.5" cy="269.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1615.5" y="271.4292">CryptoAES()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1619.5" y="284.2339"/><ellipse cx="1606.5" cy="294.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1615.5" y="297.0386">generateAESKey(): bool</text><ellipse cx="1606.5" cy="307.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="1615.5" y="309.8433">generateAESKeyWithSalt(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1619.5" y="322.6479"/><ellipse cx="1606.5" cy="333.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="1615.5" y="335.4526">setAESKey(std::string &amp;aesKey): void</text><ellipse cx="1606.5" cy="345.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="1615.5" y="348.2573">setAESIv(std::string &amp;aesIv): void</text><ellipse cx="1606.5" cy="358.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="1615.5" y="361.062">getAESKey() const: std::string</text><ellipse cx="1606.5" cy="371.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1615.5" y="373.8667">getAESIv() const: std::string</text><ellipse cx="1606.5" cy="384.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1615.5" y="386.6714">getAESKeyPair() const: std::string</text><ellipse cx="1606.5" cy="397.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="1615.5" y="399.4761">getAESKeyLength() const: int</text><ellipse cx="1606.5" cy="409.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1615.5" y="412.2808">getAESIVLength() const: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1619.5" y="425.0854"/><ellipse cx="1606.5" cy="435.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="555" x="1615.5" y="437.8901">encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t</text><ellipse cx="1606.5" cy="448.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="528" x="1615.5" y="450.6948">decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t</text><!--class AESEncryptor--><rect fill="#FEFECE" filter="url(#fx9k6k8bkccxj)" height="86.4141" id="AESEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="283" x="1585.5" y="639"/><ellipse cx="1680.75" cy="655" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1683.7188,660.6406 Q1683.1406,660.9375 1682.5,661.0781 Q1681.8594,661.2344 1681.1563,661.2344 Q1678.6563,661.2344 1677.3281,659.5938 Q1676.0156,657.9375 1676.0156,654.8125 Q1676.0156,651.6875 1677.3281,650.0313 Q1678.6563,648.375 1681.1563,648.375 Q1681.8594,648.375 1682.5,648.5313 Q1683.1563,648.6875 1683.7188,648.9844 L1683.7188,651.7031 Q1683.0938,651.125 1682.5,650.8594 Q1681.9063,650.5781 1681.2813,650.5781 Q1679.9375,650.5781 1679.25,651.6563 Q1678.5625,652.7188 1678.5625,654.8125 Q1678.5625,656.9063 1679.25,657.9844 Q1679.9375,659.0469 1681.2813,659.0469 Q1681.9063,659.0469 1682.5,658.7813 Q1683.0938,658.5 1683.7188,657.9219 L1683.7188,660.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="1701.25" y="659.1543">AESEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1586.5" x2="1867.5" y1="671" y2="671"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1586.5" x2="1867.5" y1="679" y2="679"/><ellipse cx="1596.5" cy="690.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="1605.5" y="693.2104">AESEncryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1609.5" y="706.0151"/><ellipse cx="1596.5" cy="716.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="1605.5" y="718.8198">encryptFile(const std::string &amp;filename): void</text><!--class AESDecryptor--><rect fill="#FEFECE" filter="url(#fx9k6k8bkccxj)" height="86.4141" id="AESDecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="283" x="1903.5" y="639"/><ellipse cx="1998.25" cy="655" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2001.2188,660.6406 Q2000.6406,660.9375 2000,661.0781 Q1999.3594,661.2344 1998.6563,661.2344 Q1996.1563,661.2344 1994.8281,659.5938 Q1993.5156,657.9375 1993.5156,654.8125 Q1993.5156,651.6875 1994.8281,650.0313 Q1996.1563,648.375 1998.6563,648.375 Q1999.3594,648.375 2000,648.5313 Q2000.6563,648.6875 2001.2188,648.9844 L2001.2188,651.7031 Q2000.5938,651.125 2000,650.8594 Q1999.4063,650.5781 1998.7813,650.5781 Q1997.4375,650.5781 1996.75,651.6563 Q1996.0625,652.7188 1996.0625,654.8125 Q1996.0625,656.9063 1996.75,657.9844 Q1997.4375,659.0469 1998.7813,659.0469 Q1999.4063,659.0469 2000,658.7813 Q2000.5938,658.5 2001.2188,657.9219 L2001.2188,660.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="2018.75" y="659.1543">AESDecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1904.5" x2="2185.5" y1="671" y2="671"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1904.5" x2="2185.5" y1="679" y2="679"/><ellipse cx="1914.5" cy="690.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1923.5" y="693.2104">AESDecryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1927.5" y="706.0151"/><ellipse cx="1914.5" cy="716.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="1923.5" y="718.8198">decryptFile(const std::string &amp;filename): void</text><!--class CryptoRSA--><rect fill="#FEFECE" filter="url(#fx9k6k8bkccxj)" height="419.3359" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="932" x="385" y="102"/><ellipse cx="814.75" cy="118" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M817.7188,123.6406 Q817.1406,123.9375 816.5,124.0781 Q815.8594,124.2344 815.1563,124.2344 Q812.6563,124.2344 811.3281,122.5938 Q810.0156,120.9375 810.0156,117.8125 Q810.0156,114.6875 811.3281,113.0313 Q812.6563,111.375 815.1563,111.375 Q815.8594,111.375 816.5,111.5313 Q817.1563,111.6875 817.7188,111.9844 L817.7188,114.7031 Q817.0938,114.125 816.5,113.8594 Q815.9063,113.5781 815.2813,113.5781 Q813.9375,113.5781 813.25,114.6563 Q812.5625,115.7188 812.5625,117.8125 Q812.5625,119.9063 813.25,120.9844 Q813.9375,122.0469 815.2813,122.0469 Q815.9063,122.0469 816.5,121.7813 Q817.0938,121.5 817.7188,120.9219 L817.7188,123.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="835.25" y="122.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="386" x2="1316" y1="134" y2="134"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="142.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="405" y="148.2104">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="155.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="405" y="161.0151">_keySize, _paddingSize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="168.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="405" y="173.8198">_rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="181.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="405" y="186.6245">_encryptedKey, _iv: unsigned char*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="194.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="405" y="199.4292">rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="386" x2="1316" y1="206.0234" y2="206.0234"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="214.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="405" y="220.2339">getOpenSSLError(): string</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="227.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="405" y="233.0386">generateRSAKey(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="240.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="405" y="245.8433">loadKeyFromFile(const std::string &amp;filepath): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="253.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="405" y="258.6479">loadKeyFromStr(const std::string &amp;str): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="393" y="266.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="405" y="271.4526">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="409" y="284.2573"/><polygon fill="#FFFF44" points="396,289.7539,400,293.7539,396,297.7539,392,293.7539" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="405" y="297.062">getPaddingSize(): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="409" y="309.8667"/><ellipse cx="396" cy="320.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="405" y="322.6714">CryptoRSA(int keySize)</text><ellipse cx="396" cy="333.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="405" y="335.4761">CryptoRSA(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="409" y="348.2808"/><ellipse cx="396" cy="358.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="405" y="361.0854">getRSAIV() const: unsigned char*</text><ellipse cx="396" cy="371.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="405" y="373.8901">getRSAEncryptedKey() const: unsigned char*</text><ellipse cx="396" cy="384.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="405" y="386.6948">getEvpPkey(): EVP_PKEY*</text><ellipse cx="396" cy="397.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="405" y="399.4995">getEvpPkeySize(EVP_PKEY *key): int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="409" y="412.3042"/><ellipse cx="396" cy="422.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="405" y="425.1089">getRSAPrivateKeyStr(): char*</text><ellipse cx="396" cy="435.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="405" y="437.9136">getPrivateKeyStr(): char*</text><ellipse cx="396" cy="448.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="405" y="450.7183">getPublicKeyStr(): char*</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="409" y="463.5229"/><ellipse cx="396" cy="474.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="405" y="476.3276">encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): int</text><ellipse cx="396" cy="486.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="906" x="405" y="489.1323">decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): int</text><ellipse cx="396" cy="499.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="623" x="405" y="501.937">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): int</text><ellipse cx="396" cy="512.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="596" x="405" y="514.7417">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): int</text><!--class RSAEncryptor--><rect fill="#FEFECE" filter="url(#fx9k6k8bkccxj)" height="201.6563" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="667" x="169.5" y="581"/><ellipse cx="456.75" cy="597" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M459.7188,602.6406 Q459.1406,602.9375 458.5,603.0781 Q457.8594,603.2344 457.1563,603.2344 Q454.6563,603.2344 453.3281,601.5938 Q452.0156,599.9375 452.0156,596.8125 Q452.0156,593.6875 453.3281,592.0313 Q454.6563,590.375 457.1563,590.375 Q457.8594,590.375 458.5,590.5313 Q459.1563,590.6875 459.7188,590.9844 L459.7188,593.7031 Q459.0938,593.125 458.5,592.8594 Q457.9063,592.5781 457.2813,592.5781 Q455.9375,592.5781 455.25,593.6563 Q454.5625,594.7188 454.5625,596.8125 Q454.5625,598.9063 455.25,599.9844 Q455.9375,601.0469 457.2813,601.0469 Q457.9063,601.0469 458.5,600.7813 Q459.0938,600.5 459.7188,599.9219 L459.7188,602.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="477.25" y="601.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="170.5" x2="835.5" y1="613" y2="613"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="177.5" y="621.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="189.5" y="627.2104">__encryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="170.5" x2="835.5" y1="633.8047" y2="633.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="177.5" y="642.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="189.5" y="648.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="177.5" y="655.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="189.5" y="660.8198">writeRSAFileToSystem(const RSAKEY_TYPE &amp;type): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="193.5" y="673.6245"/><ellipse cx="180.5" cy="684.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="189.5" y="686.4292">RSAEncryptor(int keySize)</text><ellipse cx="180.5" cy="696.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="189.5" y="699.2339">RSAEncryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="193.5" y="712.0386"/><ellipse cx="180.5" cy="722.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="189.5" y="724.8433">getEncryptedMessage() const: std::string</text><ellipse cx="180.5" cy="735.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="189.5" y="737.6479">writeEncMSGToFile(const std::string &amp;filename, const std::string &amp;ciphertextMsg, int ciphertextMsgLength): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="193.5" y="750.4526"/><ellipse cx="180.5" cy="760.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="189.5" y="763.2573">encrypt(EVP_PKEY *pkey, const std::string &amp;decMSG): int</text><ellipse cx="180.5" cy="773.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="504" x="189.5" y="776.062">encryptEVP(EVP_PKEY *pkey, const std::string &amp;decMSG, const RSAKEY_TYPE &amp;type): int</text><!--class RSADecryptor--><rect fill="#FEFECE" filter="url(#fx9k6k8bkccxj)" height="201.6563" id="RSADecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="657" x="871.5" y="581"/><ellipse cx="1153.25" cy="597" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1156.2188,602.6406 Q1155.6406,602.9375 1155,603.0781 Q1154.3594,603.2344 1153.6563,603.2344 Q1151.1563,603.2344 1149.8281,601.5938 Q1148.5156,599.9375 1148.5156,596.8125 Q1148.5156,593.6875 1149.8281,592.0313 Q1151.1563,590.375 1153.6563,590.375 Q1154.3594,590.375 1155,590.5313 Q1155.6563,590.6875 1156.2188,590.9844 L1156.2188,593.7031 Q1155.5938,593.125 1155,592.8594 Q1154.4063,592.5781 1153.7813,592.5781 Q1152.4375,592.5781 1151.75,593.6563 Q1151.0625,594.7188 1151.0625,596.8125 Q1151.0625,598.9063 1151.75,599.9844 Q1152.4375,601.0469 1153.7813,601.0469 Q1154.4063,601.0469 1155,600.7813 Q1155.5938,600.5 1156.2188,599.9219 L1156.2188,602.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="1173.75" y="601.1543">RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="872.5" x2="1527.5" y1="613" y2="613"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="879.5" y="621.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="891.5" y="627.2104">__decryptedMessage: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="872.5" x2="1527.5" y1="633.8047" y2="633.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="879.5" y="642.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="891.5" y="648.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="879.5" y="655.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="587" x="891.5" y="660.8198">readRSAFileFromSystem(const RSAKEY_TYPE &amp;rsakeysType, std::string &amp;encKey, std::string &amp;iv): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="895.5" y="673.6245"/><ellipse cx="882.5" cy="684.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="891.5" y="686.4292">RSADecryptor()</text><ellipse cx="882.5" cy="696.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="891.5" y="699.2339">RSADecryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="895.5" y="712.0386"/><ellipse cx="882.5" cy="722.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="891.5" y="724.8433">getDecryptedMessage(): std::string</text><ellipse cx="882.5" cy="735.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="345" x="891.5" y="737.6479">readEncMSGFromFile(const std::string &amp;filepath): std::string</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="895.5" y="750.4526"/><ellipse cx="882.5" cy="760.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="891.5" y="763.2573">decrypt(EVP_PKEY *pkey, const std::string &amp;encMSG): int</text><ellipse cx="882.5" cy="773.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="631" x="891.5" y="776.062">decryptEVP(EVP_PKEY *pkey, const std::string &amp;encMSG, std::string &amp;decMSG, const RSAKEY_TYPE &amp;type): int</text><!--class Encryptor--><rect fill="#FEFECE" filter="url(#fx9k6k8bkccxj)" height="201.6563" id="Encryptor" style="stroke: #A80036; stroke-width: 1.5;" width="551" x="624.5" y="858"/><ellipse cx="865.75" cy="874" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M868.7188,879.6406 Q868.1406,879.9375 867.5,880.0781 Q866.8594,880.2344 866.1563,880.2344 Q863.6563,880.2344 862.3281,878.5938 Q861.0156,876.9375 861.0156,873.8125 Q861.0156,870.6875 862.3281,869.0313 Q863.6563,867.375 866.1563,867.375 Q866.8594,867.375 867.5,867.5313 Q868.1563,867.6875 868.7188,867.9844 L868.7188,870.7031 Q868.0938,870.125 867.5,869.8594 Q866.9063,869.5781 866.2813,869.5781 Q864.9375,869.5781 864.25,870.6563 Q863.5625,871.7188 863.5625,873.8125 Q863.5625,875.9063 864.25,876.9844 Q864.9375,878.0469 866.2813,878.0469 Q866.9063,878.0469 867.5,877.7813 Q868.0938,877.5 868.7188,876.9219 L868.7188,879.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="886.25" y="878.1543">Encryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="625.5" x2="1174.5" y1="890" y2="890"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="632.5" y="898.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="644.5" y="904.2104">_keySize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="632.5" y="911.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="644.5" y="917.0151">_rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: rsa::RSAEncryptor</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="632.5" y="924.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="644.5" y="929.8198">_aesEncryptor: aes::AESEncryptor</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="632.5" y="937.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="644.5" y="942.6245">_dirIterator: DirectoryIterator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="625.5" x2="1174.5" y1="949.2188" y2="949.2188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="632.5" y="958.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="644.5" y="963.4292">validateAESKeyLength(): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="648.5" y="976.2339"/><ellipse cx="635.5" cy="986.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="644.5" y="989.0386">Encryptor(int keySize = 2048)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="648.5" y="1001.8433"/><ellipse cx="635.5" cy="1012.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="644.5" y="1014.6479">invokeDir(const std::string &amp;dirPath, bool protection): void</text><ellipse cx="635.5" cy="1025.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="644.5" y="1027.4526">encryptCPrivateRSA(): void</text><ellipse cx="635.5" cy="1037.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="644.5" y="1040.2573">encryptFileWithAES(const std::string &amp;filepath): void</text><ellipse cx="635.5" cy="1050.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="525" x="644.5" y="1053.062">encryptFinalAESKeyWithRSA(const std::string &amp;aesKeyStr, const std::string &amp;filename): void</text><!--class Decryptor--><rect fill="#FEFECE" filter="url(#fx9k6k8bkccxj)" height="150.4375" id="Decryptor" style="stroke: #A80036; stroke-width: 1.5;" width="643" x="1210.5" y="884"/><ellipse cx="1497.25" cy="900" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1500.2188,905.6406 Q1499.6406,905.9375 1499,906.0781 Q1498.3594,906.2344 1497.6563,906.2344 Q1495.1563,906.2344 1493.8281,904.5938 Q1492.5156,902.9375 1492.5156,899.8125 Q1492.5156,896.6875 1493.8281,895.0313 Q1495.1563,893.375 1497.6563,893.375 Q1498.3594,893.375 1499,893.5313 Q1499.6563,893.6875 1500.2188,893.9844 L1500.2188,896.7031 Q1499.5938,896.125 1499,895.8594 Q1498.4063,895.5781 1497.7813,895.5781 Q1496.4375,895.5781 1495.75,896.6563 Q1495.0625,897.7188 1495.0625,899.8125 Q1495.0625,901.9063 1495.75,902.9844 Q1496.4375,904.0469 1497.7813,904.0469 Q1498.4063,904.0469 1499,903.7813 Q1499.5938,903.5 1500.2188,902.9219 L1500.2188,905.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="1517.75" y="904.1543">Decryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1211.5" x2="1852.5" y1="916" y2="916"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1218.5" y="924.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="1230.5" y="930.2104">_rsaDecryptorCPrivateRSA: rsa::RSADecryptor</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1218.5" y="937.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="1230.5" y="943.0151">_aesDecryptor: aes::AESDecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1211.5" x2="1852.5" y1="949.6094" y2="949.6094"/><ellipse cx="1221.5" cy="961.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="1230.5" y="963.8198">Decryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1234.5" y="976.6245"/><ellipse cx="1221.5" cy="987.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="448" x="1230.5" y="989.4292">invokeDir(const std::string &amp;dirPath, const std::string &amp;pkeyFromServer): void</text><ellipse cx="1221.5" cy="999.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="575" x="1230.5" y="1002.2339">decryptCPrivateRSA(const std::string &amp;pkeyFromServer, const std::string &amp;encCPrivateRSAFile): void</text><ellipse cx="1221.5" cy="1012.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="617" x="1230.5" y="1015.0386">decryptAESKeyPair(const std::string &amp;filepathAESKey, std::string &amp;decAESKey,  std::string &amp;decAESIV): void</text><ellipse cx="1221.5" cy="1025.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="529" x="1230.5" y="1027.8433">decryptFileWithAES(const std::string &amp;filepath, std::string &amp;aesKey, std::string &amp;aesIV): void</text><!--entity ##14--><!--entity ##16--><!--entity ##18--><!--link CryptoRSA to RSAEncryptor--><path d="M639.78,536.17 C625.18,551.62 610.96,566.68 597.53,580.9 " fill="none" id="CryptoRSA-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="635.05,530.98,653.87,521.25,645.22,540.59,635.05,530.98" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoRSA to RSADecryptor--><path d="M1062.83,536.17 C1077.46,551.62 1091.73,566.68 1105.19,580.9 " fill="none" id="CryptoRSA-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1057.37,540.58,1048.7,521.25,1067.53,530.95,1057.37,540.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoAES to AESEncryptor--><path d="M1815.65,475.56 C1789.79,535.48 1762.62,598.44 1745.29,638.61 " fill="none" id="CryptoAES-AESEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1809.26,472.67,1823.62,457.08,1822.12,478.22,1809.26,472.67" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoAES to AESDecryptor--><path d="M1956.35,475.56 C1982.21,535.48 2009.38,598.44 2026.71,638.61 " fill="none" id="CryptoAES-AESDecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1949.88,478.22,1948.38,457.08,1962.74,472.67,1949.88,478.22" style="stroke: #A80036; stroke-width: 1.0;"/><!--link RSAEncryptor to Encryptor--><path d="M658.23,790.52 C690.2,812.67 723.75,835.91 755.33,857.78 " fill="none" id="RSAEncryptor-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="647.45,783.06,650.0993,789.7668,657.3092,789.9008,654.6599,783.194,647.45,783.06" style="stroke: #A80036; stroke-width: 1.0;"/><!--link AESEncryptor to Encryptor--><path d="M1671.49,733.35 C1637.59,760.72 1591.85,791.97 1545,807 C1507.75,818.95 1231.01,805.76 1193,815 C1153.12,824.69 1112.33,840.36 1074.35,857.85 " fill="none" id="AESEncryptor-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1681.63,725,1674.4561,725.7319,1672.3725,732.6354,1679.5464,731.9035,1681.63,725" style="stroke: #A80036; stroke-width: 1.0;"/><!--link RSADecryptor to Decryptor--><path d="M1331.25,791.72 C1368.56,822.62 1408.32,855.55 1442.52,883.89 " fill="none" id="RSADecryptor-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1320.8,783.06,1322.8729,789.9667,1330.0456,790.7097,1327.9727,783.803,1320.8,783.06" style="stroke: #A80036; stroke-width: 1.0;"/><!--link AESDecryptor to Decryptor--><path d="M1987.61,733.64 C1958.47,757.79 1921.74,785.93 1886,807 C1837.51,835.59 1782.59,861.72 1730.74,883.91 " fill="none" id="AESDecryptor-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1997.59,725.28,1990.4215,726.0623,1988.3865,732.9804,1995.555,732.198,1997.59,725.28" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml

package butterfly #AAAAAA
{

package aes #DDDDDD
{
    class CryptoAES
    {
        -_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*
        -_aesKeyLength, _aesIvLength: int

        #_aesKey, _aesIv: unsigned char*

        +CryptoAES()

        +generateAESKey(): bool
        +generateAESKeyWithSalt(): bool

        +setAESKey(std::string &aesKey): void
        +setAESIv(std::string &aesIv): void
        +getAESKey() const: std::string
        +getAESIv() const: std::string
        +getAESKeyPair() const: std::string
        +getAESKeyLength() const: int
        +getAESIVLength() const: int

        +encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t
        +decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t
    }


    class AESEncryptor
    {
        +AESEncryptor()

        +encryptFile(const std::string &filename): void

    }

    class AESDecryptor
    {
        +AESDecryptor()

        +decryptFile(const std::string &filename): void
    }

}

package rsa #DDDDDD
{
    class CryptoRSA
    {
        -_pkey: EVP_PKEY*
        -_keySize, _paddingSize: int
        -_rsaPrivateKeyStr, _privateKeyStr, _publicKeyStr: char*
        -_encryptedKey, _iv: unsigned char*
        - rsaEncryptContext, rsaDecryptContext: EVP_CIPHER_CTX*

        -getOpenSSLError(): string
        -generateRSAKey(): bool
        -loadKeyFromFile(const std::string &filepath): void
        -loadKeyFromStr(const std::string &str): void
        -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

        #getPaddingSize(): int

        +CryptoRSA(int keySize)
        +CryptoRSA(const std::string &key)

        +getRSAIV() const: unsigned char*
        +getRSAEncryptedKey() const: unsigned char*
        +getEvpPkey(): EVP_PKEY*
        +getEvpPkeySize(EVP_PKEY *key): int

        +getRSAPrivateKeyStr(): char*
        +getPrivateKeyStr(): char*
        +getPublicKeyStr(): char*

        +encrpytEVP(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): int
        +decryptEVP(EVP_PKEY *key, unsigned char *ciphertext, size_t ciphertextLength, unsigned char *encryptedKey, unsigned char *iv, unsigned char **plaintext): int
        +encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): int
        +decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): int
    }

    class RSAEncryptor
    {
        -__encryptedMessage: std::string

        -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool
        -writeRSAFileToSystem(const RSAKEY_TYPE &type): bool

        +RSAEncryptor(int keySize)
        +RSAEncryptor(const std::string &key)

        +getEncryptedMessage() const: std::string
        +writeEncMSGToFile(const std::string &filename, const std::string &ciphertextMsg, int ciphertextMsgLength): void

        +encrypt(EVP_PKEY *pkey, const std::string &decMSG): int
        +encryptEVP(EVP_PKEY *pkey, const std::string &decMSG, const RSAKEY_TYPE &type): int
    }

    class RSADecryptor
    {
        -__decryptedMessage: std::string
        -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool
        -readRSAFileFromSystem(const RSAKEY_TYPE &rsakeysType, std::string &encKey, std::string &iv): void

        +RSADecryptor()
        +RSADecryptor(const std::string &key)

        +getDecryptedMessage(): std::string
        +readEncMSGFromFile(const std::string &filepath): std::string

        +decrypt(EVP_PKEY *pkey, const std::string &encMSG): int
        +decryptEVP(EVP_PKEY *pkey, const std::string &encMSG, std::string &decMSG, const RSAKEY_TYPE &type): int
    }

}

package hybrid #DDDDDD
{
    class Encryptor {
        - _keySize: int
        - _rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: rsa::RSAEncryptor
        -_aesEncryptor: aes::AESEncryptor
        -_dirIterator: DirectoryIterator

        - validateAESKeyLength(): void

        +Encryptor(int keySize = 2048)

        +invokeDir(const std::string &dirPath, bool protection): void
        +encryptCPrivateRSA(): void
        +encryptFileWithAES(const std::string &filepath): void
        +encryptFinalAESKeyWithRSA(const std::string &aesKeyStr, const std::string &filename): void
    }

    class Decryptor {
        -_rsaDecryptorCPrivateRSA: rsa::RSADecryptor
        -_aesDecryptor: aes::AESDecryptor
        
        +Decryptor()

        +invokeDir(const std::string &dirPath, const std::string &pkeyFromServer): void
        +decryptCPrivateRSA(const std::string &pkeyFromServer, const std::string &encCPrivateRSAFile): void
        +decryptAESKeyPair(const std::string &filepathAESKey, std::string &decAESKey,  std::string &decAESIV): void
        +decryptFileWithAES(const std::string &filepath, std::string &aesKey, std::string &aesIV): void
    }
}

together {
  class CryptoRSA
  class CryptoAES
}

together {
class RSAEncryptor
class RSADecryptor
class AESEncryptor
class AESDecryptor
}

together {
  class Encryptor
  class Decryptor
}

CryptoRSA <|- - RSAEncryptor
CryptoRSA <|- - RSADecryptor

CryptoAES <|- - AESEncryptor
CryptoAES <|- - AESDecryptor

RSAEncryptor *- - Encryptor
AESEncryptor *- - Encryptor

RSADecryptor *- - Decryptor
AESDecryptor *- - Decryptor

}
@enduml

PlantUML version 1.2018.13(Mon Nov 26 18:11:51 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.11+9-Ubuntu-0ubuntu2.20.04
Operating System: Linux
OS Version: 5.11.0-34-generic
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>