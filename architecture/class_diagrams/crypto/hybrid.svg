<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="919px" preserveAspectRatio="none" style="width:2012px;height:919px;" version="1.1" viewBox="0 0 2012 919" width="2012px" zoomAndPan="magnify"><defs><filter height="300%" id="f1lhtt44ya9u32" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster butterfly--><polygon fill="#AAAAAA" filter="url(#f1lhtt44ya9u32)" points="22,24,96,24,103,46.2969,1990,46.2969,1990,907,22,907,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--cluster aes--><polygon fill="#DDDDDD" filter="url(#f1lhtt44ya9u32)" points="1332,176,1366,176,1373,198.2969,1966,198.2969,1966,703,1332,703,1332,176" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1332" x2="1373" y1="198.2969" y2="198.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="28" x="1336" y="190.9951">aes</text><!--cluster rsa--><polygon fill="#DDDDDD" filter="url(#f1lhtt44ya9u32)" points="154,67,185,67,192,89.2969,1308,89.2969,1308,722,154,722,154,67" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="154" x2="192" y1="89.2969" y2="89.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="25" x="158" y="81.9951">rsa</text><!--cluster hybrid--><polygon fill="#DDDDDD" filter="url(#f1lhtt44ya9u32)" points="777,746,833,746,840,768.2969,1616,768.2969,1616,883,777,883,777,746" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="777" x2="840" y1="768.2969" y2="768.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="50" x="781" y="760.9951">hybrid</text><!--class CryptoAES--><rect fill="#FEFECE" filter="url(#f1lhtt44ya9u32)" height="163.2422" id="CryptoAES" style="stroke: #A80036; stroke-width: 1.5;" width="581" x="1358.5" y="211"/><ellipse cx="1612.75" cy="227" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1615.7188,232.6406 Q1615.1406,232.9375 1614.5,233.0781 Q1613.8594,233.2344 1613.1563,233.2344 Q1610.6563,233.2344 1609.3281,231.5938 Q1608.0156,229.9375 1608.0156,226.8125 Q1608.0156,223.6875 1609.3281,222.0313 Q1610.6563,220.375 1613.1563,220.375 Q1613.8594,220.375 1614.5,220.5313 Q1615.1563,220.6875 1615.7188,220.9844 L1615.7188,223.7031 Q1615.0938,223.125 1614.5,222.8594 Q1613.9063,222.5781 1613.2813,222.5781 Q1611.9375,222.5781 1611.25,223.6563 Q1610.5625,224.7188 1610.5625,226.8125 Q1610.5625,228.9063 1611.25,229.9844 Q1611.9375,231.0469 1613.2813,231.0469 Q1613.9063,231.0469 1614.5,230.7813 Q1615.0938,230.5 1615.7188,229.9219 L1615.7188,232.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="1633.25" y="231.1543">CryptoAES</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1359.5" x2="1938.5" y1="243" y2="243"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1366.5" y="251.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1378.5" y="257.2104">_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1366.5" y="264.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="1378.5" y="270.0151">_aesKeyLength, _aesIvLength: int</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1382.5" y="282.8198"/><polygon fill="none" points="1369.5,288.3164,1373.5,292.3164,1369.5,296.3164,1365.5,292.3164" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="1378.5" y="295.6245">_aesKey, _aesIv: unsigned char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1359.5" x2="1938.5" y1="302.2188" y2="302.2188"/><ellipse cx="1369.5" cy="314.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1378.5" y="316.4292">CryptoAES()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1382.5" y="329.2339"/><ellipse cx="1369.5" cy="339.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1378.5" y="342.0386">generateAESKey(): bool</text><ellipse cx="1369.5" cy="352.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="555" x="1378.5" y="354.8433">encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t</text><ellipse cx="1369.5" cy="365.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="528" x="1378.5" y="367.6479">decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t</text><!--class AESEncryptor--><rect fill="#FEFECE" filter="url(#f1lhtt44ya9u32)" height="124.8281" id="AESEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="283" x="1348.5" y="562"/><ellipse cx="1443.75" cy="578" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1446.7188,583.6406 Q1446.1406,583.9375 1445.5,584.0781 Q1444.8594,584.2344 1444.1563,584.2344 Q1441.6563,584.2344 1440.3281,582.5938 Q1439.0156,580.9375 1439.0156,577.8125 Q1439.0156,574.6875 1440.3281,573.0313 Q1441.6563,571.375 1444.1563,571.375 Q1444.8594,571.375 1445.5,571.5313 Q1446.1563,571.6875 1446.7188,571.9844 L1446.7188,574.7031 Q1446.0938,574.125 1445.5,573.8594 Q1444.9063,573.5781 1444.2813,573.5781 Q1442.9375,573.5781 1442.25,574.6563 Q1441.5625,575.7188 1441.5625,577.8125 Q1441.5625,579.9063 1442.25,580.9844 Q1442.9375,582.0469 1444.2813,582.0469 Q1444.9063,582.0469 1445.5,581.7813 Q1446.0938,581.5 1446.7188,580.9219 L1446.7188,583.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="1464.25" y="582.1543">AESEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1349.5" x2="1630.5" y1="594" y2="594"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1349.5" x2="1630.5" y1="602" y2="602"/><ellipse cx="1359.5" cy="613.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="1368.5" y="616.2104">AESEncryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1372.5" y="629.0151"/><ellipse cx="1359.5" cy="639.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="1368.5" y="641.8198">getAESKey() const: std::string</text><ellipse cx="1359.5" cy="652.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1368.5" y="654.6245">getAESIv() const: std::string</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1372.5" y="667.4292"/><ellipse cx="1359.5" cy="677.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="1368.5" y="680.2339">encryptFile(const std::string &amp;filename): void</text><!--class AESDecryptor--><rect fill="#FEFECE" filter="url(#f1lhtt44ya9u32)" height="124.8281" id="AESDecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="283" x="1666.5" y="562"/><ellipse cx="1761.25" cy="578" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1764.2188,583.6406 Q1763.6406,583.9375 1763,584.0781 Q1762.3594,584.2344 1761.6563,584.2344 Q1759.1563,584.2344 1757.8281,582.5938 Q1756.5156,580.9375 1756.5156,577.8125 Q1756.5156,574.6875 1757.8281,573.0313 Q1759.1563,571.375 1761.6563,571.375 Q1762.3594,571.375 1763,571.5313 Q1763.6563,571.6875 1764.2188,571.9844 L1764.2188,574.7031 Q1763.5938,574.125 1763,573.8594 Q1762.4063,573.5781 1761.7813,573.5781 Q1760.4375,573.5781 1759.75,574.6563 Q1759.0625,575.7188 1759.0625,577.8125 Q1759.0625,579.9063 1759.75,580.9844 Q1760.4375,582.0469 1761.7813,582.0469 Q1762.4063,582.0469 1763,581.7813 Q1763.5938,581.5 1764.2188,580.9219 L1764.2188,583.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="1781.75" y="582.1543">AESDecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1667.5" x2="1948.5" y1="594" y2="594"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1667.5" x2="1948.5" y1="602" y2="602"/><ellipse cx="1677.5" cy="613.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1686.5" y="616.2104">AESDecryptor()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1690.5" y="629.0151"/><ellipse cx="1677.5" cy="639.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="1686.5" y="641.8198">setAESKey(const std::string &amp;aesKey): void</text><ellipse cx="1677.5" cy="652.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="1686.5" y="654.6245">setAESIv(const std::string &amp;aesIv): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1690.5" y="667.4292"/><ellipse cx="1677.5" cy="677.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="1686.5" y="680.2339">decryptFile(const std::string &amp;filename): void</text><!--class CryptoRSA--><rect fill="#FEFECE" filter="url(#f1lhtt44ya9u32)" height="380.9219" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="667" x="398.5" y="102"/><ellipse cx="695.75" cy="118" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M698.7188,123.6406 Q698.1406,123.9375 697.5,124.0781 Q696.8594,124.2344 696.1563,124.2344 Q693.6563,124.2344 692.3281,122.5938 Q691.0156,120.9375 691.0156,117.8125 Q691.0156,114.6875 692.3281,113.0313 Q693.6563,111.375 696.1563,111.375 Q696.8594,111.375 697.5,111.5313 Q698.1563,111.6875 698.7188,111.9844 L698.7188,114.7031 Q698.0938,114.125 697.5,113.8594 Q696.9063,113.5781 696.2813,113.5781 Q694.9375,113.5781 694.25,114.6563 Q693.5625,115.7188 693.5625,117.8125 Q693.5625,119.9063 694.25,120.9844 Q694.9375,122.0469 696.2813,122.0469 Q696.9063,122.0469 697.5,121.7813 Q698.0938,121.5 698.7188,120.9219 L698.7188,123.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="716.25" y="122.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="399.5" x2="1064.5" y1="134" y2="134"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="406.5" y="142.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="418.5" y="148.2104">_rsa: RSA*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="406.5" y="155.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="418.5" y="161.0151">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="406.5" y="168.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="418.5" y="173.8198">_keySize, _paddingSize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="406.5" y="181.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="418.5" y="186.6245">_rsaPrivateKeyStr, *_rsaPublicKeyStr, *_publicKeyStr: char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="399.5" x2="1064.5" y1="193.2188" y2="193.2188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="406.5" y="202.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="418.5" y="207.4292">initPaddingSize(): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="406.5" y="214.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="418.5" y="220.2339">loadKeyFromFile(const std::string &amp;filepath): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="406.5" y="227.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="418.5" y="233.0386">loadKeyFromStr(const std::string &amp;str): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="406.5" y="240.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="418.5" y="245.8433">getOpenSSLError(): string</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="406.5" y="253.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="418.5" y="258.6479">generateRSAKey(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="406.5" y="266.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="418.5" y="271.4526">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="422.5" y="284.2573"/><ellipse cx="409.5" cy="294.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="418.5" y="297.062">CryptoRSA()</text><ellipse cx="409.5" cy="307.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="418.5" y="309.8667">CryptoRSA(int keySize)</text><ellipse cx="409.5" cy="320.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="418.5" y="322.6714">CryptoRSA(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="422.5" y="335.4761"/><ellipse cx="409.5" cy="345.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="418.5" y="348.2808">getRSAKey(): RSA*</text><ellipse cx="409.5" cy="358.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="418.5" y="361.0854">getRSAKeySize(): int</text><ellipse cx="409.5" cy="371.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="418.5" y="373.8901">getPaddingSize(): int</text><ellipse cx="409.5" cy="384.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="418.5" y="386.6948">getEvpPkey(): EVP_PKEY*</text><ellipse cx="409.5" cy="397.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="418.5" y="399.4995">getEvpPkeySize(EVP_PKEY *key): int</text><ellipse cx="409.5" cy="409.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="418.5" y="412.3042">getRSAPrivateKeyStr(): char*</text><ellipse cx="409.5" cy="422.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="378" x="418.5" y="425.1089">getPkeyFromPrivateKeyFile(const std::string &amp;filepath): EVP_PKEY*</text><ellipse cx="409.5" cy="435.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="418.5" y="437.9136">getPkeyFromPublicKeyFile(const std::string &amp;filepath): EVP_PKEY*</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="422.5" y="450.7183"/><ellipse cx="409.5" cy="461.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="418.5" y="463.5229">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): size_t</text><ellipse cx="409.5" cy="474.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="614" x="418.5" y="476.3276">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): size_t</text><!--class RSAEncryptor--><rect fill="#FEFECE" filter="url(#f1lhtt44ya9u32)" height="163.2422" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="619" x="170.5" y="543"/><ellipse cx="433.75" cy="559" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M436.7188,564.6406 Q436.1406,564.9375 435.5,565.0781 Q434.8594,565.2344 434.1563,565.2344 Q431.6563,565.2344 430.3281,563.5938 Q429.0156,561.9375 429.0156,558.8125 Q429.0156,555.6875 430.3281,554.0313 Q431.6563,552.375 434.1563,552.375 Q434.8594,552.375 435.5,552.5313 Q436.1563,552.6875 436.7188,552.9844 L436.7188,555.7031 Q436.0938,555.125 435.5,554.8594 Q434.9063,554.5781 434.2813,554.5781 Q432.9375,554.5781 432.25,555.6563 Q431.5625,556.7188 431.5625,558.8125 Q431.5625,560.9063 432.25,561.9844 Q432.9375,563.0469 434.2813,563.0469 Q434.9063,563.0469 435.5,562.7813 Q436.0938,562.5 436.7188,561.9219 L436.7188,564.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="454.25" y="563.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="171.5" x2="788.5" y1="575" y2="575"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="178.5" y="583.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="190.5" y="589.2104">_encryptedKey: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="171.5" x2="788.5" y1="595.8047" y2="595.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="178.5" y="604.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="190.5" y="610.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="194.5" y="622.8198"/><ellipse cx="181.5" cy="633.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="190.5" y="635.6245">RSAEncryptor(int keySize)</text><ellipse cx="181.5" cy="646.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="190.5" y="648.4292">RSAEncryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="194.5" y="661.2339"/><ellipse cx="181.5" cy="671.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="190.5" y="674.0386">getEncryptedKey(): std::string</text><ellipse cx="181.5" cy="684.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="593" x="190.5" y="686.8433">saveEncryptedKeyFile(const std::string &amp;filename, const std::string &amp;ciphertextKey, int keyLength): void</text><ellipse cx="181.5" cy="697.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="190.5" y="699.6479">encrypt(EVP_PKEY *pkey, const std::string &amp;msg): bool</text><!--class RSADecryptor--><rect fill="#FEFECE" filter="url(#f1lhtt44ya9u32)" height="163.2422" id="RSADecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="467" x="824.5" y="543"/><ellipse cx="1011.25" cy="559" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1014.2188,564.6406 Q1013.6406,564.9375 1013,565.0781 Q1012.3594,565.2344 1011.6563,565.2344 Q1009.1563,565.2344 1007.8281,563.5938 Q1006.5156,561.9375 1006.5156,558.8125 Q1006.5156,555.6875 1007.8281,554.0313 Q1009.1563,552.375 1011.6563,552.375 Q1012.3594,552.375 1013,552.5313 Q1013.6563,552.6875 1014.2188,552.9844 L1014.2188,555.7031 Q1013.5938,555.125 1013,554.8594 Q1012.4063,554.5781 1011.7813,554.5781 Q1010.4375,554.5781 1009.75,555.6563 Q1009.0625,556.7188 1009.0625,558.8125 Q1009.0625,560.9063 1009.75,561.9844 Q1010.4375,563.0469 1011.7813,563.0469 Q1012.4063,563.0469 1013,562.7813 Q1013.5938,562.5 1014.2188,561.9219 L1014.2188,564.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="1031.75" y="563.1543">RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="825.5" x2="1290.5" y1="575" y2="575"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="832.5" y="583.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="844.5" y="589.2104">_decryptedKey: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="825.5" x2="1290.5" y1="595.8047" y2="595.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="832.5" y="604.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="844.5" y="610.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="848.5" y="622.8198"/><ellipse cx="835.5" cy="633.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="844.5" y="635.6245">RSADecryptor()</text><ellipse cx="835.5" cy="646.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="844.5" y="648.4292">RSADecryptor(const std::string &amp;key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="848.5" y="661.2339"/><ellipse cx="835.5" cy="671.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="844.5" y="674.0386">getDecryptedKey(): std::string</text><ellipse cx="835.5" cy="684.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="844.5" y="686.8433">getBinKeyFileContents(const std::string &amp;filepath): std::string</text><ellipse cx="835.5" cy="697.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="844.5" y="699.6479">decrypt(EVP_PKEY *pkey, const std::string &amp;msg): bool</text><!--class Encryptor--><rect fill="#FEFECE" filter="url(#f1lhtt44ya9u32)" height="86.4141" id="Encryptor" style="stroke: #A80036; stroke-width: 1.5;" width="387" x="793.5" y="781"/><ellipse cx="952.75" cy="797" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M955.7188,802.6406 Q955.1406,802.9375 954.5,803.0781 Q953.8594,803.2344 953.1563,803.2344 Q950.6563,803.2344 949.3281,801.5938 Q948.0156,799.9375 948.0156,796.8125 Q948.0156,793.6875 949.3281,792.0313 Q950.6563,790.375 953.1563,790.375 Q953.8594,790.375 954.5,790.5313 Q955.1563,790.6875 955.7188,790.9844 L955.7188,793.7031 Q955.0938,793.125 954.5,792.8594 Q953.9063,792.5781 953.2813,792.5781 Q951.9375,792.5781 951.25,793.6563 Q950.5625,794.7188 950.5625,796.8125 Q950.5625,798.9063 951.25,799.9844 Q951.9375,801.0469 953.2813,801.0469 Q953.9063,801.0469 954.5,800.7813 Q955.0938,800.5 955.7188,799.9219 L955.7188,802.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="973.25" y="801.1543">Encryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="794.5" x2="1179.5" y1="813" y2="813"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="801.5" y="821.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="813.5" y="827.2104">_keySize: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="801.5" y="834.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="813.5" y="840.0151">_rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="794.5" x2="1179.5" y1="846.6094" y2="846.6094"/><ellipse cx="804.5" cy="858.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="813.5" y="860.8198">Encryptor()</text><!--class Decryptor--><rect fill="#FEFECE" filter="url(#f1lhtt44ya9u32)" height="73.6094" id="Decryptor" style="stroke: #A80036; stroke-width: 1.5;" width="384" x="1216" y="787"/><ellipse cx="1373.25" cy="803" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1376.2188,808.6406 Q1375.6406,808.9375 1375,809.0781 Q1374.3594,809.2344 1373.6563,809.2344 Q1371.1563,809.2344 1369.8281,807.5938 Q1368.5156,805.9375 1368.5156,802.8125 Q1368.5156,799.6875 1369.8281,798.0313 Q1371.1563,796.375 1373.6563,796.375 Q1374.3594,796.375 1375,796.5313 Q1375.6563,796.6875 1376.2188,796.9844 L1376.2188,799.7031 Q1375.5938,799.125 1375,798.8594 Q1374.4063,798.5781 1373.7813,798.5781 Q1372.4375,798.5781 1371.75,799.6563 Q1371.0625,800.7188 1371.0625,802.8125 Q1371.0625,804.9063 1371.75,805.9844 Q1372.4375,807.0469 1373.7813,807.0469 Q1374.4063,807.0469 1375,806.7813 Q1375.5938,806.5 1376.2188,805.9219 L1376.2188,808.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="1393.75" y="807.1543">Decryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1217" x2="1599" y1="819" y2="819"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1224" y="827.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="1236" y="833.2104">_rsaDecryptorAESKey, rsaDecryptorCPrivateRSA: RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1217" x2="1599" y1="839.8047" y2="839.8047"/><ellipse cx="1227" cy="851.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="1236" y="854.0151">Decryptor()</text><!--entity ##14--><!--entity ##16--><!--entity ##18--><!--link CryptoRSA to RSAEncryptor--><path d="M574.95,499.16 C563.28,514.45 551.98,529.24 541.5,542.97 " fill="none" id="CryptoRSA-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="569.53,494.72,587.24,483.07,580.66,503.22,569.53,494.72" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoRSA to RSADecryptor--><path d="M933.74,497.71 C949.35,513.51 964.46,528.81 978.44,542.97 " fill="none" id="CryptoRSA-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="928.35,502.22,919.27,483.07,938.31,492.38,928.35,502.22" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoAES to AESEncryptor--><path d="M1601.34,392.41 C1574.8,447.5 1542.58,514.36 1519.65,561.97 " fill="none" id="CryptoAES-AESEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1595.12,389.21,1610.1,374.23,1607.73,395.28,1595.12,389.21" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoAES to AESDecryptor--><path d="M1696.66,392.41 C1723.2,447.5 1755.42,514.36 1778.35,561.97 " fill="none" id="CryptoAES-AESDecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1690.27,395.28,1687.9,374.23,1702.88,389.21,1690.27,395.28" style="stroke: #A80036; stroke-width: 1.0;"/><!--link RSAEncryptor to Encryptor--><path d="M699.34,710.94 C761.52,735.16 826.49,760.47 878.92,780.9 " fill="none" id="RSAEncryptor-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="686.95,706.12,691.0909,712.0236,698.1331,710.4719,693.9922,704.5683,686.95,706.12" style="stroke: #A80036; stroke-width: 1.0;"/><!--link AESEncryptor to Encryptor--><path d="M1389.52,693.79 C1363.94,708.14 1335.8,721.5 1308,730 C1261.13,744.34 1245.75,726.93 1198,738 C1155.87,747.77 1111.18,764.73 1073.82,780.94 " fill="none" id="AESEncryptor-Encryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1401.09,687.14,1393.8943,686.6694,1390.6923,693.1306,1397.888,693.6012,1401.09,687.14" style="stroke: #A80036; stroke-width: 1.0;"/><!--link RSADecryptor to Decryptor--><path d="M1212.28,712.56 C1258.62,738.71 1306.92,765.96 1343.95,786.86 " fill="none" id="RSADecryptor-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1200.86,706.12,1204.1226,712.5508,1211.3136,712.0125,1208.051,705.5817,1200.86,706.12" style="stroke: #A80036; stroke-width: 1.0;"/><!--link AESDecryptor to Decryptor--><path d="M1710.12,694.48 C1690.34,707.08 1669.35,719.54 1649,730 C1606.82,751.68 1558.37,771.32 1516.02,786.91 " fill="none" id="AESDecryptor-Decryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1721.29,687.27,1714.0797,687.1646,1711.2092,693.7797,1718.4195,693.8851,1721.29,687.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml

package butterfly #AAAAAA
{

package aes #DDDDDD
{
    class CryptoAES {
        -_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*
        -_aesKeyLength, _aesIvLength: int

        #_aesKey, _aesIv: unsigned char*

        +CryptoAES()

        +generateAESKey(): bool
        +encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t
        +decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t
    }

    class AESEncryptor {

        +AESEncryptor()

        +getAESKey() const: std::string
        +getAESIv() const: std::string

        +encryptFile(const std::string &filename): void
    }

    class AESDecryptor {

        +AESDecryptor()

        +setAESKey(const std::string &aesKey): void
        +setAESIv(const std::string &aesIv): void

        +decryptFile(const std::string &filename): void
    }

}

package rsa #DDDDDD
{
    class CryptoRSA {
        -_rsa: RSA*
        -_pkey: EVP_PKEY*
        -_keySize, _paddingSize: int
        -_rsaPrivateKeyStr, *_rsaPublicKeyStr, *_publicKeyStr: char*

        -initPaddingSize(): void
        -loadKeyFromFile(const std::string &filepath): void
        -loadKeyFromStr(const std::string &str): void
        -getOpenSSLError(): string
        -generateRSAKey(): bool
        -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

        +CryptoRSA()
        +CryptoRSA(int keySize)
        +CryptoRSA(const std::string &key)

        +getRSAKey(): RSA*
        +getRSAKeySize(): int
        +getPaddingSize(): int
        +getEvpPkey(): EVP_PKEY*
        +getEvpPkeySize(EVP_PKEY *key): int
        +getRSAPrivateKeyStr(): char*
        +getPkeyFromPrivateKeyFile(const std::string &filepath): EVP_PKEY*
        +getPkeyFromPublicKeyFile(const std::string &filepath): EVP_PKEY*

        +encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): size_t
        +decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): size_t
    }
    class RSAEncryptor {
        -_encryptedKey: std::string

        -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

        +RSAEncryptor(int keySize)
        +RSAEncryptor(const std::string &key)

        +getEncryptedKey(): std::string
        +saveEncryptedKeyFile(const std::string &filename, const std::string &ciphertextKey, int keyLength): void
        +encrypt(EVP_PKEY *pkey, const std::string &msg): bool
    }
    class RSADecryptor {

        -_decryptedKey: std::string
        -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

        +RSADecryptor()
        +RSADecryptor(const std::string &key)

        +getDecryptedKey(): std::string
        +getBinKeyFileContents(const std::string &filepath): std::string
        +decrypt(EVP_PKEY *pkey, const std::string &msg): bool
    }
}

package hybrid #DDDDDD
{
    class Encryptor {
        - _keySize: int
        - _rsaEncryptorCPrivateRSA, _rsaEncryptorAESKey: RSAEncryptor

        +Encryptor()

    }
    class Decryptor {
        -_rsaDecryptorAESKey, rsaDecryptorCPrivateRSA: RSADecryptor

        +Decryptor()
    }
}

together {
  class CryptoRSA
  class CryptoAES
}

together {
class RSAEncryptor
class RSADecryptor
class AESEncryptor
class AESDecryptor
}

together {
  class Encryptor
  class Decryptor
}

CryptoRSA <|- - RSAEncryptor
CryptoRSA <|- - RSADecryptor

CryptoAES <|- - AESEncryptor
CryptoAES <|- - AESDecryptor

RSAEncryptor *- - Encryptor
AESEncryptor *- - Encryptor

RSADecryptor *- - Decryptor
AESDecryptor *- - Decryptor

}
@enduml

PlantUML version 1.2018.13(Mon Nov 26 18:11:51 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.11+9-Ubuntu-0ubuntu2.20.04
Operating System: Linux
OS Version: 5.11.0-27-generic
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>