@startuml
'https://plantuml.com/sequence-diagram

package butterfly #AAAAAA
{

package aes #DDDDDD
{

class CryptoAES
{
    -_aesEncryptContext, _aesDecryptContext: EVP_CIPHER_CTX*
    -_aesKeyLength, _aesIvLength: int

    #_aesKey, _aesIv: unsigned char*

    +CryptoAES()

    +generateAESKey(): bool
    +encrypt(const unsigned char *plaintext, size_t plaintextLength, unsigned char **ciphertext): size_t
    +decrypt(unsigned char *ciphertext, size_t ciphertextLength, unsigned char **plaintext): size_t
}

class AESEncryptor
{
    +AESEncryptor()

    +getAESKey() const: std::string
    +getAESIv() const: std::string

    +encryptFile(const std::string &filename): void

}

class AESDecryptor
{
    +AESDecryptor()

    +setAESKey(const std::string &aesKey): void
    +setAESIv(const std::string &aesIv): void

    +decryptFile(const std::string &filename): void
}

CryptoAES <-- AESEncryptor
CryptoAES <-- AESDecryptor
}

package rsa #DDDDDD
{

class CryptoRSA
{
    -_rsa: RSA*
    -_pkey: EVP_PKEY*
    -_keySize, _paddingSize: int
    -_rsaPrivateKeyStr, *_rsaPublicKeyStr, *_publicKeyStr: char*

    -initPaddingSize(): void
    -loadKeyFromFile(const std::string &filepath): void
    -loadKeyFromStr(const std::string &str): void
    -getOpenSSLError(): string
    -generateRSAKey(): bool
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    +CryptoRSA()
    +CryptoRSA(int keySize)
    +CryptoRSA(const std::string &key)
    +getRSAKey(): RSA*
    +getRSAKeySize(): int
    +getPaddingSize(): int
    +getEvpPkey(): EVP_PKEY*
    +getEvpPkeySize(EVP_PKEY *key): int
    +getRSAPrivateKeyStr(): char*
    +getRSAPublicKeyStr(): char*
    +getPublicKeyStr(): char*
    +createRSAPrivateKeyFile(const std::string &filename):bool
    +createRSAPublicKeyFile(const std::string &filename): bool
    +createPublicKeyFile(const std::string &filename): bool
    +getPkeyFromPrivateKeyFile(const std::string &filepath): EVP_PKEY*
    +getPkeyFromPublicKeyFile(const std::string &filepath): EVP_PKEY*
    +encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): size_t
    +decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): size_t
}

class RSAEncryptor
{
    -_encryptedKey: std::string

    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    +RSAEncryptor(int keySize)
    +RSAEncryptor(const std::string &key)
    +getEncryptedKey(): std::string
    +saveEncryptedKeyFile(const std::string &filename, const std::string &ciphertextKey, int keyLength): void
    +encrypt(EVP_PKEY *pkey, const std::string &msg): bool
}

class RSADecryptor
{
    -_decryptedKey: std::string
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): bool

    +RSADecryptor()
    +RSADecryptor(const std::string &key)
    +getDecryptedKey(): std::string
    +getBinKeyFileContents(const std::string &filepath): std::string
    +decrypt(EVP_PKEY *pkey, const std::string &msg): bool
}

CryptoRSA <-- RSAEncryptor
CryptoRSA <-- RSADecryptor

}

package hybrid #DDDDDD
{

class Encryptor
{
    - _keySize: Int
    - _rsaEncryptorCPrivateRSA: RSAEncryptor
    - _rsaEncryptorAESKey: RSAEncryptor
}

class Decryptor
{

    -_rsaDecryptorAESKey: RSADecryptor
    -_rsaDecryptorCPrivateRSA: RSADecryptor
}

Encryptor <-- AESEncryptor
Encryptor <-- RSAEncryptor

Decryptor <-- AESDecryptor
Decryptor <-- RSADecryptor

}

}
@enduml