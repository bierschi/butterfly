<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="623px" preserveAspectRatio="none" style="width:1161px;height:623px;" version="1.1" viewBox="0 0 1161 623" width="1161px" zoomAndPan="magnify"><defs><filter height="300%" id="f1v7wiawv6ey5e" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--class CryptoRSA--><rect fill="#FEFECE" filter="url(#f1v7wiawv6ey5e)" height="406.5313" id="CryptoRSA" style="stroke: #A80036; stroke-width: 1.5;" width="668" x="277" y="8"/><ellipse cx="574.75" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M577.7188,29.6406 Q577.1406,29.9375 576.5,30.0781 Q575.8594,30.2344 575.1563,30.2344 Q572.6563,30.2344 571.3281,28.5938 Q570.0156,26.9375 570.0156,23.8125 Q570.0156,20.6875 571.3281,19.0313 Q572.6563,17.375 575.1563,17.375 Q575.8594,17.375 576.5,17.5313 Q577.1563,17.6875 577.7188,17.9844 L577.7188,20.7031 Q577.0938,20.125 576.5,19.8594 Q575.9063,19.5781 575.2813,19.5781 Q573.9375,19.5781 573.25,20.6563 Q572.5625,21.7188 572.5625,23.8125 Q572.5625,25.9063 573.25,26.9844 Q573.9375,28.0469 575.2813,28.0469 Q575.9063,28.0469 576.5,27.7813 Q577.0938,27.5 577.7188,26.9219 L577.7188,29.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="595.25" y="28.1543">CryptoRSA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="278" x2="944" y1="40" y2="40"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="285" y="48.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="297" y="54.2104">_rsa: RSA*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="285" y="61.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="297" y="67.0151">_pkey: EVP_PKEY*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="285" y="74.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="297" y="79.8198">_keySize, _paddingSize: Int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="285" y="87.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="297" y="92.6245">_rsaPrivateKeyStr, *_rsaPublicKeyStr, *_publicKeyStr: Char*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="278" x2="944" y1="99.2188" y2="99.2188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="285" y="108.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="297" y="113.4292">initPaddingSize(): Void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="285" y="120.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="297" y="126.2339">loadKeyFromFile(const std::string &amp;filepath): Void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="285" y="133.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="297" y="139.0386">loadKeyFromStr(const std::string &amp;str): Void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="285" y="146.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="297" y="151.8433">getOpenSSLError(): String</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="285" y="159.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="297" y="164.6479">generateRSAKey(): Boolean</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="285" y="172.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="297" y="177.4526">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): Boolean</text><ellipse cx="288" cy="187.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="297" y="190.2573">CryptoRSA()</text><ellipse cx="288" cy="200.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="297" y="203.062">CryptoRSA(int keySize)</text><ellipse cx="288" cy="213.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="297" y="215.8667">CryptoRSA(const std::string &amp;key)</text><ellipse cx="288" cy="226.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="297" y="228.6714">getRSAKey(): RSA*</text><ellipse cx="288" cy="239.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="297" y="241.4761">getRSAKeySize(): Int</text><ellipse cx="288" cy="251.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="297" y="254.2808">getPaddingSize(): Int</text><ellipse cx="288" cy="264.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="297" y="267.0854">getEvpPkey(): EVP_PKEY*</text><ellipse cx="288" cy="277.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="297" y="279.8901">getEvpPkeySize(EVP_PKEY *key): Int</text><ellipse cx="288" cy="290.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="297" y="292.6948">getRSAPrivateKeyStr(): Char*</text><ellipse cx="288" cy="303.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="297" y="305.4995">getRSAPublicKeyStr(): Char*</text><ellipse cx="288" cy="315.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="297" y="318.3042">getPublicKeyStr(): Char*</text><ellipse cx="288" cy="328.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="297" y="331.1089">createRSAPrivateKeyFile(const std::string &amp;filename):Boolean</text><ellipse cx="288" cy="341.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="297" y="343.9136">createRSAPublicKeyFile(const std::string &amp;filename): Boolean</text><ellipse cx="288" cy="354.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="297" y="356.7183">createPublicKeyFile(const std::string &amp;filename): Boolean</text><ellipse cx="288" cy="367.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="378" x="297" y="369.5229">getPkeyFromPrivateKeyFile(const std::string &amp;filepath): EVP_PKEY*</text><ellipse cx="288" cy="380.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="297" y="382.3276">getPkeyFromPublicKeyFile(const std::string &amp;filepath): EVP_PKEY*</text><ellipse cx="288" cy="392.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="642" x="297" y="395.1323">encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): Size_t</text><ellipse cx="288" cy="405.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="615" x="297" y="407.937">decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): Size_t</text><!--class RSAEncryptor--><rect fill="#FEFECE" filter="url(#f1v7wiawv6ey5e)" height="137.6328" id="RSAEncryptor" style="stroke: #A80036; stroke-width: 1.5;" width="620" x="6" y="475"/><ellipse cx="269.75" cy="491" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M272.7188,496.6406 Q272.1406,496.9375 271.5,497.0781 Q270.8594,497.2344 270.1563,497.2344 Q267.6563,497.2344 266.3281,495.5938 Q265.0156,493.9375 265.0156,490.8125 Q265.0156,487.6875 266.3281,486.0313 Q267.6563,484.375 270.1563,484.375 Q270.8594,484.375 271.5,484.5313 Q272.1563,484.6875 272.7188,484.9844 L272.7188,487.7031 Q272.0938,487.125 271.5,486.8594 Q270.9063,486.5781 270.2813,486.5781 Q268.9375,486.5781 268.25,487.6563 Q267.5625,488.7188 267.5625,490.8125 Q267.5625,492.9063 268.25,493.9844 Q268.9375,495.0469 270.2813,495.0469 Q270.9063,495.0469 271.5,494.7813 Q272.0938,494.5 272.7188,493.9219 L272.7188,496.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="290.25" y="495.1543">RSAEncryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="625" y1="507" y2="507"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="515.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="26" y="521.2104">_encryptedKey: String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="625" y1="527.8047" y2="527.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="536.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="26" y="542.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): Boolean</text><ellipse cx="17" cy="552.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="26" y="554.8198">RSAEncryptor(int keySize)</text><ellipse cx="17" cy="565.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="26" y="567.6245">RSAEncryptor(const std::string &amp;key)</text><ellipse cx="17" cy="578.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="26" y="580.4292">getEncryptedKey(): String</text><ellipse cx="17" cy="590.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="594" x="26" y="593.2339">saveEncryptedKeyFile(const std::string &amp;filename, const std::string &amp;ciphertextKey, int keyLength): Void</text><ellipse cx="17" cy="603.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="26" y="606.0386">encrypt(EVP_PKEY *pkey, const std::string &amp;msg): Boolean</text><!--class RSADecryptor--><rect fill="#FEFECE" filter="url(#f1v7wiawv6ey5e)" height="137.6328" id="RSADecryptor" style="stroke: #A80036; stroke-width: 1.5;" width="489" x="661.5" y="475"/><ellipse cx="859.25" cy="491" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M862.2188,496.6406 Q861.6406,496.9375 861,497.0781 Q860.3594,497.2344 859.6563,497.2344 Q857.1563,497.2344 855.8281,495.5938 Q854.5156,493.9375 854.5156,490.8125 Q854.5156,487.6875 855.8281,486.0313 Q857.1563,484.375 859.6563,484.375 Q860.3594,484.375 861,484.5313 Q861.6563,484.6875 862.2188,484.9844 L862.2188,487.7031 Q861.5938,487.125 861,486.8594 Q860.4063,486.5781 859.7813,486.5781 Q858.4375,486.5781 857.75,487.6563 Q857.0625,488.7188 857.0625,490.8125 Q857.0625,492.9063 857.75,493.9844 Q858.4375,495.0469 859.7813,495.0469 Q860.4063,495.0469 861,494.7813 Q861.5938,494.5 862.2188,493.9219 L862.2188,496.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="879.75" y="495.1543">RSADecryptor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="662.5" x2="1149.5" y1="507" y2="507"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="669.5" y="515.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="681.5" y="521.2104">_decryptedKey: String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="662.5" x2="1149.5" y1="527.8047" y2="527.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="669.5" y="536.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="681.5" y="542.0151">validateStringLengthForRSA(const std::string &amp;msg, const int &amp;keysize): Boolean</text><ellipse cx="672.5" cy="552.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="681.5" y="554.8198">RSADecryptor()</text><ellipse cx="672.5" cy="565.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="681.5" y="567.6245">RSADecryptor(const std::string &amp;key)</text><ellipse cx="672.5" cy="578.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="681.5" y="580.4292">getDecryptedKey(): String</text><ellipse cx="672.5" cy="590.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="681.5" y="593.2339">getBinKeyFileContents(const std::string &amp;filepath): String</text><ellipse cx="672.5" cy="603.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="681.5" y="606.0386">decrypt(EVP_PKEY *pkey, const std::string &amp;msg): Boolean</text><!--link CryptoRSA to RSAEncryptor--><path d="M426.553,419.3936 C409.0924,439.0738 392.3701,457.9219 377.4532,474.735 " fill="none" id="CryptoRSA-RSAEncryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="430.0547,415.4468,421.0896,419.5245,426.7364,419.187,427.0739,424.8337,430.0547,415.4468" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CryptoRSA to RSADecryptor--><path d="M795.447,419.3936 C812.9076,439.0738 829.6299,457.9219 844.5468,474.735 " fill="none" id="CryptoRSA-RSADecryptor" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="791.9453,415.4468,794.9261,424.8337,795.2636,419.187,800.9104,419.5245,791.9453,415.4468" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml
'https://plantuml.com/sequence-diagram
class CryptoRSA {
    -_rsa: RSA*
    -_pkey: EVP_PKEY*
    -_keySize, _paddingSize: Int
    -_rsaPrivateKeyStr, *_rsaPublicKeyStr, *_publicKeyStr: Char*

    -initPaddingSize(): Void
    -loadKeyFromFile(const std::string &filepath): Void
    -loadKeyFromStr(const std::string &str): Void
    -getOpenSSLError(): String
    -generateRSAKey(): Boolean
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): Boolean

    +CryptoRSA()
    +CryptoRSA(int keySize)
    +CryptoRSA(const std::string &key)
    +getRSAKey(): RSA*
    +getRSAKeySize(): Int
    +getPaddingSize(): Int
    +getEvpPkey(): EVP_PKEY*
    +getEvpPkeySize(EVP_PKEY *key): Int
    +getRSAPrivateKeyStr(): Char*
    +getRSAPublicKeyStr(): Char*
    +getPublicKeyStr(): Char*
    +createRSAPrivateKeyFile(const std::string &filename):Boolean
    +createRSAPublicKeyFile(const std::string &filename): Boolean
    +createPublicKeyFile(const std::string &filename): Boolean
    +getPkeyFromPrivateKeyFile(const std::string &filepath): EVP_PKEY*
    +getPkeyFromPublicKeyFile(const std::string &filepath): EVP_PKEY*
    +encrypt(EVP_PKEY *key, const unsigned char *plaintext, size_t plaintextLength, unsigned char *ciphertext): Size_t
    +decrypt(EVP_PKEY *key, unsigned char* ciphertext, size_t ciphertextLength, unsigned char* plaintext): Size_t
}

class RSAEncryptor {
    -_encryptedKey: String

    -validateStringLengthForRSA(const std::string &msg, const int &keysize): Boolean

    +RSAEncryptor(int keySize)
    +RSAEncryptor(const std::string &key)
    +getEncryptedKey(): String
    +saveEncryptedKeyFile(const std::string &filename, const std::string &ciphertextKey, int keyLength): Void
    +encrypt(EVP_PKEY *pkey, const std::string &msg): Boolean
}

class RSADecryptor {
    -_decryptedKey: String
    -validateStringLengthForRSA(const std::string &msg, const int &keysize): Boolean

    +RSADecryptor()
    +RSADecryptor(const std::string &key)
    +getDecryptedKey(): String
    +getBinKeyFileContents(const std::string &filepath): String
    +decrypt(EVP_PKEY *pkey, const std::string &msg): Boolean
}

CryptoRSA <- - RSAEncryptor
CryptoRSA <- - RSADecryptor
@enduml

PlantUML version 1.2017.15(Mon Jul 03 18:45:34 CEST 2017)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.10+9-Ubuntu-0ubuntu1.18.04
Operating System: Linux
OS Version: 5.4.0-70-generic
Default Encoding: UTF-8
Language: de
Country: DE
--></g></svg>