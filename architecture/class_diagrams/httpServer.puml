@startuml
'https://plantuml.com/sequence-diagram
package butterfly #DDDDDD
{

class Socket
{
    - _socketDomain, _socketType, _socketProtocol: int
    # _fd: int
    # _addr: sockaddr_in

    + Socket(int domain, int type, int protocol)
    + Socket(int fileDescriptor, int domain, int type, int protocol)

    + getFileDescriptor() const: int
    + shutdown() const: bool
    + setOptions() const: bool
    + setBlocking() const: bool
    + setNonBlocking() const: bool

    + bind(unsigned int port): bool
    + listen() const: bool
    + accept(): std::shared_ptr<Socket>
    + connect(const std::string& host, const int port): bool
    + disconnect() const: bool
}

class TCPSocket
{

    + TCPSocket()
    + TCPSocket(int fileDescriptor)

    + accept(): std::shared_ptr<TCPSocket>
    + send(const std::string& s) const: bool
    + recv(char *buf,int len) const: int
    + recvAll(int chunkSize) const: std::string
}


class HTTPServer
{
    - _port: unsigned int port
    - _running: bool
    - _TCPSocket, _newTCPSocket: std::shared_ptr<TCPSocket>
    - _httpRequest: std::unique_ptr<HTTPRequest>

    + HTTPServer(unsigned int port)

    - handleRequest():
    - recvRequest():
    - processRequest():
    - preprareResponse():
    - sendResponse():

    +run(): void
    +stop(): void
}

class HTTPSchema
{
    - _data, _body: std::string
    - _httpMethod: Method
    - _protocol: Protocol
    - _httpHeaders: std::vector< std::pair<std::string, std::string> >

    + HTTPSchema()

    + addData(const std::string &data): void
    + getData() const: std::string
    + setProtocol(Protocol protocol): void
    + getProtocol() const: Protocol
    + addBody(const std::string &body)
    + getBody() const: std::string
    + setHTTPHeader(const std::string &headerName, const std::string &headerContent): void
    + getHTTPHeader(const std::string &headerName) const: std::string
    + parse() = 0: int
    + prepare() = 0: void
}

class HTTPRequest
{

    +HTTPRequest()
}

class HTTPResponse
{

    +HTTPResponse()
}

Socket            <|-- TCPSocket
TCPSocket "1..*"  o--  "1" HTTPServer : <<uses>>

HTTPServer "1"    --* "1..*" HTTPRequest: <<processes>>
HTTPServer "1"    --* "1..*" HTTPResponse: <<sends>>

HTTPSchema <|-- HTTPRequest
HTTPSchema <|-- HTTPResponse

}
@enduml