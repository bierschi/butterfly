<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1653px" preserveAspectRatio="none" style="width:1610px;height:1653px;" version="1.1" viewBox="0 0 1610 1653" width="1610px" zoomAndPan="magnify"><defs><filter height="300%" id="fhuc3ipt12uak" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster butterfly--><polygon fill="#DDDDDD" filter="url(#fhuc3ipt12uak)" points="22,24,96,24,103,46.2969,1588,46.2969,1588,1641,22,1641,22,24" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="22" x2="103" y1="46.2969" y2="46.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="68" x="26" y="38.9951">butterfly</text><!--class Type--><rect fill="#FEFECE" filter="url(#fhuc3ipt12uak)" height="86.4141" id="Type" style="stroke: #A80036; stroke-width: 1.5;" width="73" x="1316.5" y="85"/><ellipse cx="1336.9" cy="101" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1341.0094,107 L1333.2906,107 L1333.2906,94.6094 L1341.0094,94.6094 L1341.0094,96.7656 L1335.7438,96.7656 L1335.7438,99.4375 L1340.5094,99.4375 L1340.5094,101.5938 L1335.7438,101.5938 L1335.7438,104.8438 L1341.0094,104.8438 L1341.0094,107 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="1352.1" y="105.1543">Type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1317.5" x2="1388.5" y1="117" y2="117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="38" x="1322.5" y="131.2104">Socket</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="1322.5" y="144.0151">TCPSocket</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="1322.5" y="156.8198">TORSocket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1317.5" x2="1388.5" y1="163.4141" y2="163.4141"/><!--class ISocket--><rect fill="#FEFECE" filter="url(#fhuc3ipt12uak)" height="137.6328" id="ISocket" style="stroke: #A80036; stroke-width: 1.5;" width="353" x="807.5" y="59"/><ellipse cx="956.25" cy="75" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M952.1719,70.7656 L952.1719,68.6094 L959.5625,68.6094 L959.5625,70.7656 L957.0938,70.7656 L957.0938,78.8438 L959.5625,78.8438 L959.5625,81 L952.1719,81 L952.1719,78.8438 L954.6406,78.8438 L954.6406,70.7656 L952.1719,70.7656 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="47" x="976.75" y="79.1543">ISocket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="808.5" x2="1159.5" y1="91" y2="91"/><ellipse cx="818.5" cy="102.9023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="827.5" y="105.2104">enum Type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="808.5" x2="1159.5" y1="111.8047" y2="111.8047"/><ellipse cx="818.5" cy="123.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="827.5" y="126.0151">ISocket()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="831.5" y="138.8198"/><ellipse cx="818.5" cy="149.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="827.5" y="151.6245">send(const std::string &amp;s) const = 0: bool</text><ellipse cx="818.5" cy="162.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="827.5" y="164.4292">recv(char *buf, int len) const = 0: int</text><ellipse cx="818.5" cy="174.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="827.5" y="177.2339">recvAll(int chunkSize, bool blocking) const = 0: std::string</text><ellipse cx="818.5" cy="187.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="827.5" y="190.0386">getType() const = 0: ISocket::Type</text><!--class Socket--><rect fill="#FEFECE" filter="url(#fhuc3ipt12uak)" height="342.5078" id="Socket" style="stroke: #A80036; stroke-width: 1.5;" width="393" x="614.5" y="258"/><ellipse cx="785.25" cy="274" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M788.2188,279.6406 Q787.6406,279.9375 787,280.0781 Q786.3594,280.2344 785.6563,280.2344 Q783.1563,280.2344 781.8281,278.5938 Q780.5156,276.9375 780.5156,273.8125 Q780.5156,270.6875 781.8281,269.0313 Q783.1563,267.375 785.6563,267.375 Q786.3594,267.375 787,267.5313 Q787.6563,267.6875 788.2188,267.9844 L788.2188,270.7031 Q787.5938,270.125 787,269.8594 Q786.4063,269.5781 785.7813,269.5781 Q784.4375,269.5781 783.75,270.6563 Q783.0625,271.7188 783.0625,273.8125 Q783.0625,275.9063 783.75,276.9844 Q784.4375,278.0469 785.7813,278.0469 Q786.4063,278.0469 787,277.7813 Q787.5938,277.5 788.2188,276.9219 L788.2188,279.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="43" x="805.75" y="278.1543">Socket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="615.5" x2="1006.5" y1="290" y2="290"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="622.5" y="298.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="634.5" y="304.2104">_socketDomain, _socketType, _socketProtocol: int</text><polygon fill="none" points="625.5,309.707,629.5,313.707,625.5,317.707,621.5,313.707" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="39" x="634.5" y="317.0151">_fd: int</text><polygon fill="none" points="625.5,322.5117,629.5,326.5117,625.5,330.5117,621.5,326.5117" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="634.5" y="329.8198">_addr: sockaddr_in</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="615.5" x2="1006.5" y1="336.4141" y2="336.4141"/><ellipse cx="625.5" cy="348.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="634.5" y="350.6245">Socket(int domain, int type, int protocol)</text><ellipse cx="625.5" cy="361.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="634.5" y="363.4292">Socket(int fileDescriptor, int domain, int type, int protocol)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="638.5" y="376.2339"/><ellipse cx="625.5" cy="386.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="634.5" y="389.0386">getFileDescriptor() const: int</text><ellipse cx="625.5" cy="399.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="634.5" y="401.8433">shutdown() const: bool</text><ellipse cx="625.5" cy="412.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="634.5" y="414.6479">setOptions() const: bool</text><ellipse cx="625.5" cy="425.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="634.5" y="427.4526">setBlocking() const: bool</text><ellipse cx="625.5" cy="437.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="634.5" y="440.2573">setNonBlocking() const: bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="638.5" y="453.062"/><ellipse cx="625.5" cy="463.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="634.5" y="465.8667">bind(unsigned int port): bool</text><ellipse cx="625.5" cy="476.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="634.5" y="478.6714">listen() const: bool</text><ellipse cx="625.5" cy="489.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="634.5" y="491.4761">accept(): std::shared_ptr&lt;Socket&gt;</text><ellipse cx="625.5" cy="501.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="634.5" y="504.2808">connect(const std::string&amp; host, int port): bool</text><ellipse cx="625.5" cy="514.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="634.5" y="517.0854">disconnect() const: bool</text><ellipse cx="625.5" cy="527.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="367" x="634.5" y="529.8901">hostnameToIP(const std::string &amp;hostname, std::string &amp;ip): int</text><line style="stroke: #000000; stroke-width: 1.0;" x1="634.5" x2="1001.5" y1="531.8901" y2="531.8901"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="638.5" y="542.6948"/><ellipse cx="625.5" cy="553.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="634.5" y="555.4995">send(const std::string &amp;s) const: bool</text><ellipse cx="625.5" cy="565.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="634.5" y="568.3042">recv(char *buf, int len) const: int</text><ellipse cx="625.5" cy="578.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="634.5" y="581.1089">recvAll(int chunkSize, bool blocking) const: std::string</text><ellipse cx="625.5" cy="591.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="634.5" y="593.9136">getType() const: ISocket::Type</text><!--class TCPSocket--><rect fill="#FEFECE" filter="url(#fhuc3ipt12uak)" height="150.4375" id="TCPSocket" style="stroke: #A80036; stroke-width: 1.5;" width="329" x="398.5" y="694"/><ellipse cx="525.75" cy="710" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M528.7188,715.6406 Q528.1406,715.9375 527.5,716.0781 Q526.8594,716.2344 526.1563,716.2344 Q523.6563,716.2344 522.3281,714.5938 Q521.0156,712.9375 521.0156,709.8125 Q521.0156,706.6875 522.3281,705.0313 Q523.6563,703.375 526.1563,703.375 Q526.8594,703.375 527.5,703.5313 Q528.1563,703.6875 528.7188,703.9844 L528.7188,706.7031 Q528.0938,706.125 527.5,705.8594 Q526.9063,705.5781 526.2813,705.5781 Q524.9375,705.5781 524.25,706.6563 Q523.5625,707.7188 523.5625,709.8125 Q523.5625,711.9063 524.25,712.9844 Q524.9375,714.0469 526.2813,714.0469 Q526.9063,714.0469 527.5,713.7813 Q528.0938,713.5 528.7188,712.9219 L528.7188,715.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="546.25" y="714.1543">TCPSocket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="399.5" x2="726.5" y1="726" y2="726"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="399.5" x2="726.5" y1="734" y2="734"/><ellipse cx="409.5" cy="745.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="418.5" y="748.2104">TCPSocket()</text><ellipse cx="409.5" cy="758.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="418.5" y="761.0151">TCPSocket(int fileDescriptor)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="422.5" y="773.8198"/><ellipse cx="409.5" cy="784.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="418.5" y="786.6245">accept(): std::shared_ptr&lt;TCPSocket&gt;</text><ellipse cx="409.5" cy="797.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="418.5" y="799.4292">send(const std::string &amp;s) const: bool</text><ellipse cx="409.5" cy="809.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="418.5" y="812.2339">recv(char *buf, int len) const: int</text><ellipse cx="409.5" cy="822.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="418.5" y="825.0386">recvAll(int chunkSize, bool blocking) const: std::string</text><ellipse cx="409.5" cy="835.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="418.5" y="837.8433">getType() const: ISocket::Type</text><!--class TORSocket--><rect fill="#FEFECE" filter="url(#fhuc3ipt12uak)" height="214.4609" id="TORSocket" style="stroke: #A80036; stroke-width: 1.5;" width="329" x="879.5" y="662"/><ellipse cx="1006.25" cy="678" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1009.2188,683.6406 Q1008.6406,683.9375 1008,684.0781 Q1007.3594,684.2344 1006.6563,684.2344 Q1004.1563,684.2344 1002.8281,682.5938 Q1001.5156,680.9375 1001.5156,677.8125 Q1001.5156,674.6875 1002.8281,673.0313 Q1004.1563,671.375 1006.6563,671.375 Q1007.3594,671.375 1008,671.5313 Q1008.6563,671.6875 1009.2188,671.9844 L1009.2188,674.7031 Q1008.5938,674.125 1008,673.8594 Q1007.4063,673.5781 1006.7813,673.5781 Q1005.4375,673.5781 1004.75,674.6563 Q1004.0625,675.7188 1004.0625,677.8125 Q1004.0625,679.9063 1004.75,680.9844 Q1005.4375,682.0469 1006.7813,682.0469 Q1007.4063,682.0469 1008,681.7813 Q1008.5938,681.5 1009.2188,680.9219 L1009.2188,683.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="67" x="1026.75" y="682.1543">TORSocket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="880.5" x2="1207.5" y1="694" y2="694"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="887.5" y="702.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="899.5" y="708.2104">_ip: std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="887.5" y="715.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="51" x="899.5" y="721.0151">_port: int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="887.5" y="728.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="899.5" y="733.8198">_sendAuthBuf[3], _connReqDomainBuf[4]: char</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="880.5" x2="1207.5" y1="740.4141" y2="740.4141"/><ellipse cx="890.5" cy="752.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="899.5" y="754.6245">TORSocket(const std::string &amp;ip, int port)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="903.5" y="767.4292"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="887.5" y="774.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="899.5" y="780.2339">authenticate(const std::string &amp;str, int size): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="887.5" y="787.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="270" x="899.5" y="793.0386">serverStatusResponse(char status): std::string</text><line style="stroke: #000000; stroke-width: 1.0;" x1="899.5" x2="1169.5" y1="795.0386" y2="795.0386"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="903.5" y="805.8433"/><ellipse cx="890.5" cy="816.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="899.5" y="818.6479">connect(const std::string &amp;domain, int port): bool</text><ellipse cx="890.5" cy="829.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="899.5" y="831.4526">send(const std::string &amp;s) const: bool</text><ellipse cx="890.5" cy="841.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="899.5" y="844.2573">recv(char *buf, int len) const: int</text><ellipse cx="890.5" cy="854.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="899.5" y="857.062">recvAll(int chunkSize, bool blocking) const: std::string</text><ellipse cx="890.5" cy="867.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="899.5" y="869.8667">getType() const: ISocket::Type</text><!--class UDPSocket--><rect fill="#FEFECE" filter="url(#fhuc3ipt12uak)" height="130.7656" id="UDPSocket" style="stroke: #A80036; stroke-width: 1.5;" width="329" x="1243.5" y="703.5"/><ellipse cx="1341.25" cy="722.4688" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1344.2188,728.1094 Q1343.6406,728.4063 1343,728.5469 Q1342.3594,728.7031 1341.6563,728.7031 Q1339.1563,728.7031 1337.8281,727.0625 Q1336.5156,725.4063 1336.5156,722.2813 Q1336.5156,719.1563 1337.8281,717.5 Q1339.1563,715.8438 1341.6563,715.8438 Q1342.3594,715.8438 1343,716 Q1343.6563,716.1563 1344.2188,716.4531 L1344.2188,719.1719 Q1343.5938,718.5938 1343,718.3281 Q1342.4063,718.0469 1341.7813,718.0469 Q1340.4375,718.0469 1339.75,719.125 Q1339.0625,720.1875 1339.0625,722.2813 Q1339.0625,724.375 1339.75,725.4531 Q1340.4375,726.5156 1341.7813,726.5156 Q1342.4063,726.5156 1343,726.25 Q1343.5938,725.9688 1344.2188,725.3906 L1344.2188,728.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="129" x="1359.75" y="719.6387">«NOT IMPLEMENTED»</text><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="69" x="1389.75" y="733.6074">UDPSocket</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1244.5" x2="1571.5" y1="741.4375" y2="741.4375"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1244.5" x2="1571.5" y1="749.4375" y2="749.4375"/><ellipse cx="1254.5" cy="761.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1263.5" y="763.6479">UDPSocket()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1267.5" y="776.4526"/><ellipse cx="1254.5" cy="786.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="1263.5" y="789.2573">send(const std::string &amp;s) const: bool</text><ellipse cx="1254.5" cy="799.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="1263.5" y="802.062">recv(char *buf, int len) const: int</text><ellipse cx="1254.5" cy="812.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="1263.5" y="814.8667">recvAll(int chunkSize, bool blocking) const: std::string</text><ellipse cx="1254.5" cy="825.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="1263.5" y="827.6714">getType() const: ISocket::Type</text><!--class HTTPServer--><rect fill="#FEFECE" filter="url(#fhuc3ipt12uak)" height="278.4844" id="HTTPServer" style="stroke: #A80036; stroke-width: 1.5;" width="363" x="638.5" y="998"/><ellipse cx="780.25" cy="1014" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M783.2188,1019.6406 Q782.6406,1019.9375 782,1020.0781 Q781.3594,1020.2344 780.6563,1020.2344 Q778.1563,1020.2344 776.8281,1018.5938 Q775.5156,1016.9375 775.5156,1013.8125 Q775.5156,1010.6875 776.8281,1009.0313 Q778.1563,1007.375 780.6563,1007.375 Q781.3594,1007.375 782,1007.5313 Q782.6563,1007.6875 783.2188,1007.9844 L783.2188,1010.7031 Q782.5938,1010.125 782,1009.8594 Q781.4063,1009.5781 780.7813,1009.5781 Q779.4375,1009.5781 778.75,1010.6563 Q778.0625,1011.7188 778.0625,1013.8125 Q778.0625,1015.9063 778.75,1016.9844 Q779.4375,1018.0469 780.7813,1018.0469 Q781.4063,1018.0469 782,1017.7813 Q782.5938,1017.5 783.2188,1016.9219 L783.2188,1019.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="800.75" y="1018.1543">HTTPServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="639.5" x2="1000.5" y1="1030" y2="1030"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1038.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="658.5" y="1044.2104">_port: unsigned int port</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1051.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="658.5" y="1057.0151">_running: std::atomic&lt;bool&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1064.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="658.5" y="1069.8198">_TCPSocket, _newTCPSocket: std::shared_ptr&lt;TCPSocket&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1077.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="658.5" y="1082.6245">_httpRequest: std::unique_ptr&lt;HTTPRequest&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1090.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="658.5" y="1095.4292">_httpResponse: std::unique_ptr&lt;HTTPResponse&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1102.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="658.5" y="1108.2339">_serverThread: std::thread</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="639.5" x2="1000.5" y1="1114.8281" y2="1114.8281"/><ellipse cx="649.5" cy="1126.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="658.5" y="1129.0386">HTTPServer(unsigned int port)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="662.5" y="1141.8433"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1149.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="658.5" y="1154.6479">handleRequest(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1162.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="658.5" y="1167.4526">processRequest(): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1174.9492"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="658.5" y="1180.2573">sendResponse(): bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1187.7539"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="658.5" y="1193.062">browserRoute(): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1200.5586"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="658.5" y="1205.8667">successResponse(size_t statusCode): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1213.3633"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="658.5" y="1218.6714">errorResponse((size_t statusCode): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="646.5" y="1226.168"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="658.5" y="1231.4761">_run(): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="662.5" y="1244.2808"/><ellipse cx="649.5" cy="1254.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="658.5" y="1257.0854">run(bool blocking=false): void</text><ellipse cx="649.5" cy="1267.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="658.5" y="1269.8901">stop(): void</text><!--class HTTPClient--><rect fill="#FEFECE" filter="url(#fhuc3ipt12uak)" height="240.0703" id="HTTPClient" style="stroke: #A80036; stroke-width: 1.5;" width="535" x="1036.5" y="1017"/><ellipse cx="1266.75" cy="1033" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1269.7188,1038.6406 Q1269.1406,1038.9375 1268.5,1039.0781 Q1267.8594,1039.2344 1267.1563,1039.2344 Q1264.6563,1039.2344 1263.3281,1037.5938 Q1262.0156,1035.9375 1262.0156,1032.8125 Q1262.0156,1029.6875 1263.3281,1028.0313 Q1264.6563,1026.375 1267.1563,1026.375 Q1267.8594,1026.375 1268.5,1026.5313 Q1269.1563,1026.6875 1269.7188,1026.9844 L1269.7188,1029.7031 Q1269.0938,1029.125 1268.5,1028.8594 Q1267.9063,1028.5781 1267.2813,1028.5781 Q1265.9375,1028.5781 1265.25,1029.6563 Q1264.5625,1030.7188 1264.5625,1032.8125 Q1264.5625,1034.9063 1265.25,1035.9844 Q1265.9375,1037.0469 1267.2813,1037.0469 Q1267.9063,1037.0469 1268.5,1036.7813 Q1269.0938,1036.5 1269.7188,1035.9219 L1269.7188,1038.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="1287.25" y="1037.1543">HTTPClient</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1037.5" x2="1570.5" y1="1049" y2="1049"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1044.5" y="1057.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="1056.5" y="1063.2104">_socket: std::shared_ptr&lt;Socket&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1044.5" y="1070.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="1056.5" y="1076.0151">_httpRequest: std::unique_ptr&lt;HTTPRequest&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1044.5" y="1083.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="1056.5" y="1088.8198">_httpResponse: std::unique_ptr&lt;HTTPResponse&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1044.5" y="1096.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="1056.5" y="1101.6245">_httpHeaders: std::vector&lt; std::pair&lt;std::string, std::string&gt; &gt;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1060.5" y="1114.4292"/><ellipse cx="1047.5" cy="1124.9258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1056.5" y="1127.2339">statusCode : size_t</text><ellipse cx="1047.5" cy="1137.7305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1056.5" y="1140.0386">reasonPhrase: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1037.5" x2="1570.5" y1="1146.6328" y2="1146.6328"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1044.5" y="1155.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="509" x="1056.5" y="1160.8433">prepareRequest(const std::string &amp;url, Method method, const std::string &amp;data=""): void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1044.5" y="1168.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="1056.5" y="1173.6479">processResponse(): bool</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1060.5" y="1186.4526"/><ellipse cx="1047.5" cy="1196.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="1056.5" y="1199.2573">HTTPClient(const std::shared_ptr&lt;Socket&gt; &amp;socket)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1060.5" y="1212.062"/><ellipse cx="1047.5" cy="1222.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="508" x="1056.5" y="1224.8667">setHTTPHeader(const std::string &amp;headerName, const std::string &amp;headerContent): void</text><ellipse cx="1047.5" cy="1235.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="1056.5" y="1237.6714">get(const std::string &amp;url, int port=80): std::string</text><ellipse cx="1047.5" cy="1248.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="436" x="1056.5" y="1250.4761">post(const std::string &amp;url, const std::string &amp;data, int port=80): std::string</text><!--class HTTPMSGSchema--><rect fill="#FEFECE" filter="url(#fhuc3ipt12uak)" height="368.1172" id="HTTPMSGSchema" style="stroke: #A80036; stroke-width: 1.5;" width="565" x="38.5" y="953"/><ellipse cx="262.75" cy="969" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M265.7188,974.6406 Q265.1406,974.9375 264.5,975.0781 Q263.8594,975.2344 263.1563,975.2344 Q260.6563,975.2344 259.3281,973.5938 Q258.0156,971.9375 258.0156,968.8125 Q258.0156,965.6875 259.3281,964.0313 Q260.6563,962.375 263.1563,962.375 Q263.8594,962.375 264.5,962.5313 Q265.1563,962.6875 265.7188,962.9844 L265.7188,965.7031 Q265.0938,965.125 264.5,964.8594 Q263.9063,964.5781 263.2813,964.5781 Q261.9375,964.5781 261.25,965.6563 Q260.5625,966.7188 260.5625,968.8125 Q260.5625,970.9063 261.25,971.9844 Q261.9375,973.0469 263.2813,973.0469 Q263.9063,973.0469 264.5,972.7813 Q265.0938,972.5 265.7188,971.9219 L265.7188,974.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="108" x="283.25" y="973.1543">HTTPMSGSchema</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="39.5" x2="602.5" y1="985" y2="985"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="46.5" y="993.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="58.5" y="999.2104">_httpData, _body, _messageType, _formParam: std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="46.5" y="1006.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="58.5" y="1012.0151">_httpMethod: Method</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="46.5" y="1019.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="58.5" y="1024.8198">_protocol: Protocol</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="46.5" y="1032.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="58.5" y="1037.6245">_httpHeaders: std::vector&lt; std::pair&lt;std::string, std::string&gt; &gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="39.5" x2="602.5" y1="1044.2188" y2="1044.2188"/><ellipse cx="49.5" cy="1056.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="58.5" y="1058.4292">HTTPMSGSchema(const std::string &amp;messageType)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="62.5" y="1071.2339"/><ellipse cx="49.5" cy="1081.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="58.5" y="1084.0386">print() const: void</text><ellipse cx="49.5" cy="1094.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="58.5" y="1096.8433">addHTTPData(const std::string &amp;data): void</text><ellipse cx="49.5" cy="1107.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="58.5" y="1109.6479">getHTTPData() const: std::string</text><ellipse cx="49.5" cy="1120.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="58.5" y="1122.4526">getHTTPDataSize() const: size_t</text><ellipse cx="49.5" cy="1132.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="58.5" y="1135.2573">setProtocol(Protocol protocol): void</text><ellipse cx="49.5" cy="1145.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="58.5" y="1148.062">getProtocol() const: Protocol</text><ellipse cx="49.5" cy="1158.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="58.5" y="1160.8667">addBody(const std::string &amp;body)</text><ellipse cx="49.5" cy="1171.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="58.5" y="1173.6714">getBody() const: std::string</text><ellipse cx="49.5" cy="1184.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="58.5" y="1186.4761">getBodyLength() const: size_t</text><ellipse cx="49.5" cy="1196.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="508" x="58.5" y="1199.2808">setHTTPHeader(const std::string &amp;headerName, const std::string &amp;headerContent): void</text><ellipse cx="49.5" cy="1209.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="379" x="58.5" y="1212.0854">getHTTPHeader(const std::string &amp;headerName) const: std::string</text><ellipse cx="49.5" cy="1222.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="519" x="58.5" y="1224.8901">addHTTPHeaderVector(std::vector&lt; std::pair&lt;std::string, std::string&gt; &gt; &amp;headerVec): void</text><ellipse cx="49.5" cy="1235.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="58.5" y="1237.6948">getHTTPHeadersSize() const: size_t</text><ellipse cx="49.5" cy="1248.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="414" x="58.5" y="1250.4995">setFormParam(const std::string &amp;param, const std::string &amp;value): void</text><ellipse cx="49.5" cy="1260.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="58.5" y="1263.3042">getFormParam() const: std::string</text><ellipse cx="49.5" cy="1273.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="539" x="58.5" y="1276.1089">addFormParamVector(std::vector&lt; std::pair&lt;std::string, std::string&gt; &gt; &amp;formParamVec): void</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="62.5" y="1288.9136"/><ellipse cx="49.5" cy="1299.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="58.5" y="1301.7183">parseIncoming() = 0: void</text><ellipse cx="49.5" cy="1312.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="58.5" y="1314.5229">prepareOutgoing() = 0: void</text><!--class HTTPRequest--><rect fill="#FEFECE" filter="url(#fhuc3ipt12uak)" height="227.2656" id="HTTPRequest" style="stroke: #A80036; stroke-width: 1.5;" width="308" x="404" y="1398"/><ellipse cx="512.25" cy="1414" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M515.2188,1419.6406 Q514.6406,1419.9375 514,1420.0781 Q513.3594,1420.2344 512.6563,1420.2344 Q510.1563,1420.2344 508.8281,1418.5938 Q507.5156,1416.9375 507.5156,1413.8125 Q507.5156,1410.6875 508.8281,1409.0313 Q510.1563,1407.375 512.6563,1407.375 Q513.3594,1407.375 514,1407.5313 Q514.6563,1407.6875 515.2188,1407.9844 L515.2188,1410.7031 Q514.5938,1410.125 514,1409.8594 Q513.4063,1409.5781 512.7813,1409.5781 Q511.4375,1409.5781 510.75,1410.6563 Q510.0625,1411.7188 510.0625,1413.8125 Q510.0625,1415.9063 510.75,1416.9844 Q511.4375,1418.0469 512.7813,1418.0469 Q513.4063,1418.0469 514,1417.7813 Q514.5938,1417.5 515.2188,1416.9219 L515.2188,1419.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="83" x="532.75" y="1418.1543">HTTPRequest</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="405" x2="711" y1="1430" y2="1430"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="412" y="1438.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="424" y="1444.2104">_url, _userAgent, _route: std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="405" x2="711" y1="1450.8047" y2="1450.8047"/><ellipse cx="415" cy="1462.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="424" y="1465.0151">HTTPRequest()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="428" y="1477.8198"/><ellipse cx="415" cy="1488.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="424" y="1490.6245">setMethod(Method &amp;method): void</text><ellipse cx="415" cy="1501.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="424" y="1503.4292">getMethod() const: Method</text><ellipse cx="415" cy="1513.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="424" y="1516.2339">setURL(const std::string &amp;url): void</text><ellipse cx="415" cy="1526.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="424" y="1529.0386">getURL() const: std::string</text><ellipse cx="415" cy="1539.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="424" y="1541.8433">setUserAgent(const std::string &amp;userAgent): void</text><ellipse cx="415" cy="1552.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="424" y="1554.6479">getUserAgent() const: std::string</text><ellipse cx="415" cy="1565.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="424" y="1567.4526">setRoute(const std::string &amp;route): void</text><ellipse cx="415" cy="1577.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="424" y="1580.2573">getRoute() const: std::string</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="428" y="1593.062"/><ellipse cx="415" cy="1603.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="424" y="1605.8667">parseIncoming(): void</text><ellipse cx="415" cy="1616.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="424" y="1618.6714">prepareOutgoing(): void</text><!--class HTTPResponse--><rect fill="#FEFECE" filter="url(#fhuc3ipt12uak)" height="188.8516" id="HTTPResponse" style="stroke: #A80036; stroke-width: 1.5;" width="266" x="747" y="1417"/><ellipse cx="829.25" cy="1433" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M832.2188,1438.6406 Q831.6406,1438.9375 831,1439.0781 Q830.3594,1439.2344 829.6563,1439.2344 Q827.1563,1439.2344 825.8281,1437.5938 Q824.5156,1435.9375 824.5156,1432.8125 Q824.5156,1429.6875 825.8281,1428.0313 Q827.1563,1426.375 829.6563,1426.375 Q830.3594,1426.375 831,1426.5313 Q831.6563,1426.6875 832.2188,1426.9844 L832.2188,1429.7031 Q831.5938,1429.125 831,1428.8594 Q830.4063,1428.5781 829.7813,1428.5781 Q828.4375,1428.5781 827.75,1429.6563 Q827.0625,1430.7188 827.0625,1432.8125 Q827.0625,1434.9063 827.75,1435.9844 Q828.4375,1437.0469 829.7813,1437.0469 Q830.4063,1437.0469 831,1436.7813 Q831.5938,1436.5 832.2188,1435.9219 L832.2188,1438.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="93" x="849.75" y="1437.1543">HTTPResponse</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="748" x2="1012" y1="1449" y2="1449"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="755" y="1457.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="767" y="1463.2104">_reasonPhrase: std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="755" y="1470.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="767" y="1476.0151">_statusCode: size_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="748" x2="1012" y1="1482.6094" y2="1482.6094"/><ellipse cx="758" cy="1494.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="767" y="1496.8198">HTTPResponse()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="771" y="1509.6245"/><ellipse cx="758" cy="1520.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="767" y="1522.4292">setStatusCode(size_t statusCode): void</text><ellipse cx="758" cy="1532.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="767" y="1535.2339">getStatusCode() const: size_t</text><ellipse cx="758" cy="1545.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="767" y="1548.0386">setReasonPhrase(size_t statusCode): void</text><ellipse cx="758" cy="1558.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="767" y="1560.8433">getReasonPhrase() const: std::string</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="771" y="1573.6479"/><ellipse cx="758" cy="1584.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="767" y="1586.4526">parseIncoming(): void</text><ellipse cx="758" cy="1596.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="767" y="1599.2573">prepareOutgoing(): void</text><!--entity ##21--><!--link ISocket to Socket--><path d="M934.47,214.75 C926.58,228.41 918.17,242.96 909.61,257.78 " fill="none" id="ISocket-Socket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="928.46,211.15,944.53,197.34,940.58,218.16,928.46,211.15" style="stroke: #A80036; stroke-width: 1.0;"/><!--link ISocket to TCPSocket--><path d="M787.52,148.99 C716.54,166.53 642.71,198.83 597,258 C499.21,384.57 522.27,585.74 544.48,693.71 " fill="none" id="ISocket-TCPSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="786.38,142.07,807.44,144.43,789.51,155.72,786.38,142.07" style="stroke: #A80036; stroke-width: 1.0;"/><!--link ISocket to TORSocket--><path d="M1015.22,216.24 C1019.14,230.06 1022.61,244.31 1025,258 C1049.03,395.92 1050.63,557.86 1048.34,661.64 " fill="none" id="ISocket-TORSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1008.52,218.27,1009.43,197.1,1021.92,214.21,1008.52,218.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--link ISocket to UDPSocket--><path d="M1040.27,213.8 C1126.14,343.22 1288.04,587.21 1365.12,703.37 " fill="none" id="ISocket-UDPSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1034.4,217.62,1029.17,197.08,1046.07,209.88,1034.4,217.62" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Socket to TCPSocket--><path d="M673.52,617.59 C653.73,644.52 634.41,670.82 617.59,693.7 " fill="none" id="Socket-TCPSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="668.06,613.2,685.55,601.23,679.34,621.49,668.06,613.2" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Socket to UDPSocket--><path d="M1025.35,549.08 C1089.98,585.1 1161,624.95 1226,662 C1249.35,675.31 1274.29,689.71 1297.99,703.49 " fill="none" id="Socket-UDPSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1021.82,555.12,1007.75,539.27,1028.63,542.89,1021.82,555.12" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Socket to TORSocket--><path d="M940.51,618.09 C950.78,632.98 960.92,647.67 970.6,661.68 " fill="none" id="Socket-TORSocket" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="934.47,621.66,928.87,601.23,945.99,613.71,934.47,621.66" style="stroke: #A80036; stroke-width: 1.0;"/><!--link TCPSocket to HTTPServer--><path d="M622.61,854.9 C652.38,897.29 689.14,949.64 722.85,997.64 " fill="none" id="TCPSocket-HTTPServer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="615.01,844.07,615.1836,851.279,621.9048,853.8915,621.7312,846.6825,615.01,844.07" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="46" x="669" y="919.0669">«uses»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="596.1876" y="864.6362">1..*</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="709.6345" y="987.1254">1</text><!--link Socket to HTTPClient--><path d="M767.14,614.16 C757.07,700.74 761.81,801.18 814,876 C869.68,955.82 932.01,909.35 1019,953 C1056.45,971.79 1095.13,994.3 1131.45,1016.99 " fill="none" id="Socket-HTTPClient" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="768.77,601.22,764.0559,606.6769,767.28,613.1271,771.994,607.6702,768.77,601.22" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="46" x="815" y="773.5669">«uses»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="758.9641" y="620.2999">1</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="1112.1398" y="1005.8903">1</text><!--link HTTPServer to HTTPRequest--><path d="M722.81,1276.18 C697.28,1312.48 669.9,1351.41 644.94,1386.9 " fill="none" id="HTTPServer-HTTPRequest" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="637.27,1397.8,643.9952,1395.1978,644.1798,1387.9891,637.4546,1390.5913,637.27,1397.8" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="81" x="666" y="1364.0669">«processes»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="708.96" y="1296.7167">1</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="618.6115" y="1387.0983">1..*</text><!--link HTTPServer to HTTPResponse--><path d="M842.26,1276.18 C849.06,1318.4 856.43,1364.17 862.84,1403.95 " fill="none" id="HTTPServer-HTTPResponse" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="864.93,1416.92,867.9224,1410.3591,863.0171,1405.0734,860.0247,1411.6343,864.93,1416.92" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="54" x="856" y="1364.0669">«sends»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="835.3157" y="1296.7167">1</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="839.8127" y="1405.8636">1..*</text><!--link HTTPClient to HTTPRequest--><path d="M1144.08,1257.06 C1077.82,1299.93 998.07,1343.68 919,1368 C837.71,1393 809.35,1367.38 730,1398 C728.03,1398.76 726.07,1399.54 724.1,1400.35 " fill="none" id="HTTPClient-HTTPRequest" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="712.03,1405.59,719.126,1406.8734,723.0399,1400.8169,715.9439,1399.5335,712.03,1405.59" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="54" x="965" y="1364.0669">«sends»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="1125.5789" y="1277.3007">1</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="720.0479" y="1397.1604">1..*</text><!--link HTTPClient to HTTPResponse--><path d="M1247.21,1257.14 C1224.62,1295.9 1195.87,1336.9 1162,1368 C1122.61,1404.17 1072.33,1433.46 1025.16,1455.86 " fill="none" id="HTTPClient-HTTPResponse" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1013.24,1461.4,1020.3686,1462.4874,1024.1142,1456.3254,1016.9856,1455.238,1013.24,1461.4" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="81" x="1178" y="1364.0669">«processes»</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="1235.5056" y="1276.9869">1</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="1021.1555" y="1455.3246">1..*</text><!--link HTTPMSGSchema to HTTPRequest--><path d="M448.52,1338.43 C461.51,1358.84 474.35,1379.03 486.42,1398 " fill="none" id="HTTPMSGSchema-HTTPRequest" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="442.42,1341.88,437.59,1321.25,454.23,1334.37,442.42,1341.88" style="stroke: #A80036; stroke-width: 1.0;"/><!--link HTTPMSGSchema to HTTPResponse--><path d="M622.51,1320.57 C682.9,1339.81 708.73,1321.08 756,1351 C782.38,1367.7 805.4,1392.06 824.21,1416.74 " fill="none" id="HTTPMSGSchema-HTTPResponse" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="619.96,1327.09,603.56,1313.68,624.75,1313.94,619.96,1327.09" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml

package butterfly #DDDDDD
{

enum Type
{
  Socket
  TCPSocket
  TORSocket
}

Interface ISocket
{

    + enum Type

    + ISocket()

    + send(const std::string &s) const = 0: bool
    + recv(char *buf, int len) const = 0: int
    + recvAll(int chunkSize, bool blocking) const = 0: std::string
    + getType() const = 0: ISocket::Type
}

class Socket
{
    - _socketDomain, _socketType, _socketProtocol: int
    # _fd: int
    # _addr: sockaddr_in

    + Socket(int domain, int type, int protocol)
    + Socket(int fileDescriptor, int domain, int type, int protocol)

    + getFileDescriptor() const: int
    + shutdown() const: bool
    + setOptions() const: bool
    + setBlocking() const: bool
    + setNonBlocking() const: bool

    + bind(unsigned int port): bool
    + listen() const: bool
    + accept(): std::shared_ptr<Socket>
    + connect(const std::string& host, int port): bool
    + disconnect() const: bool
    + {static} hostnameToIP(const std::string &hostname, std::string &ip): int

    + send(const std::string &s) const: bool
    + recv(char *buf, int len) const: int
    + recvAll(int chunkSize, bool blocking) const: std::string
    + getType() const: ISocket::Type
}

class TCPSocket
{

    + TCPSocket()
    + TCPSocket(int fileDescriptor)

    + accept(): std::shared_ptr<TCPSocket>
    + send(const std::string &s) const: bool
    + recv(char *buf, int len) const: int
    + recvAll(int chunkSize, bool blocking) const: std::string
    + getType() const: ISocket::Type
}

class TORSocket
{
    - _ip: std::string
    - _port: int
    - _sendAuthBuf[3], _connReqDomainBuf[4]: char

    + TORSocket(const std::string &ip, int port)

    - authenticate(const std::string &str, int size): bool
    - {static} serverStatusResponse(char status): std::string

    + connect(const std::string &domain, int port): bool
    + send(const std::string &s) const: bool
    + recv(char *buf, int len) const: int
    + recvAll(int chunkSize, bool blocking) const: std::string
    + getType() const: ISocket::Type
}

class UDPSocket <<NOT IMPLEMENTED>>
{
    + UDPSocket()

    + send(const std::string &s) const: bool
    + recv(char *buf, int len) const: int
    + recvAll(int chunkSize, bool blocking) const: std::string
    + getType() const: ISocket::Type
}


ISocket           <|- - Socket
ISocket           <|- - TCPSocket
ISocket           <|- - TORSocket
ISocket           <|- - UDPSocket

Socket            <|- - TCPSocket
Socket            <|- - UDPSocket
Socket            <|- - TORSocket

}

package butterfly #DDDDDD
{

class HTTPServer
{
    - _port: unsigned int port
    - _running: std::atomic<bool>
    - _TCPSocket, _newTCPSocket: std::shared_ptr<TCPSocket>
    - _httpRequest: std::unique_ptr<HTTPRequest>
    - _httpResponse: std::unique_ptr<HTTPResponse>
    - _serverThread: std::thread

    + HTTPServer(unsigned int port)

    - handleRequest(): bool
    - processRequest(): void
    - sendResponse(): bool
    - browserRoute(): void
    - successResponse(size_t statusCode): void
    - errorResponse((size_t statusCode): void
    - _run(): void

    + run(bool blocking=false): void
    + stop(): void
}

class HTTPClient
{
    - _socket: std::shared_ptr<Socket>
    - _httpRequest: std::unique_ptr<HTTPRequest>
    - _httpResponse: std::unique_ptr<HTTPResponse>
    - _httpHeaders: std::vector< std::pair<std::string, std::string> >

    + statusCode : size_t
    + reasonPhrase: std::string

    - prepareRequest(const std::string &url, Method method, const std::string &data=""): void
    - processResponse(): bool

    + HTTPClient(const std::shared_ptr<Socket> &socket)

    + setHTTPHeader(const std::string &headerName, const std::string &headerContent): void
    + get(const std::string &url, int port=80): std::string
    + post(const std::string &url, const std::string &data, int port=80): std::string
}

class HTTPMSGSchema
{
    - _httpData, _body, _messageType, _formParam: std::string
    - _httpMethod: Method
    - _protocol: Protocol
    - _httpHeaders: std::vector< std::pair<std::string, std::string> >

    + HTTPMSGSchema(const std::string &messageType)

    + print() const: void
    + addHTTPData(const std::string &data): void
    + getHTTPData() const: std::string
    + getHTTPDataSize() const: size_t
    + setProtocol(Protocol protocol): void
    + getProtocol() const: Protocol
    + addBody(const std::string &body)
    + getBody() const: std::string
    + getBodyLength() const: size_t
    + setHTTPHeader(const std::string &headerName, const std::string &headerContent): void
    + getHTTPHeader(const std::string &headerName) const: std::string
    + addHTTPHeaderVector(std::vector< std::pair<std::string, std::string> > &headerVec): void
    + getHTTPHeadersSize() const: size_t
    + setFormParam(const std::string &param, const std::string &value): void
    + getFormParam() const: std::string
    + addFormParamVector(std::vector< std::pair<std::string, std::string> > &formParamVec): void

    + parseIncoming() = 0: void
    + prepareOutgoing() = 0: void
}

class HTTPRequest
{
    - _url, _userAgent, _route: std::string

    + HTTPRequest()

    + setMethod(Method &method): void
    + getMethod() const: Method
    + setURL(const std::string &url): void
    + getURL() const: std::string
    + setUserAgent(const std::string &userAgent): void
    + getUserAgent() const: std::string
    + setRoute(const std::string &route): void
    + getRoute() const: std::string

    + parseIncoming(): void
    + prepareOutgoing(): void
}

class HTTPResponse
{
    - _reasonPhrase: std::string
    - _statusCode: size_t

    + HTTPResponse()

    + setStatusCode(size_t statusCode): void
    + getStatusCode() const: size_t
    + setReasonPhrase(size_t statusCode): void
    + getReasonPhrase() const: std::string

    + parseIncoming(): void
    + prepareOutgoing(): void
}

together {
    class HTTPServer
    class HTTPClient
}

TCPSocket "1..*"  o- -  "1" HTTPServer : <<uses>>
Socket "1"  o- -  "1" HTTPClient : <<uses>>

HTTPServer "1"    - -* "1..*" HTTPRequest: <<processes>>
HTTPServer "1"    - -* "1..*" HTTPResponse: <<sends>>

HTTPClient "1"    - -* "1..*" HTTPRequest: <<sends>>
HTTPClient "1"    - -* "1..*" HTTPResponse: <<processes>>

HTTPMSGSchema <|- - HTTPRequest
HTTPMSGSchema <|- - HTTPResponse

}
@enduml

PlantUML version 1.2018.13(Mon Nov 26 18:11:51 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.18+10-post-Ubuntu-0ubuntu120.04.1
Operating System: Linux
OS Version: 5.15.0-67-generic
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>